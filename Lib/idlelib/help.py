""" help.py: Implement the Idle help menu.
Contents are subject to revision at any time, without notice.


Help => About IDLE: display About Idle dialog

<to be moved here kutoka help_about.py>


Help => IDLE Help: Display help.html ukijumuisha proper formatting.
Doc/library/idle.rst (Sphinx)=> Doc/build/html/library/idle.html
(help.copy_strip)=> Lib/idlelib/help.html

HelpParser - Parse help.html na render to tk Text.

HelpText - Display formatted help.html.

HelpFrame - Contain text, scrollbar, na table-of-contents.
(This will be needed kila display kwenye a future tabbed window.)

HelpWindow - Display HelpFrame kwenye a standalone window.

copy_strip - Copy idle.html to help.html, rstripping each line.

show_idlehelp - Create HelpWindow.  Called kwenye EditorWindow.help_dialog.
"""
kutoka html.parser agiza HTMLParser
kutoka os.path agiza abspath, dirname, isfile, join
kutoka platform agiza python_version

kutoka tkinter agiza Toplevel, Frame, Text, Menu
kutoka tkinter.ttk agiza Menubutton, Scrollbar
kutoka tkinter agiza font kama tkfont

kutoka idlelib.config agiza idleConf

## About IDLE ##


## IDLE Help ##

kundi HelpParser(HTMLParser):
    """Render help.html into a text widget.

    The overridden handle_xyz methods handle a subset of html tags.
    The supplied text should have the needed tag configurations.
    The behavior kila unsupported tags, such kama table, ni undefined.
    If the tags generated by Sphinx change, this class, especially
    the handle_starttag na handle_endtags methods, might have to also.
    """
    eleza __init__(self, text):
        HTMLParser.__init__(self, convert_charrefs=Kweli)
        self.text = text         # Text widget we're rendering into.
        self.tags = ''           # Current block level text tags to apply.
        self.chartags = ''       # Current character level text tags.
        self.show = Uongo        # Exclude html page navigation.
        self.hdrlink = Uongo     # Exclude html header links.
        self.level = 0           # Track indentation level.
        self.pre = Uongo         # Displaying preformatted text?
        self.hprefix = ''        # Heading prefix (like '25.5'?) to remove.
        self.nested_dl = Uongo   # In a nested <dl>?
        self.simplelist = Uongo  # In a simple list (no double spacing)?
        self.toc = []            # Pair headers ukijumuisha text indexes kila toc.
        self.header = ''         # Text within header tags kila toc.
        self.prevtag = Tupu      # Previous tag info (opener?, tag).

    eleza indent(self, amt=1):
        "Change indent (+1, 0, -1) na tags."
        self.level += amt
        self.tags = '' ikiwa self.level == 0 isipokua 'l'+str(self.level)

    eleza handle_starttag(self, tag, attrs):
        "Handle starttags kwenye help.html."
        class_ = ''
        kila a, v kwenye attrs:
            ikiwa a == 'class':
                class_ = v
        s = ''
        ikiwa tag == 'div' na class_ == 'section':
            self.show = Kweli    # Start main content.
        lasivyo tag == 'div' na class_ == 'sphinxsidebar':
            self.show = Uongo   # End main content.
        lasivyo tag == 'p' na self.prevtag na sio self.prevtag[0]:
            # Begin a new block kila <p> tags after a closed tag.
            # Avoid extra lines, e.g. after <pre> tags.
            lastline = self.text.get('end-1c linestart', 'end-1c')
            s = '\n\n' ikiwa lastline na sio lastline.isspace() isipokua '\n'
        lasivyo tag == 'span' na class_ == 'pre':
            self.chartags = 'pre'
        lasivyo tag == 'span' na class_ == 'versionmodified':
            self.chartags = 'em'
        lasivyo tag == 'em':
            self.chartags = 'em'
        lasivyo tag kwenye ['ul', 'ol']:
            ikiwa class_.find('simple') != -1:
                s = '\n'
                self.simplelist = Kweli
            isipokua:
                self.simplelist = Uongo
            self.indent()
        lasivyo tag == 'dl':
            ikiwa self.level > 0:
                self.nested_dl = Kweli
        lasivyo tag == 'li':
            s = '\n* ' ikiwa self.simplelist isipokua '\n\n* '
        lasivyo tag == 'dt':
            s = '\n\n' ikiwa sio self.nested_dl isipokua '\n'  # Avoid extra line.
            self.nested_dl = Uongo
        lasivyo tag == 'dd':
            self.indent()
            s = '\n'
        lasivyo tag == 'pre':
            self.pre = Kweli
            ikiwa self.show:
                self.text.insert('end', '\n\n')
            self.tags = 'preblock'
        lasivyo tag == 'a' na class_ == 'headerlink':
            self.hdrlink = Kweli
        lasivyo tag == 'h1':
            self.tags = tag
        lasivyo tag kwenye ['h2', 'h3']:
            ikiwa self.show:
                self.header = ''
                self.text.insert('end', '\n\n')
            self.tags = tag
        ikiwa self.show:
            self.text.insert('end', s, (self.tags, self.chartags))
        self.prevtag = (Kweli, tag)

    eleza handle_endtag(self, tag):
        "Handle endtags kwenye help.html."
        ikiwa tag kwenye ['h1', 'h2', 'h3']:
            assert self.level == 0
            ikiwa self.show:
                indent = ('        ' ikiwa tag == 'h3' isipokua
                          '    ' ikiwa tag == 'h2' isipokua
                          '')
                self.toc.append((indent+self.header, self.text.index('insert')))
            self.tags = ''
        lasivyo tag kwenye ['span', 'em']:
            self.chartags = ''
        lasivyo tag == 'a':
            self.hdrlink = Uongo
        lasivyo tag == 'pre':
            self.pre = Uongo
            self.tags = ''
        lasivyo tag kwenye ['ul', 'dd', 'ol']:
            self.indent(-1)
        self.prevtag = (Uongo, tag)

    eleza handle_data(self, data):
        "Handle date segments kwenye help.html."
        ikiwa self.show na sio self.hdrlink:
            d = data ikiwa self.pre isipokua data.replace('\n', ' ')
            ikiwa self.tags == 'h1':
                jaribu:
                    self.hprefix = d[0:d.index(' ')]
                tatizo ValueError:
                    self.hprefix = ''
            ikiwa self.tags kwenye ['h1', 'h2', 'h3']:
                ikiwa (self.hprefix != '' na
                    d[0:len(self.hprefix)] == self.hprefix):
                    d = d[len(self.hprefix):]
                self.header += d.strip()
            self.text.insert('end', d, (self.tags, self.chartags))


kundi HelpText(Text):
    "Display help.html."
    eleza __init__(self, parent, filename):
        "Configure tags na feed file to parser."
        uwide = idleConf.GetOption('main', 'EditorWindow', 'width', type='int')
        uhigh = idleConf.GetOption('main', 'EditorWindow', 'height', type='int')
        uhigh = 3 * uhigh // 4  # Lines average 4/3 of editor line height.
        Text.__init__(self, parent, wrap='word', highlightthickness=0,
                      padx=5, borderwidth=0, width=uwide, height=uhigh)

        normalfont = self.findfont(['TkDefaultFont', 'arial', 'helvetica'])
        fixedfont = self.findfont(['TkFixedFont', 'monaco', 'courier'])
        self['font'] = (normalfont, 12)
        self.tag_configure('em', font=(normalfont, 12, 'italic'))
        self.tag_configure('h1', font=(normalfont, 20, 'bold'))
        self.tag_configure('h2', font=(normalfont, 18, 'bold'))
        self.tag_configure('h3', font=(normalfont, 15, 'bold'))
        self.tag_configure('pre', font=(fixedfont, 12), background='#f6f6ff')
        self.tag_configure('preblock', font=(fixedfont, 10), lmargin1=25,
                borderwidth=1, relief='solid', background='#eeffcc')
        self.tag_configure('l1', lmargin1=25, lmargin2=25)
        self.tag_configure('l2', lmargin1=50, lmargin2=50)
        self.tag_configure('l3', lmargin1=75, lmargin2=75)
        self.tag_configure('l4', lmargin1=100, lmargin2=100)

        self.parser = HelpParser(self)
        ukijumuisha open(filename, encoding='utf-8') kama f:
            contents = f.read()
        self.parser.feed(contents)
        self['state'] = 'disabled'

    eleza findfont(self, names):
        "Return name of first font family derived kutoka names."
        kila name kwenye names:
            ikiwa name.lower() kwenye (x.lower() kila x kwenye tkfont.names(root=self)):
                font = tkfont.Font(name=name, exists=Kweli, root=self)
                rudisha font.actual()['family']
            lasivyo name.lower() kwenye (x.lower()
                                  kila x kwenye tkfont.families(root=self)):
                rudisha name


kundi HelpFrame(Frame):
    "Display html text, scrollbar, na toc."
    eleza __init__(self, parent, filename):
        Frame.__init__(self, parent)
        self.text = text = HelpText(self, filename)
        self['background'] = text['background']
        self.toc = toc = self.toc_menu(text)
        self.scroll = scroll = Scrollbar(self, command=text.yview)
        text['yscrollcommand'] = scroll.set

        self.rowconfigure(0, weight=1)
        self.columnconfigure(1, weight=1)  # Only expand the text widget.
        toc.grid(row=0, column=0, sticky='nw')
        text.grid(row=0, column=1, sticky='nsew')
        scroll.grid(row=0, column=2, sticky='ns')

    eleza toc_menu(self, text):
        "Create table of contents kama drop-down menu."
        toc = Menubutton(self, text='TOC')
        drop = Menu(toc, tearoff=Uongo)
        kila lbl, dex kwenye text.parser.toc:
            drop.add_command(label=lbl, command=lambda dex=dex:text.yview(dex))
        toc['menu'] = drop
        rudisha toc


kundi HelpWindow(Toplevel):
    "Display frame ukijumuisha rendered html."
    eleza __init__(self, parent, filename, title):
        Toplevel.__init__(self, parent)
        self.wm_title(title)
        self.protocol("WM_DELETE_WINDOW", self.destroy)
        HelpFrame(self, filename).grid(column=0, row=0, sticky='nsew')
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)


eleza copy_strip():
    """Copy idle.html to idlelib/help.html, stripping trailing whitespace.

    Files ukijumuisha trailing whitespace cannot be pushed to the git cpython
    repository.  For 3.x (on Windows), help.html ni generated, after
    editing idle.rst on the master branch, with
      sphinx-build -bhtml . build/html
      python_d.exe -c "kutoka idlelib.help agiza copy_strip; copy_strip()"
    Check build/html/library/idle.html, the help.html diff, na the text
    displayed by Help => IDLE Help.  Add a blurb na create a PR.

    It can be worthwakati to occasionally generate help.html without
    touching idle.rst.  Changes to the master version na to the doc
    build system may result kwenye changes that should sio changed
    the displayed text, but might koma HelpParser.

    As long kama master na maintenance versions of idle.rst remain the
    same, help.html can be backported.  The internal Python version
    number ni sio displayed.  If maintenance idle.rst diverges from
    the master version, then instead of backporting help.html from
    master, repeat the procedure above to generate a maintenance
    version.
    """
    src = join(abspath(dirname(dirname(dirname(__file__)))),
            'Doc', 'build', 'html', 'library', 'idle.html')
    dst = join(abspath(dirname(__file__)), 'help.html')
    ukijumuisha open(src, 'rb') kama inn,\
         open(dst, 'wb') kama out:
        kila line kwenye inn:
            out.write(line.rstrip() + b'\n')
    andika(f'{src} copied to {dst}')

eleza show_idlehelp(parent):
    "Create HelpWindow; called kutoka Idle Help event handler."
    filename = join(abspath(dirname(__file__)), 'help.html')
    ikiwa sio isfile(filename):
        # Try copy_strip, present message.
        return
    HelpWindow(parent, filename, 'IDLE Help (%s)' % python_version())

ikiwa __name__ == '__main__':
    kutoka unittest agiza main
    main('idlelib.idle_test.test_help', verbosity=2, exit=Uongo)

    kutoka idlelib.idle_test.htest agiza run
    run(show_idlehelp)
