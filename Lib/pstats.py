"""Class kila printing reports on profiled python code."""

# Written by James Roskind
# Based on prior profile module by Sjoerd Mullender...
#   which was hacked somewhat by: Guido van Rossum

# Copyright Disney Enterprises, Inc.  All Rights Reserved.
# Licensed to PSF under a Contributor Agreement
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may sio use this file tatizo kwenye compliance ukijumuisha the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law ama agreed to kwenye writing, software
# distributed under the License ni distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express ama implied.  See the License kila the specific language
# governing permissions na limitations under the License.


agiza sys
agiza os
agiza time
agiza marshal
agiza re
kutoka enum agiza Enum
kutoka functools agiza cmp_to_key

__all__ = ["Stats", "SortKey"]


kundi SortKey(str, Enum):
    CALLS = 'calls', 'ncalls'
    CUMULATIVE = 'cumulative', 'cumtime'
    FILENAME = 'filename', 'module'
    LINE = 'line'
    NAME = 'name'
    NFL = 'nfl'
    PCALLS = 'pcalls'
    STDNAME = 'stdname'
    TIME = 'time', 'tottime'

    eleza __new__(cls, *values):
        obj = str.__new__(cls)

        obj._value_ = values[0]
        kila other_value kwenye values[1:]:
            cls._value2member_map_[other_value] = obj
        obj._all_values = values
        rudisha obj


kundi Stats:
    """This kundi ni used kila creating reports kutoka data generated by the
    Profile class.  It ni a "friend" of that class, na agizas data either
    by direct access to members of Profile class, ama by reading kwenye a dictionary
    that was emitted (via marshal) kutoka the Profile class.

    The big change kutoka the previous Profiler (in terms of raw functionality)
    ni that an "add()" method has been provided to combine Stats kutoka
    several distinct profile runs.  Both the constructor na the add()
    method now take arbitrarily many file names kama arguments.

    All the print methods now take an argument that indicates how many lines
    to print.  If the arg ni a floating point number between 0 na 1.0, then
    it ni taken kama a decimal percentage of the available lines to be printed
    (e.g., .1 means print 10% of all available lines).  If it ni an integer,
    it ni taken to mean the number of lines of data that you wish to have
    printed.

    The sort_stats() method now processes some additional options (i.e., in
    addition to the old -1, 0, 1, ama 2 that are respectively interpreted as
    'stdname', 'calls', 'time', na 'cumulative').  It takes either an
    arbitrary number of quoted strings ama SortKey enum to select the sort
    order.

    For example sort_stats('time', 'name') ama sort_stats(SortKey.TIME,
    SortKey.NAME) sorts on the major key of 'internal function time', na on
    the minor key of 'the name of the function'.  Look at the two tables in
    sort_stats() na get_sort_arg_defs(self) kila more examples.

    All methods rudisha self, so you can string together commands like:
        Stats('foo', 'goo').strip_dirs().sort_stats('calls').\
                            print_stats(5).print_callers(5)
    """

    eleza __init__(self, *args, stream=Tupu):
        self.stream = stream ama sys.stdout
        ikiwa sio len(args):
            arg = Tupu
        isipokua:
            arg = args[0]
            args = args[1:]
        self.init(arg)
        self.add(*args)

    eleza init(self, arg):
        self.all_callees = Tupu  # calc only ikiwa needed
        self.files = []
        self.fcn_list = Tupu
        self.total_tt = 0
        self.total_calls = 0
        self.prim_calls = 0
        self.max_name_len = 0
        self.top_level = set()
        self.stats = {}
        self.sort_arg_dict = {}
        self.load_stats(arg)
        jaribu:
            self.get_top_level_stats()
        tatizo Exception:
            andika("Invalid timing data %s" %
                  (self.files[-1] ikiwa self.files isipokua ''), file=self.stream)
            ashiria

    eleza load_stats(self, arg):
        ikiwa arg ni Tupu:
            self.stats = {}
            rudisha
        lasivyo isinstance(arg, str):
            ukijumuisha open(arg, 'rb') kama f:
                self.stats = marshal.load(f)
            jaribu:
                file_stats = os.stat(arg)
                arg = time.ctime(file_stats.st_mtime) + "    " + arg
            tatizo:  # kwenye case this ni sio unix
                pita
            self.files = [arg]
        lasivyo hasattr(arg, 'create_stats'):
            arg.create_stats()
            self.stats = arg.stats
            arg.stats = {}
        ikiwa sio self.stats:
            ashiria TypeError("Cannot create ama construct a %r object kutoka %r"
                            % (self.__class__, arg))
        rudisha

    eleza get_top_level_stats(self):
        kila func, (cc, nc, tt, ct, callers) kwenye self.stats.items():
            self.total_calls += nc
            self.prim_calls  += cc
            self.total_tt    += tt
            ikiwa ("jprofile", 0, "profiler") kwenye callers:
                self.top_level.add(func)
            ikiwa len(func_std_string(func)) > self.max_name_len:
                self.max_name_len = len(func_std_string(func))

    eleza add(self, *arg_list):
        ikiwa sio arg_list:
            rudisha self
        kila item kwenye reversed(arg_list):
            ikiwa type(self) != type(item):
                item = Stats(item)
            self.files += item.files
            self.total_calls += item.total_calls
            self.prim_calls += item.prim_calls
            self.total_tt += item.total_tt
            kila func kwenye item.top_level:
                self.top_level.add(func)

            ikiwa self.max_name_len < item.max_name_len:
                self.max_name_len = item.max_name_len

            self.fcn_list = Tupu

            kila func, stat kwenye item.stats.items():
                ikiwa func kwenye self.stats:
                    old_func_stat = self.stats[func]
                isipokua:
                    old_func_stat = (0, 0, 0, 0, {},)
                self.stats[func] = add_func_stats(old_func_stat, stat)
        rudisha self

    eleza dump_stats(self, filename):
        """Write the profile data to a file we know how to load back."""
        ukijumuisha open(filename, 'wb') kama f:
            marshal.dump(self.stats, f)

    # list the tuple indices na directions kila sorting,
    # along ukijumuisha some printable description
    sort_arg_dict_default = {
              "calls"     : (((1,-1),              ), "call count"),
              "ncalls"    : (((1,-1),              ), "call count"),
              "cumtime"   : (((3,-1),              ), "cumulative time"),
              "cumulative": (((3,-1),              ), "cumulative time"),
              "filename"  : (((4, 1),              ), "file name"),
              "line"      : (((5, 1),              ), "line number"),
              "module"    : (((4, 1),              ), "file name"),
              "name"      : (((6, 1),              ), "function name"),
              "nfl"       : (((6, 1),(4, 1),(5, 1),), "name/file/line"),
              "pcalls"    : (((0,-1),              ), "primitive call count"),
              "stdname"   : (((7, 1),              ), "standard name"),
              "time"      : (((2,-1),              ), "internal time"),
              "tottime"   : (((2,-1),              ), "internal time"),
              }

    eleza get_sort_arg_defs(self):
        """Expand all abbreviations that are unique."""
        ikiwa sio self.sort_arg_dict:
            self.sort_arg_dict = dict = {}
            bad_list = {}
            kila word, tup kwenye self.sort_arg_dict_default.items():
                fragment = word
                wakati fragment:
                    ikiwa sio fragment:
                        koma
                    ikiwa fragment kwenye dict:
                        bad_list[fragment] = 0
                        koma
                    dict[fragment] = tup
                    fragment = fragment[:-1]
            kila word kwenye bad_list:
                toa dict[word]
        rudisha self.sort_arg_dict

    eleza sort_stats(self, *field):
        ikiwa sio field:
            self.fcn_list = 0
            rudisha self
        ikiwa len(field) == 1 na isinstance(field[0], int):
            # Be compatible ukijumuisha old profiler
            field = [ {-1: "stdname",
                       0:  "calls",
                       1:  "time",
                       2:  "cumulative"}[field[0]] ]
        lasivyo len(field) >= 2:
            kila arg kwenye field[1:]:
                ikiwa type(arg) != type(field[0]):
                    ashiria TypeError("Can't have mixed argument type")

        sort_arg_defs = self.get_sort_arg_defs()

        sort_tuple = ()
        self.sort_type = ""
        connector = ""
        kila word kwenye field:
            ikiwa isinstance(word, SortKey):
                word = word.value
            sort_tuple = sort_tuple + sort_arg_defs[word][0]
            self.sort_type += connector + sort_arg_defs[word][1]
            connector = ", "

        stats_list = []
        kila func, (cc, nc, tt, ct, callers) kwenye self.stats.items():
            stats_list.append((cc, nc, tt, ct) + func +
                              (func_std_string(func), func))

        stats_list.sort(key=cmp_to_key(TupleComp(sort_tuple).compare))

        self.fcn_list = fcn_list = []
        kila tuple kwenye stats_list:
            fcn_list.append(tuple[-1])
        rudisha self

    eleza reverse_order(self):
        ikiwa self.fcn_list:
            self.fcn_list.reverse()
        rudisha self

    eleza strip_dirs(self):
        oldstats = self.stats
        self.stats = newstats = {}
        max_name_len = 0
        kila func, (cc, nc, tt, ct, callers) kwenye oldstats.items():
            newfunc = func_strip_path(func)
            ikiwa len(func_std_string(newfunc)) > max_name_len:
                max_name_len = len(func_std_string(newfunc))
            newcallers = {}
            kila func2, caller kwenye callers.items():
                newcallers[func_strip_path(func2)] = caller

            ikiwa newfunc kwenye newstats:
                newstats[newfunc] = add_func_stats(
                                        newstats[newfunc],
                                        (cc, nc, tt, ct, newcallers))
            isipokua:
                newstats[newfunc] = (cc, nc, tt, ct, newcallers)
        old_top = self.top_level
        self.top_level = new_top = set()
        kila func kwenye old_top:
            new_top.add(func_strip_path(func))

        self.max_name_len = max_name_len

        self.fcn_list = Tupu
        self.all_callees = Tupu
        rudisha self

    eleza calc_callees(self):
        ikiwa self.all_callees:
            rudisha
        self.all_callees = all_callees = {}
        kila func, (cc, nc, tt, ct, callers) kwenye self.stats.items():
            ikiwa sio func kwenye all_callees:
                all_callees[func] = {}
            kila func2, caller kwenye callers.items():
                ikiwa sio func2 kwenye all_callees:
                    all_callees[func2] = {}
                all_callees[func2][func]  = caller
        rudisha

    #******************************************************************
    # The following functions support actual printing of reports
    #******************************************************************

    # Optional "amount" ni either a line count, ama a percentage of lines.

    eleza eval_print_amount(self, sel, list, msg):
        new_list = list
        ikiwa isinstance(sel, str):
            jaribu:
                rex = re.compile(sel)
            tatizo re.error:
                msg += "   <Invalid regular expression %r>\n" % sel
                rudisha new_list, msg
            new_list = []
            kila func kwenye list:
                ikiwa rex.search(func_std_string(func)):
                    new_list.append(func)
        isipokua:
            count = len(list)
            ikiwa isinstance(sel, float) na 0.0 <= sel < 1.0:
                count = int(count * sel + .5)
                new_list = list[:count]
            lasivyo isinstance(sel, int) na 0 <= sel < count:
                count = sel
                new_list = list[:count]
        ikiwa len(list) != len(new_list):
            msg += "   List reduced kutoka %r to %r due to restriction <%r>\n" % (
                len(list), len(new_list), sel)

        rudisha new_list, msg

    eleza get_print_list(self, sel_list):
        width = self.max_name_len
        ikiwa self.fcn_list:
            stat_list = self.fcn_list[:]
            msg = "   Ordered by: " + self.sort_type + '\n'
        isipokua:
            stat_list = list(self.stats.keys())
            msg = "   Random listing order was used\n"

        kila selection kwenye sel_list:
            stat_list, msg = self.eval_print_amount(selection, stat_list, msg)

        count = len(stat_list)

        ikiwa sio stat_list:
            rudisha 0, stat_list
        andika(msg, file=self.stream)
        ikiwa count < len(self.stats):
            width = 0
            kila func kwenye stat_list:
                ikiwa  len(func_std_string(func)) > width:
                    width = len(func_std_string(func))
        rudisha width+2, stat_list

    eleza print_stats(self, *amount):
        kila filename kwenye self.files:
            andika(filename, file=self.stream)
        ikiwa self.files:
            andika(file=self.stream)
        indent = ' ' * 8
        kila func kwenye self.top_level:
            andika(indent, func_get_function_name(func), file=self.stream)

        andika(indent, self.total_calls, "function calls", end=' ', file=self.stream)
        ikiwa self.total_calls != self.prim_calls:
            andika("(%d primitive calls)" % self.prim_calls, end=' ', file=self.stream)
        andika("in %.3f seconds" % self.total_tt, file=self.stream)
        andika(file=self.stream)
        width, list = self.get_print_list(amount)
        ikiwa list:
            self.print_title()
            kila func kwenye list:
                self.print_line(func)
            andika(file=self.stream)
            andika(file=self.stream)
        rudisha self

    eleza print_callees(self, *amount):
        width, list = self.get_print_list(amount)
        ikiwa list:
            self.calc_callees()

            self.print_call_heading(width, "called...")
            kila func kwenye list:
                ikiwa func kwenye self.all_callees:
                    self.print_call_line(width, func, self.all_callees[func])
                isipokua:
                    self.print_call_line(width, func, {})
            andika(file=self.stream)
            andika(file=self.stream)
        rudisha self

    eleza print_callers(self, *amount):
        width, list = self.get_print_list(amount)
        ikiwa list:
            self.print_call_heading(width, "was called by...")
            kila func kwenye list:
                cc, nc, tt, ct, callers = self.stats[func]
                self.print_call_line(width, func, callers, "<-")
            andika(file=self.stream)
            andika(file=self.stream)
        rudisha self

    eleza print_call_heading(self, name_size, column_title):
        andika("Function ".ljust(name_size) + column_title, file=self.stream)
        # print sub-header only ikiwa we have new-style callers
        subheader = Uongo
        kila cc, nc, tt, ct, callers kwenye self.stats.values():
            ikiwa callers:
                value = next(iter(callers.values()))
                subheader = isinstance(value, tuple)
                koma
        ikiwa subheader:
            andika(" "*name_size + "    ncalls  tottime  cumtime", file=self.stream)

    eleza print_call_line(self, name_size, source, call_dict, arrow="->"):
        andika(func_std_string(source).ljust(name_size) + arrow, end=' ', file=self.stream)
        ikiwa sio call_dict:
            andika(file=self.stream)
            rudisha
        clist = sorted(call_dict.keys())
        indent = ""
        kila func kwenye clist:
            name = func_std_string(func)
            value = call_dict[func]
            ikiwa isinstance(value, tuple):
                nc, cc, tt, ct = value
                ikiwa nc != cc:
                    substats = '%d/%d' % (nc, cc)
                isipokua:
                    substats = '%d' % (nc,)
                substats = '%s %s %s  %s' % (substats.rjust(7+2*len(indent)),
                                             f8(tt), f8(ct), name)
                left_width = name_size + 1
            isipokua:
                substats = '%s(%r) %s' % (name, value, f8(self.stats[func][3]))
                left_width = name_size + 3
            andika(indent*left_width + substats, file=self.stream)
            indent = " "

    eleza print_title(self):
        andika('   ncalls  tottime  percall  cumtime  percall', end=' ', file=self.stream)
        andika('filename:lineno(function)', file=self.stream)

    eleza print_line(self, func):  # hack: should print percentages
        cc, nc, tt, ct, callers = self.stats[func]
        c = str(nc)
        ikiwa nc != cc:
            c = c + '/' + str(cc)
        andika(c.rjust(9), end=' ', file=self.stream)
        andika(f8(tt), end=' ', file=self.stream)
        ikiwa nc == 0:
            andika(' '*8, end=' ', file=self.stream)
        isipokua:
            andika(f8(tt/nc), end=' ', file=self.stream)
        andika(f8(ct), end=' ', file=self.stream)
        ikiwa cc == 0:
            andika(' '*8, end=' ', file=self.stream)
        isipokua:
            andika(f8(ct/cc), end=' ', file=self.stream)
        andika(func_std_string(func), file=self.stream)

kundi TupleComp:
    """This kundi provides a generic function kila comparing any two tuples.
    Each instance records a list of tuple-indices (kutoka most significant
    to least significant), na sort direction (ascending ama decending) for
    each tuple-index.  The compare functions can then be used kama the function
    argument to the system sort() function when a list of tuples need to be
    sorted kwenye the instances order."""

    eleza __init__(self, comp_select_list):
        self.comp_select_list = comp_select_list

    eleza compare (self, left, right):
        kila index, direction kwenye self.comp_select_list:
            l = left[index]
            r = right[index]
            ikiwa l < r:
                rudisha -direction
            ikiwa l > r:
                rudisha direction
        rudisha 0


#**************************************************************************
# func_name ni a triple (file:string, line:int, name:string)

eleza func_strip_path(func_name):
    filename, line, name = func_name
    rudisha os.path.basename(filename), line, name

eleza func_get_function_name(func):
    rudisha func[2]

eleza func_std_string(func_name): # match what old profile produced
    ikiwa func_name[:2] == ('~', 0):
        # special case kila built-in functions
        name = func_name[2]
        ikiwa name.startswith('<') na name.endswith('>'):
            rudisha '{%s}' % name[1:-1]
        isipokua:
            rudisha name
    isipokua:
        rudisha "%s:%d(%s)" % func_name

#**************************************************************************
# The following functions combine statistics kila pairs functions.
# The bulk of the processing involves correctly handling "call" lists,
# such kama callers na callees.
#**************************************************************************

eleza add_func_stats(target, source):
    """Add together all the stats kila two profile entries."""
    cc, nc, tt, ct, callers = source
    t_cc, t_nc, t_tt, t_ct, t_callers = target
    rudisha (cc+t_cc, nc+t_nc, tt+t_tt, ct+t_ct,
              add_callers(t_callers, callers))

eleza add_callers(target, source):
    """Combine two caller lists kwenye a single list."""
    new_callers = {}
    kila func, caller kwenye target.items():
        new_callers[func] = caller
    kila func, caller kwenye source.items():
        ikiwa func kwenye new_callers:
            ikiwa isinstance(caller, tuple):
                # format used by cProfile
                new_callers[func] = tuple(i + j kila i, j kwenye zip(caller, new_callers[func]))
            isipokua:
                # format used by profile
                new_callers[func] += caller
        isipokua:
            new_callers[func] = caller
    rudisha new_callers

eleza count_calls(callers):
    """Sum the caller statistics to get total number of calls received."""
    nc = 0
    kila calls kwenye callers.values():
        nc += calls
    rudisha nc

#**************************************************************************
# The following functions support printing of reports
#**************************************************************************

eleza f8(x):
    rudisha "%8.3f" % x

#**************************************************************************
# Statistics browser added by ESR, April 2001
#**************************************************************************

ikiwa __name__ == '__main__':
    agiza cmd
    jaribu:
        agiza readline
    tatizo ImportError:
        pita

    kundi ProfileBrowser(cmd.Cmd):
        eleza __init__(self, profile=Tupu):
            cmd.Cmd.__init__(self)
            self.prompt = "% "
            self.stats = Tupu
            self.stream = sys.stdout
            ikiwa profile ni sio Tupu:
                self.do_read(profile)

        eleza generic(self, fn, line):
            args = line.split()
            processed = []
            kila term kwenye args:
                jaribu:
                    processed.append(int(term))
                    endelea
                tatizo ValueError:
                    pita
                jaribu:
                    frac = float(term)
                    ikiwa frac > 1 ama frac < 0:
                        andika("Fraction argument must be kwenye [0, 1]", file=self.stream)
                        endelea
                    processed.append(frac)
                    endelea
                tatizo ValueError:
                    pita
                processed.append(term)
            ikiwa self.stats:
                getattr(self.stats, fn)(*processed)
            isipokua:
                andika("No statistics object ni loaded.", file=self.stream)
            rudisha 0
        eleza generic_help(self):
            andika("Arguments may be:", file=self.stream)
            andika("* An integer maximum number of entries to print.", file=self.stream)
            andika("* A decimal fractional number between 0 na 1, controlling", file=self.stream)
            andika("  what fraction of selected entries to print.", file=self.stream)
            andika("* A regular expression; only entries ukijumuisha function names", file=self.stream)
            andika("  that match it are printed.", file=self.stream)

        eleza do_add(self, line):
            ikiwa self.stats:
                jaribu:
                    self.stats.add(line)
                tatizo OSError kama e:
                    andika("Failed to load statistics kila %s: %s" % (line, e), file=self.stream)
            isipokua:
                andika("No statistics object ni loaded.", file=self.stream)
            rudisha 0
        eleza help_add(self):
            andika("Add profile info kutoka given file to current statistics object.", file=self.stream)

        eleza do_callees(self, line):
            rudisha self.generic('print_callees', line)
        eleza help_callees(self):
            andika("Print callees statistics kutoka the current stat object.", file=self.stream)
            self.generic_help()

        eleza do_callers(self, line):
            rudisha self.generic('print_callers', line)
        eleza help_callers(self):
            andika("Print callers statistics kutoka the current stat object.", file=self.stream)
            self.generic_help()

        eleza do_EOF(self, line):
            andika("", file=self.stream)
            rudisha 1
        eleza help_EOF(self):
            andika("Leave the profile browser.", file=self.stream)

        eleza do_quit(self, line):
            rudisha 1
        eleza help_quit(self):
            andika("Leave the profile browser.", file=self.stream)

        eleza do_read(self, line):
            ikiwa line:
                jaribu:
                    self.stats = Stats(line)
                tatizo OSError kama err:
                    andika(err.args[1], file=self.stream)
                    rudisha
                tatizo Exception kama err:
                    andika(err.__class__.__name__ + ':', err, file=self.stream)
                    rudisha
                self.prompt = line + "% "
            lasivyo len(self.prompt) > 2:
                line = self.prompt[:-2]
                self.do_read(line)
            isipokua:
                andika("No statistics object ni current -- cannot reload.", file=self.stream)
            rudisha 0
        eleza help_read(self):
            andika("Read kwenye profile data kutoka a specified file.", file=self.stream)
            andika("Without argument, reload the current file.", file=self.stream)

        eleza do_reverse(self, line):
            ikiwa self.stats:
                self.stats.reverse_order()
            isipokua:
                andika("No statistics object ni loaded.", file=self.stream)
            rudisha 0
        eleza help_reverse(self):
            andika("Reverse the sort order of the profiling report.", file=self.stream)

        eleza do_sort(self, line):
            ikiwa sio self.stats:
                andika("No statistics object ni loaded.", file=self.stream)
                rudisha
            abbrevs = self.stats.get_sort_arg_defs()
            ikiwa line na all((x kwenye abbrevs) kila x kwenye line.split()):
                self.stats.sort_stats(*line.split())
            isipokua:
                andika("Valid sort keys (unique prefixes are accepted):", file=self.stream)
                kila (key, value) kwenye Stats.sort_arg_dict_default.items():
                    andika("%s -- %s" % (key, value[1]), file=self.stream)
            rudisha 0
        eleza help_sort(self):
            andika("Sort profile data according to specified keys.", file=self.stream)
            andika("(Typing `sort' without arguments lists valid keys.)", file=self.stream)
        eleza complete_sort(self, text, *args):
            rudisha [a kila a kwenye Stats.sort_arg_dict_default ikiwa a.startswith(text)]

        eleza do_stats(self, line):
            rudisha self.generic('print_stats', line)
        eleza help_stats(self):
            andika("Print statistics kutoka the current stat object.", file=self.stream)
            self.generic_help()

        eleza do_strip(self, line):
            ikiwa self.stats:
                self.stats.strip_dirs()
            isipokua:
                andika("No statistics object ni loaded.", file=self.stream)
        eleza help_strip(self):
            andika("Strip leading path information kutoka filenames kwenye the report.", file=self.stream)

        eleza help_help(self):
            andika("Show help kila a given command.", file=self.stream)

        eleza postcmd(self, stop, line):
            ikiwa stop:
                rudisha stop
            rudisha Tupu

    ikiwa len(sys.argv) > 1:
        initprofile = sys.argv[1]
    isipokua:
        initprofile = Tupu
    jaribu:
        browser = ProfileBrowser(initprofile)
        kila profile kwenye sys.argv[2:]:
            browser.do_add(profile)
        andika("Welcome to the profile statistics browser.", file=browser.stream)
        browser.cmdloop()
        andika("Goodbye.", file=browser.stream)
    tatizo KeyboardInterrupt:
        pita

# That's all, folks.
