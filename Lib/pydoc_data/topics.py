# -*- coding: utf-8 -*-
# Autogenerated by Sphinx on Mon Oct 14 14:33:10 2019
topics = {'assert': 'The "assert" statement\n'
           '**********************\n'
           '\n'
           'Assert statements are a convenient way to insert debugging '
           'assertions\n'
           'into a program:\n'
           '\n'
           '   assert_stmt ::= "assert" expression ["," expression]\n'
           '\n'
           'The simple form, "assert expression", ni equivalent to\n'
           '\n'
           '   ikiwa __debug__:\n'
           '       ikiwa sio expression: ashiria AssertionError\n'
           '\n'
           'The extended form, "assert expression1, expression2", ni '
           'equivalent to\n'
           '\n'
           '   ikiwa __debug__:\n'
           '       ikiwa sio expression1: ashiria AssertionError(expression2)\n'
           '\n'
           'These equivalences assume that "__debug__" na "AssertionError" '
           'refer\n'
           'to the built-in variables ukijumuisha those names.  In the current\n'
           'implementation, the built-in variable "__debug__" ni "Kweli" under\n'
           'normal circumstances, "Uongo" when optimization ni requested '
           '(command\n'
           'line option "-O").  The current code generator emits no code kila '
           'an\n'
           'assert statement when optimization ni requested at compile time.  '
           'Note\n'
           'that it ni unnecessary to include the source code kila the '
           'expression\n'
           'that failed kwenye the error message; it will be displayed kama part of '
           'the\n'
           'stack trace.\n'
           '\n'
           'Assignments to "__debug__" are illegal.  The value kila the '
           'built-in\n'
           'variable ni determined when the interpreter starts.\n',
 'assignment': 'Assignment statements\n'
               '*********************\n'
               '\n'
               'Assignment statements are used to (re)bind names to values na '
               'to\n'
               'modify attributes ama items of mutable objects:\n'
               '\n'
               '   assignment_stmt ::= (target_list "=")+ (starred_expression '
               '| tuma_expression)\n'
               '   target_list     ::= target ("," target)* [","]\n'
               '   target          ::= identifier\n'
               '              | "(" [target_list] ")"\n'
               '              | "[" [target_list] "]"\n'
               '              | attributeref\n'
               '              | subscription\n'
               '              | slicing\n'
               '              | "*" target\n'
               '\n'
               '(See section Primaries kila the syntax definitions kila '
               '*attributeref*,\n'
               '*subscription*, na *slicing*.)\n'
               '\n'
               'An assignment statement evaluates the expression list '
               '(remember that\n'
               'this can be a single expression ama a comma-separated list, the '
               'latter\n'
               'tumaing a tuple) na assigns the single resulting object to '
               'each of\n'
               'the target lists, kutoka left to right.\n'
               '\n'
               'Assignment ni defined recursively depending on the form of the '
               'target\n'
               '(list). When a target ni part of a mutable object (an '
               'attribute\n'
               'reference, subscription ama slicing), the mutable object must\n'
               'ultimately perform the assignment na decide about its '
               'validity, and\n'
               'may ashiria an exception ikiwa the assignment ni unacceptable.  The '
               'rules\n'
               'observed by various types na the exceptions raised are given '
               'ukijumuisha the\n'
               'definition of the object types (see section The standard type\n'
               'hierarchy).\n'
               '\n'
               'Assignment of an object to a target list, optionally enclosed '
               'in\n'
               'parentheses ama square brackets, ni recursively defined kama '
               'follows.\n'
               '\n'
               '* If the target list ni a single target ukijumuisha no trailing '
               'comma,\n'
               '  optionally kwenye parentheses, the object ni assigned to that '
               'target.\n'
               '\n'
               '* Else: The object must be an iterable ukijumuisha the same number of '
               'items\n'
               '  kama there are targets kwenye the target list, na the items are '
               'assigned,\n'
               '  kutoka left to right, to the corresponding targets.\n'
               '\n'
               '  * If the target list contains one target prefixed ukijumuisha an\n'
               '    asterisk, called a “starred” target: The object must be '
               'an\n'
               '    iterable ukijumuisha at least kama many items kama there are targets '
               'in the\n'
               '    target list, minus one.  The first items of the iterable '
               'are\n'
               '    assigned, kutoka left to right, to the targets before the '
               'starred\n'
               '    target.  The final items of the iterable are assigned to '
               'the\n'
               '    targets after the starred target.  A list of the remaining '
               'items\n'
               '    kwenye the iterable ni then assigned to the starred target '
               '(the list\n'
               '    can be empty).\n'
               '\n'
               '  * Else: The object must be an iterable ukijumuisha the same number '
               'of\n'
               '    items kama there are targets kwenye the target list, na the '
               'items are\n'
               '    assigned, kutoka left to right, to the corresponding '
               'targets.\n'
               '\n'
               'Assignment of an object to a single target ni recursively '
               'defined as\n'
               'follows.\n'
               '\n'
               '* If the target ni an identifier (name):\n'
               '\n'
               '  * If the name does sio occur kwenye a "global" ama "nonlocal" '
               'statement\n'
               '    kwenye the current code block: the name ni bound to the object '
               'in the\n'
               '    current local namespace.\n'
               '\n'
               '  * Otherwise: the name ni bound to the object kwenye the global\n'
               '    namespace ama the outer namespace determined by '
               '"nonlocal",\n'
               '    respectively.\n'
               '\n'
               '  The name ni rebound ikiwa it was already bound.  This may cause '
               'the\n'
               '  reference count kila the object previously bound to the name '
               'to reach\n'
               '  zero, causing the object to be deallocated na its '
               'destructor (ikiwa it\n'
               '  has one) to be called.\n'
               '\n'
               '* If the target ni an attribute reference: The primary '
               'expression in\n'
               '  the reference ni evaluated.  It should tuma an object with\n'
               '  assignable attributes; ikiwa this ni sio the case, "TypeError" '
               'is\n'
               '  raised.  That object ni then asked to assign the assigned '
               'object to\n'
               '  the given attribute; ikiwa it cansio perform the assignment, it '
               'raises\n'
               '  an exception (usually but sio necessarily '
               '"AttributeError").\n'
               '\n'
               '  Note: If the object ni a kundi instance na the attribute '
               'reference\n'
               '  occurs on both sides of the assignment operator, the '
               'right-hand side\n'
               '  expression, "a.x" can access either an instance attribute ama '
               '(ikiwa no\n'
               '  instance attribute exists) a kundi attribute.  The left-hand '
               'side\n'
               '  target "a.x" ni always set kama an instance attribute, '
               'creating it if\n'
               '  necessary.  Thus, the two occurrences of "a.x" do sio '
               'necessarily\n'
               '  refer to the same attribute: ikiwa the right-hand side '
               'expression\n'
               '  refers to a kundi attribute, the left-hand side creates a '
               'new\n'
               '  instance attribute kama the target of the assignment:\n'
               '\n'
               '     kundi Cls:\n'
               '         x = 3             # kundi variable\n'
               '     inst = Cls()\n'
               '     inst.x = inst.x + 1   # writes inst.x kama 4 leaving Cls.x '
               'as 3\n'
               '\n'
               '  This description does sio necessarily apply to descriptor\n'
               '  attributes, such kama properties created ukijumuisha "property()".\n'
               '\n'
               '* If the target ni a subscription: The primary expression kwenye '
               'the\n'
               '  reference ni evaluated.  It should tuma either a mutable '
               'sequence\n'
               '  object (such kama a list) ama a mapping object (such kama a '
               'dictionary).\n'
               '  Next, the subscript expression ni evaluated.\n'
               '\n'
               '  If the primary ni a mutable sequence object (such kama a '
               'list), the\n'
               '  subscript must tuma an integer.  If it ni negative, the '
               'sequence’s\n'
               '  length ni added to it.  The resulting value must be a '
               'nonnegative\n'
               '  integer less than the sequence’s length, na the sequence ni '
               'asked\n'
               '  to assign the assigned object to its item ukijumuisha that index.  '
               'If the\n'
               '  index ni out of range, "IndexError" ni raised (assignment to '
               'a\n'
               '  subscripted sequence cansio add new items to a list).\n'
               '\n'
               '  If the primary ni a mapping object (such kama a dictionary), '
               'the\n'
               '  subscript must have a type compatible ukijumuisha the mapping’s key '
               'type,\n'
               '  na the mapping ni then asked to create a key/datum pair '
               'which maps\n'
               '  the subscript to the assigned object.  This can either '
               'replace an\n'
               '  existing key/value pair ukijumuisha the same key value, ama insert a '
               'new\n'
               '  key/value pair (ikiwa no key ukijumuisha the same value existed).\n'
               '\n'
               '  For user-defined objects, the "__setitem__()" method ni '
               'called with\n'
               '  appropriate arguments.\n'
               '\n'
               '* If the target ni a slicing: The primary expression kwenye the\n'
               '  reference ni evaluated.  It should tuma a mutable sequence '
               'object\n'
               '  (such kama a list).  The assigned object should be a sequence '
               'object\n'
               '  of the same type.  Next, the lower na upper bound '
               'expressions are\n'
               '  evaluated, insofar they are present; defaults are zero na '
               'the\n'
               '  sequence’s length.  The bounds should evaluate to integers. '
               'If\n'
               '  either bound ni negative, the sequence’s length ni added to '
               'it.  The\n'
               '  resulting bounds are clipped to lie between zero na the '
               'sequence’s\n'
               '  length, inclusive.  Finally, the sequence object ni asked to '
               'replace\n'
               '  the slice ukijumuisha the items of the assigned sequence.  The '
               'length of\n'
               '  the slice may be different kutoka the length of the assigned '
               'sequence,\n'
               '  thus changing the length of the target sequence, ikiwa the '
               'target\n'
               '  sequence allows it.\n'
               '\n'
               '**CPython implementation detail:** In the current '
               'implementation, the\n'
               'syntax kila targets ni taken to be the same kama kila expressions, '
               'and\n'
               'invalid syntax ni rejected during the code generation phase, '
               'causing\n'
               'less detailed error messages.\n'
               '\n'
               'Although the definition of assignment implies that overlaps '
               'between\n'
               'the left-hand side na the right-hand side are ‘simultaneous’ '
               '(for\n'
               'example "a, b = b, a" swaps two variables), overlaps *within* '
               'the\n'
               'collection of assigned-to variables occur left-to-right, '
               'sometimes\n'
               'resulting kwenye confusion.  For instance, the following program '
               'prints\n'
               '"[0, 2]":\n'
               '\n'
               '   x = [0, 1]\n'
               '   i = 0\n'
               '   i, x[i] = 1, 2         # i ni updated, then x[i] ni '
               'updated\n'
               '   andika(x)\n'
               '\n'
               'See also:\n'
               '\n'
               '  **PEP 3132** - Extended Iterable Unpacking\n'
               '     The specification kila the "*target" feature.\n'
               '\n'
               '\n'
               'Augmented assignment statements\n'
               '===============================\n'
               '\n'
               'Augmented assignment ni the combination, kwenye a single '
               'statement, of a\n'
               'binary operation na an assignment statement:\n'
               '\n'
               '   augmented_assignment_stmt ::= augtarget augop '
               '(expression_list | tuma_expression)\n'
               '   augtarget                 ::= identifier | attributeref | '
               'subscription | slicing\n'
               '   augop                     ::= "+=" | "-=" | "*=" | "@=" | '
               '"/=" | "//=" | "%=" | "**="\n'
               '             | ">>=" | "<<=" | "&=" | "^=" | "|="\n'
               '\n'
               '(See section Primaries kila the syntax definitions of the last '
               'three\n'
               'symbols.)\n'
               '\n'
               'An augmented assignment evaluates the target (which, unlike '
               'normal\n'
               'assignment statements, cansio be an unpacking) na the '
               'expression\n'
               'list, performs the binary operation specific to the type of '
               'assignment\n'
               'on the two operands, na assigns the result to the original '
               'target.\n'
               'The target ni only evaluated once.\n'
               '\n'
               'An augmented assignment expression like "x += 1" can be '
               'rewritten as\n'
               '"x = x + 1" to achieve a similar, but sio exactly equal '
               'effect. In the\n'
               'augmented version, "x" ni only evaluated once. Also, when '
               'possible,\n'
               'the actual operation ni performed *in-place*, meaning that '
               'rather than\n'
               'creating a new object na assigning that to the target, the '
               'old object\n'
               'is modified instead.\n'
               '\n'
               'Unlike normal assignments, augmented assignments evaluate the '
               'left-\n'
               'hand side *before* evaluating the right-hand side.  For '
               'example, "a[i]\n'
               '+= f(x)" first looks-up "a[i]", then it evaluates "f(x)" na '
               'performs\n'
               'the addition, na lastly, it writes the result back to '
               '"a[i]".\n'
               '\n'
               'With the exception of assigning to tuples na multiple targets '
               'in a\n'
               'single statement, the assignment done by augmented assignment\n'
               'statements ni handled the same way kama normal assignments. '
               'Similarly,\n'
               'ukijumuisha the exception of the possible *in-place* behavior, the '
               'binary\n'
               'operation performed by augmented assignment ni the same kama the '
               'normal\n'
               'binary operations.\n'
               '\n'
               'For targets which are attribute references, the same caveat '
               'about\n'
               'kundi na instance attributes applies kama kila regular '
               'assignments.\n'
               '\n'
               '\n'
               'Annotated assignment statements\n'
               '===============================\n'
               '\n'
               '*Annotation* assignment ni the combination, kwenye a single '
               'statement, of\n'
               'a variable ama attribute annotation na an optional assignment\n'
               'statement:\n'
               '\n'
               '   annotated_assignment_stmt ::= augtarget ":" expression\n'
               '                                 ["=" (starred_expression | '
               'tuma_expression)]\n'
               '\n'
               'The difference kutoka normal Assignment statements ni that only '
               'single\n'
               'target ni allowed.\n'
               '\n'
               'For simple names kama assignment targets, ikiwa kwenye kundi ama module '
               'scope,\n'
               'the annotations are evaluated na stored kwenye a special kundi ama '
               'module\n'
               'attribute "__annotations__" that ni a dictionary mapping kutoka '
               'variable\n'
               'names (mangled ikiwa private) to evaluated annotations. This '
               'attribute is\n'
               'writable na ni automatically created at the start of kundi ama '
               'module\n'
               'body execution, ikiwa annotations are found statically.\n'
               '\n'
               'For expressions kama assignment targets, the annotations are '
               'evaluated\n'
               'ikiwa kwenye kundi ama module scope, but sio stored.\n'
               '\n'
               'If a name ni annotated kwenye a function scope, then this name ni '
               'local\n'
               'kila that scope. Annotations are never evaluated na stored kwenye '
               'function\n'
               'scopes.\n'
               '\n'
               'If the right hand side ni present, an annotated assignment '
               'performs\n'
               'the actual assignment before evaluating annotations (where\n'
               'applicable). If the right hand side ni sio present kila an '
               'expression\n'
               'target, then the interpreter evaluates the target tatizo kila '
               'the last\n'
               '"__setitem__()" ama "__setattr__()" call.\n'
               '\n'
               'See also:\n'
               '\n'
               '  **PEP 526** - Syntax kila Variable Annotations\n'
               '     The proposal that added syntax kila annotating the types '
               'of\n'
               '     variables (including kundi variables na instance '
               'variables),\n'
               '     instead of expressing them through comments.\n'
               '\n'
               '  **PEP 484** - Type hints\n'
               '     The proposal that added the "typing" module to provide a '
               'standard\n'
               '     syntax kila type annotations that can be used kwenye static '
               'analysis\n'
               '     tools na IDEs.\n'
               '\n'
               'Changed kwenye version 3.8: Now annotated assignments allow same\n'
               'expressions kwenye the right hand side kama the regular '
               'assignments.\n'
               'Previously, some expressions (like un-parenthesized tuple '
               'expressions)\n'
               'caused a syntax error.\n',
 'async': 'Coroutines\n'
          '**********\n'
          '\n'
          'New kwenye version 3.5.\n'
          '\n'
          '\n'
          'Coroutine function definition\n'
          '=============================\n'
          '\n'
          '   async_funceleza ::= [decorators] "async" "def" funcname "(" '
          '[parameter_list] ")"\n'
          '                     ["->" expression] ":" suite\n'
          '\n'
          'Execution of Python coroutines can be suspended na resumed at '
          'many\n'
          'points (see *coroutine*).  Inside the body of a coroutine '
          'function,\n'
          '"await" na "async" identifiers become reserved keywords; "await"\n'
          'expressions, "async for" na "async with" can only be used in\n'
          'coroutine function bodies.\n'
          '\n'
          'Functions defined ukijumuisha "async def" syntax are always coroutine\n'
          'functions, even ikiwa they do sio contain "await" ama "async" '
          'keywords.\n'
          '\n'
          'It ni a "SyntaxError" to use a "tuma from" expression inside the '
          'body\n'
          'of a coroutine function.\n'
          '\n'
          'An example of a coroutine function:\n'
          '\n'
          '   async eleza func(param1, param2):\n'
          '       do_stuff()\n'
          '       await some_coroutine()\n'
          '\n'
          '\n'
          'The "async for" statement\n'
          '=========================\n'
          '\n'
          '   async_for_stmt ::= "async" for_stmt\n'
          '\n'
          'An *asynchronous iterable* ni able to call asynchronous code kwenye '
          'its\n'
          '*iter* implementation, na *asynchronous iterator* can call\n'
          'asynchronous code kwenye its *next* method.\n'
          '\n'
          'The "async for" statement allows convenient iteration over\n'
          'asynchronous iterators.\n'
          '\n'
          'The following code:\n'
          '\n'
          '   async kila TARGET kwenye ITER:\n'
          '       BLOCK\n'
          '   isipokua:\n'
          '       BLOCK2\n'
          '\n'
          'Is semantically equivalent to:\n'
          '\n'
          '   iter = (ITER)\n'
          '   iter = type(iter).__aiter__(iter)\n'
          '   running = Kweli\n'
          '   wakati running:\n'
          '       jaribu:\n'
          '           TARGET = await type(iter).__anext__(iter)\n'
          '       tatizo StopAsyncIteration:\n'
          '           running = Uongo\n'
          '       isipokua:\n'
          '           BLOCK\n'
          '   isipokua:\n'
          '       BLOCK2\n'
          '\n'
          'See also "__aiter__()" na "__anext__()" kila details.\n'
          '\n'
          'It ni a "SyntaxError" to use an "async for" statement outside the '
          'body\n'
          'of a coroutine function.\n'
          '\n'
          '\n'
          'The "async with" statement\n'
          '==========================\n'
          '\n'
          '   async_with_stmt ::= "async" with_stmt\n'
          '\n'
          'An *asynchronous context manager* ni a *context manager* that ni '
          'able\n'
          'to suspend execution kwenye its *enter* na *exit* methods.\n'
          '\n'
          'The following code:\n'
          '\n'
          '   async ukijumuisha EXPR kama VAR:\n'
          '       BLOCK\n'
          '\n'
          'Is semantically equivalent to:\n'
          '\n'
          '   mgr = (EXPR)\n'
          '   aexit = type(mgr).__aexit__\n'
          '   aenter = type(mgr).__aenter__(mgr)\n'
          '\n'
          '   VAR = await aenter\n'
          '   jaribu:\n'
          '       BLOCK\n'
          '   tatizo:\n'
          '       ikiwa sio await aexit(mgr, *sys.exc_info()):\n'
          '           raise\n'
          '   isipokua:\n'
          '       await aexit(mgr, Tupu, Tupu, Tupu)\n'
          '\n'
          'See also "__aenter__()" na "__aexit__()" kila details.\n'
          '\n'
          'It ni a "SyntaxError" to use an "async with" statement outside the\n'
          'body of a coroutine function.\n'
          '\n'
          'See also:\n'
          '\n'
          '  **PEP 492** - Coroutines ukijumuisha async na await syntax\n'
          '     The proposal that made coroutines a proper standalone concept '
          'in\n'
          '     Python, na added supporting syntax.\n'
          '\n'
          '-[ Footnotes ]-\n'
          '\n'
          '[1] The exception ni propagated to the invocation stack unless\n'
          '    there ni a "finally" clause which happens to ashiria another\n'
          '    exception. That new exception causes the old one to be lost.\n'
          '\n'
          '[2] A string literal appearing kama the first statement kwenye the\n'
          '    function body ni transformed into the function’s "__doc__"\n'
          '    attribute na therefore the function’s *docstring*.\n'
          '\n'
          '[3] A string literal appearing kama the first statement kwenye the class\n'
          '    body ni transformed into the namespace’s "__doc__" item and\n'
          '    therefore the class’s *docstring*.\n',
 'atom-identifiers': 'Identifiers (Names)\n'
                     '*******************\n'
                     '\n'
                     'An identifier occurring kama an atom ni a name.  See '
                     'section Identifiers\n'
                     'and keywords kila lexical definition na section Naming '
                     'and binding for\n'
                     'documentation of naming na binding.\n'
                     '\n'
                     'When the name ni bound to an object, evaluation of the '
                     'atom tumas\n'
                     'that object. When a name ni sio bound, an attempt to '
                     'evaluate it\n'
                     'raises a "NameError" exception.\n'
                     '\n'
                     '**Private name mangling:** When an identifier that '
                     'textually occurs in\n'
                     'a kundi definition begins ukijumuisha two ama more underscore '
                     'characters and\n'
                     'does sio end kwenye two ama more underscores, it ni '
                     'considered a *private\n'
                     'name* of that class. Private names are transformed to a '
                     'longer form\n'
                     'before code ni generated kila them.  The transformation '
                     'inserts the\n'
                     'kundi name, ukijumuisha leading underscores removed na a '
                     'single underscore\n'
                     'inserted, kwenye front of the name.  For example, the '
                     'identifier "__spam"\n'
                     'occurring kwenye a kundi named "Ham" will be transformed to '
                     '"_Ham__spam".\n'
                     'This transformation ni independent of the syntactical '
                     'context kwenye which\n'
                     'the identifier ni used.  If the transformed name ni '
                     'extremely long\n'
                     '(longer than 255 characters), implementation defined '
                     'truncation may\n'
                     'happen. If the kundi name consists only of underscores, '
                     'no\n'
                     'transformation ni done.\n',
 'atom-literals': 'Literals\n'
                  '********\n'
                  '\n'
                  'Python supports string na bytes literals na various '
                  'numeric\n'
                  'literals:\n'
                  '\n'
                  '   literal ::= stringliteral | bytesliteral\n'
                  '               | integer | floatnumber | imagnumber\n'
                  '\n'
                  'Evaluation of a literal tumas an object of the given type '
                  '(string,\n'
                  'bytes, integer, floating point number, complex number) ukijumuisha '
                  'the given\n'
                  'value.  The value may be approximated kwenye the case of '
                  'floating point\n'
                  'and imaginary (complex) literals.  See section Literals kila '
                  'details.\n'
                  '\n'
                  'All literals correspond to immutable data types, na hence '
                  'the\n'
                  'object’s identity ni less important than its value.  '
                  'Multiple\n'
                  'evaluations of literals ukijumuisha the same value (either the '
                  'same\n'
                  'occurrence kwenye the program text ama a different occurrence) '
                  'may obtain\n'
                  'the same object ama a different object ukijumuisha the same '
                  'value.\n',
 'attribute-access': 'Customizing attribute access\n'
                     '****************************\n'
                     '\n'
                     'The following methods can be defined to customize the '
                     'meaning of\n'
                     'attribute access (use of, assignment to, ama deletion of '
                     '"x.name") for\n'
                     'kundi instances.\n'
                     '\n'
                     'object.__getattr__(self, name)\n'
                     '\n'
                     '   Called when the default attribute access fails ukijumuisha '
                     'an\n'
                     '   "AttributeError" (either "__getattribute__()" raises '
                     'an\n'
                     '   "AttributeError" because *name* ni sio an instance '
                     'attribute ama an\n'
                     '   attribute kwenye the kundi tree kila "self"; ama '
                     '"__get__()" of a *name*\n'
                     '   property raises "AttributeError").  This method '
                     'should either\n'
                     '   rudisha the (computed) attribute value ama ashiria an '
                     '"AttributeError"\n'
                     '   exception.\n'
                     '\n'
                     '   Note that ikiwa the attribute ni found through the '
                     'normal mechanism,\n'
                     '   "__getattr__()" ni sio called.  (This ni an '
                     'intentional asymmetry\n'
                     '   between "__getattr__()" na "__setattr__()".) This ni '
                     'done both for\n'
                     '   efficiency reasons na because otherwise '
                     '"__getattr__()" would have\n'
                     '   no way to access other attributes of the instance.  '
                     'Note that at\n'
                     '   least kila instance variables, you can fake total '
                     'control by not\n'
                     '   inserting any values kwenye the instance attribute '
                     'dictionary (but\n'
                     '   instead inserting them kwenye another object).  See the\n'
                     '   "__getattribute__()" method below kila a way to '
                     'actually get total\n'
                     '   control over attribute access.\n'
                     '\n'
                     'object.__getattribute__(self, name)\n'
                     '\n'
                     '   Called unconditionally to implement attribute '
                     'accesses for\n'
                     '   instances of the class. If the kundi also defines '
                     '"__getattr__()",\n'
                     '   the latter will sio be called unless '
                     '"__getattribute__()" either\n'
                     '   calls it explicitly ama raises an "AttributeError". '
                     'This method\n'
                     '   should rudisha the (computed) attribute value ama ashiria '
                     'an\n'
                     '   "AttributeError" exception. In order to avoid '
                     'infinite recursion in\n'
                     '   this method, its implementation should always call '
                     'the base class\n'
                     '   method ukijumuisha the same name to access any attributes it '
                     'needs, for\n'
                     '   example, "object.__getattribute__(self, name)".\n'
                     '\n'
                     '   Note: This method may still be bypitaed when looking '
                     'up special\n'
                     '     methods kama the result of implicit invocation via '
                     'language syntax\n'
                     '     ama built-in functions. See Special method lookup.\n'
                     '\n'
                     'object.__setattr__(self, name, value)\n'
                     '\n'
                     '   Called when an attribute assignment ni attempted.  '
                     'This ni called\n'
                     '   instead of the normal mechanism (i.e. store the value '
                     'in the\n'
                     '   instance dictionary). *name* ni the attribute name, '
                     '*value* ni the\n'
                     '   value to be assigned to it.\n'
                     '\n'
                     '   If "__setattr__()" wants to assign to an instance '
                     'attribute, it\n'
                     '   should call the base kundi method ukijumuisha the same name, '
                     'kila example,\n'
                     '   "object.__setattr__(self, name, value)".\n'
                     '\n'
                     'object.__delattr__(self, name)\n'
                     '\n'
                     '   Like "__setattr__()" but kila attribute deletion '
                     'instead of\n'
                     '   assignment.  This should only be implemented ikiwa "toa '
                     'obj.name" is\n'
                     '   meaningful kila the object.\n'
                     '\n'
                     'object.__dir__(self)\n'
                     '\n'
                     '   Called when "dir()" ni called on the object. A '
                     'sequence must be\n'
                     '   returned. "dir()" converts the returned sequence to a '
                     'list and\n'
                     '   sorts it.\n'
                     '\n'
                     '\n'
                     'Customizing module attribute access\n'
                     '===================================\n'
                     '\n'
                     'Special names "__getattr__" na "__dir__" can be also '
                     'used to\n'
                     'customize access to module attributes. The "__getattr__" '
                     'function at\n'
                     'the module level should accept one argument which ni the '
                     'name of an\n'
                     'attribute na rudisha the computed value ama ashiria an '
                     '"AttributeError".\n'
                     'If an attribute ni sio found on a module object through '
                     'the normal\n'
                     'lookup, i.e. "object.__getattribute__()", then '
                     '"__getattr__" is\n'
                     'searched kwenye the module "__dict__" before raising an '
                     '"AttributeError".\n'
                     'If found, it ni called ukijumuisha the attribute name na the '
                     'result is\n'
                     'returned.\n'
                     '\n'
                     'The "__dir__" function should accept no arguments, na '
                     'rudisha a list\n'
                     'of strings that represents the names accessible on '
                     'module. If present,\n'
                     'this function overrides the standard "dir()" search on a '
                     'module.\n'
                     '\n'
                     'For a more fine grained customization of the module '
                     'behavior (setting\n'
                     'attributes, properties, etc.), one can set the '
                     '"__class__" attribute\n'
                     'of a module object to a subkundi of "types.ModuleType". '
                     'For example:\n'
                     '\n'
                     '   agiza sys\n'
                     '   kutoka types agiza ModuleType\n'
                     '\n'
                     '   kundi VerboseModule(ModuleType):\n'
                     '       eleza __repr__(self):\n'
                     "           rudisha f'Verbose {self.__name__}'\n"
                     '\n'
                     '       eleza __setattr__(self, attr, value):\n'
                     "           andika(f'Setting {attr}...')\n"
                     '           super().__setattr__(attr, value)\n'
                     '\n'
                     '   sys.modules[__name__].__class__ = VerboseModule\n'
                     '\n'
                     'Note: Defining module "__getattr__" na setting module '
                     '"__class__"\n'
                     '  only affect lookups made using the attribute access '
                     'syntax –\n'
                     '  directly accessing the module globals (whether by code '
                     'within the\n'
                     '  module, ama via a reference to the module’s globals '
                     'dictionary) is\n'
                     '  unaffected.\n'
                     '\n'
                     'Changed kwenye version 3.5: "__class__" module attribute ni '
                     'now writable.\n'
                     '\n'
                     'New kwenye version 3.7: "__getattr__" na "__dir__" module '
                     'attributes.\n'
                     '\n'
                     'See also:\n'
                     '\n'
                     '  **PEP 562** - Module __getattr__ na __dir__\n'
                     '     Describes the "__getattr__" na "__dir__" functions '
                     'on modules.\n'
                     '\n'
                     '\n'
                     'Implementing Descriptors\n'
                     '========================\n'
                     '\n'
                     'The following methods only apply when an instance of the '
                     'class\n'
                     'containing the method (a so-called *descriptor* class) '
                     'appears kwenye an\n'
                     '*owner* kundi (the descriptor must be kwenye either the '
                     'owner’s class\n'
                     'dictionary ama kwenye the kundi dictionary kila one of its '
                     'parents).  In the\n'
                     'examples below, “the attribute” refers to the attribute '
                     'whose name is\n'
                     'the key of the property kwenye the owner class’ "__dict__".\n'
                     '\n'
                     'object.__get__(self, instance, owner=Tupu)\n'
                     '\n'
                     '   Called to get the attribute of the owner kundi (kundi '
                     'attribute\n'
                     '   access) ama of an instance of that kundi (instance '
                     'attribute\n'
                     '   access). The optional *owner* argument ni the owner '
                     'class, while\n'
                     '   *instance* ni the instance that the attribute was '
                     'accessed through,\n'
                     '   ama "Tupu" when the attribute ni accessed through the '
                     '*owner*.\n'
                     '\n'
                     '   This method should rudisha the computed attribute '
                     'value ama ashiria an\n'
                     '   "AttributeError" exception.\n'
                     '\n'
                     '   **PEP 252** specifies that "__get__()" ni callable '
                     'ukijumuisha one ama two\n'
                     '   arguments.  Python’s own built-in descriptors support '
                     'this\n'
                     '   specification; however, it ni likely that some '
                     'third-party tools\n'
                     '   have descriptors that require both arguments.  '
                     'Python’s own\n'
                     '   "__getattribute__()" implementation always pitaes kwenye '
                     'both arguments\n'
                     '   whether they are required ama not.\n'
                     '\n'
                     'object.__set__(self, instance, value)\n'
                     '\n'
                     '   Called to set the attribute on an instance *instance* '
                     'of the owner\n'
                     '   kundi to a new value, *value*.\n'
                     '\n'
                     '   Note, adding "__set__()" ama "__delete__()" changes '
                     'the kind of\n'
                     '   descriptor to a “data descriptor”.  See Invoking '
                     'Descriptors for\n'
                     '   more details.\n'
                     '\n'
                     'object.__delete__(self, instance)\n'
                     '\n'
                     '   Called to delete the attribute on an instance '
                     '*instance* of the\n'
                     '   owner class.\n'
                     '\n'
                     'object.__set_name__(self, owner, name)\n'
                     '\n'
                     '   Called at the time the owning kundi *owner* ni '
                     'created. The\n'
                     '   descriptor has been assigned to *name*.\n'
                     '\n'
                     '   New kwenye version 3.6.\n'
                     '\n'
                     'The attribute "__objclass__" ni interpreted by the '
                     '"inspect" module as\n'
                     'specifying the kundi where this object was defined '
                     '(setting this\n'
                     'appropriately can assist kwenye runtime introspection of '
                     'dynamic class\n'
                     'attributes). For callables, it may indicate that an '
                     'instance of the\n'
                     'given type (or a subclass) ni expected ama required kama '
                     'the first\n'
                     'positional argument (kila example, CPython sets this '
                     'attribute for\n'
                     'unbound methods that are implemented kwenye C).\n'
                     '\n'
                     '\n'
                     'Invoking Descriptors\n'
                     '====================\n'
                     '\n'
                     'In general, a descriptor ni an object attribute ukijumuisha '
                     '“binding\n'
                     'behavior”, one whose attribute access has been '
                     'overridden by methods\n'
                     'in the descriptor protocol:  "__get__()", "__set__()", '
                     'and\n'
                     '"__delete__()". If any of those methods are defined kila '
                     'an object, it\n'
                     'is said to be a descriptor.\n'
                     '\n'
                     'The default behavior kila attribute access ni to get, '
                     'set, ama delete\n'
                     'the attribute kutoka an object’s dictionary. For instance, '
                     '"a.x" has a\n'
                     'lookup chain starting ukijumuisha "a.__dict__[\'x\']", then\n'
                     '"type(a).__dict__[\'x\']", na continuing through the '
                     'base classes of\n'
                     '"type(a)" excluding metaclasses.\n'
                     '\n'
                     'However, ikiwa the looked-up value ni an object defining '
                     'one of the\n'
                     'descriptor methods, then Python may override the default '
                     'behavior and\n'
                     'invoke the descriptor method instead.  Where this occurs '
                     'in the\n'
                     'precedence chain depends on which descriptor methods '
                     'were defined and\n'
                     'how they were called.\n'
                     '\n'
                     'The starting point kila descriptor invocation ni a '
                     'binding, "a.x". How\n'
                     'the arguments are assembled depends on "a":\n'
                     '\n'
                     'Direct Call\n'
                     '   The simplest na least common call ni when user code '
                     'directly\n'
                     '   invokes a descriptor method:    "x.__get__(a)".\n'
                     '\n'
                     'Instance Binding\n'
                     '   If binding to an object instance, "a.x" ni '
                     'transformed into the\n'
                     '   call: "type(a).__dict__[\'x\'].__get__(a, type(a))".\n'
                     '\n'
                     'Class Binding\n'
                     '   If binding to a class, "A.x" ni transformed into the '
                     'call:\n'
                     '   "A.__dict__[\'x\'].__get__(Tupu, A)".\n'
                     '\n'
                     'Super Binding\n'
                     '   If "a" ni an instance of "super", then the binding '
                     '"super(B,\n'
                     '   obj).m()" searches "obj.__class__.__mro__" kila the '
                     'base kundi "A"\n'
                     '   immediately preceding "B" na then invokes the '
                     'descriptor ukijumuisha the\n'
                     '   call: "A.__dict__[\'m\'].__get__(obj, '
                     'obj.__class__)".\n'
                     '\n'
                     'For instance bindings, the precedence of descriptor '
                     'invocation depends\n'
                     'on the which descriptor methods are defined.  A '
                     'descriptor can define\n'
                     'any combination of "__get__()", "__set__()" na '
                     '"__delete__()".  If it\n'
                     'does sio define "__get__()", then accessing the '
                     'attribute will return\n'
                     'the descriptor object itself unless there ni a value kwenye '
                     'the object’s\n'
                     'instance dictionary.  If the descriptor defines '
                     '"__set__()" and/or\n'
                     '"__delete__()", it ni a data descriptor; ikiwa it defines '
                     'neither, it is\n'
                     'a non-data descriptor.  Normally, data descriptors '
                     'define both\n'
                     '"__get__()" na "__set__()", wakati non-data descriptors '
                     'have just the\n'
                     '"__get__()" method.  Data descriptors ukijumuisha "__set__()" '
                     'and "__get__()"\n'
                     'defined always override a redefinition kwenye an instance '
                     'dictionary.  In\n'
                     'contrast, non-data descriptors can be overridden by '
                     'instances.\n'
                     '\n'
                     'Python methods (including "staticmethod()" na '
                     '"classmethod()") are\n'
                     'implemented kama non-data descriptors.  Accordingly, '
                     'instances can\n'
                     'redefine na override methods.  This allows individual '
                     'instances to\n'
                     'acquire behaviors that differ kutoka other instances of '
                     'the same class.\n'
                     '\n'
                     'The "property()" function ni implemented kama a data '
                     'descriptor.\n'
                     'Accordingly, instances cansio override the behavior of a '
                     'property.\n'
                     '\n'
                     '\n'
                     '__slots__\n'
                     '=========\n'
                     '\n'
                     '*__slots__* allow us to explicitly declare data members '
                     '(like\n'
                     'properties) na deny the creation of *__dict__* na '
                     '*__weakref__*\n'
                     '(unless explicitly declared kwenye *__slots__* ama available '
                     'in a parent.)\n'
                     '\n'
                     'The space saved over using *__dict__* can be '
                     'significant. Attribute\n'
                     'lookup speed can be significantly improved kama well.\n'
                     '\n'
                     'object.__slots__\n'
                     '\n'
                     '   This kundi variable can be assigned a string, '
                     'iterable, ama sequence\n'
                     '   of strings ukijumuisha variable names used by instances.  '
                     '*__slots__*\n'
                     '   reserves space kila the declared variables na '
                     'prevents the\n'
                     '   automatic creation of *__dict__* na *__weakref__* '
                     'kila each\n'
                     '   instance.\n'
                     '\n'
                     '\n'
                     'Notes on using *__slots__*\n'
                     '--------------------------\n'
                     '\n'
                     '* When inheriting kutoka a kundi without *__slots__*, the '
                     '*__dict__*\n'
                     '  na *__weakref__* attribute of the instances will '
                     'always be\n'
                     '  accessible.\n'
                     '\n'
                     '* Without a *__dict__* variable, instances cansio be '
                     'assigned new\n'
                     '  variables sio listed kwenye the *__slots__* definition.  '
                     'Attempts to\n'
                     '  assign to an unlisted variable name raises '
                     '"AttributeError". If\n'
                     '  dynamic assignment of new variables ni desired, then '
                     'add\n'
                     '  "\'__dict__\'" to the sequence of strings kwenye the '
                     '*__slots__*\n'
                     '  declaration.\n'
                     '\n'
                     '* Without a *__weakref__* variable kila each instance, '
                     'classes\n'
                     '  defining *__slots__* do sio support weak references to '
                     'its\n'
                     '  instances. If weak reference support ni needed, then '
                     'add\n'
                     '  "\'__weakref__\'" to the sequence of strings kwenye the '
                     '*__slots__*\n'
                     '  declaration.\n'
                     '\n'
                     '* *__slots__* are implemented at the kundi level by '
                     'creating\n'
                     '  descriptors (Implementing Descriptors) kila each '
                     'variable name.  As a\n'
                     '  result, kundi attributes cansio be used to set default '
                     'values for\n'
                     '  instance variables defined by *__slots__*; otherwise, '
                     'the class\n'
                     '  attribute would overwrite the descriptor assignment.\n'
                     '\n'
                     '* The action of a *__slots__* declaration ni sio limited '
                     'to the\n'
                     '  kundi where it ni defined.  *__slots__* declared kwenye '
                     'parents are\n'
                     '  available kwenye child classes. However, child subclasses '
                     'will get a\n'
                     '  *__dict__* na *__weakref__* unless they also define '
                     '*__slots__*\n'
                     '  (which should only contain names of any *additional* '
                     'slots).\n'
                     '\n'
                     '* If a kundi defines a slot also defined kwenye a base '
                     'class, the\n'
                     '  instance variable defined by the base kundi slot ni '
                     'inaccessible\n'
                     '  (tatizo by retrieving its descriptor directly kutoka the '
                     'base class).\n'
                     '  This renders the meaning of the program undefined.  In '
                     'the future, a\n'
                     '  check may be added to prevent this.\n'
                     '\n'
                     '* Tupumpty *__slots__* does sio work kila classes derived '
                     'from\n'
                     '  “variable-length” built-in types such kama "int", '
                     '"bytes" na "tuple".\n'
                     '\n'
                     '* Any non-string iterable may be assigned to '
                     '*__slots__*. Mappings\n'
                     '  may also be used; however, kwenye the future, special '
                     'meaning may be\n'
                     '  assigned to the values corresponding to each key.\n'
                     '\n'
                     '* *__class__* assignment works only ikiwa both classes have '
                     'the same\n'
                     '  *__slots__*.\n'
                     '\n'
                     '* Multiple inheritance ukijumuisha multiple slotted parent '
                     'classes can be\n'
                     '  used, but only one parent ni allowed to have '
                     'attributes created by\n'
                     '  slots (the other bases must have empty slot layouts) - '
                     'violations\n'
                     '  ashiria "TypeError".\n',
 'attribute-references': 'Attribute references\n'
                         '********************\n'
                         '\n'
                         'An attribute reference ni a primary followed by a '
                         'period na a name:\n'
                         '\n'
                         '   attributeref ::= primary "." identifier\n'
                         '\n'
                         'The primary must evaluate to an object of a type '
                         'that supports\n'
                         'attribute references, which most objects do.  This '
                         'object ni then\n'
                         'asked to produce the attribute whose name ni the '
                         'identifier.  This\n'
                         'production can be customized by overriding the '
                         '"__getattr__()" method.\n'
                         'If this attribute ni sio available, the exception '
                         '"AttributeError" is\n'
                         'raised.  Otherwise, the type na value of the object '
                         'produced is\n'
                         'determined by the object.  Multiple evaluations of '
                         'the same attribute\n'
                         'reference may tuma different objects.\n',
 'augassign': 'Augmented assignment statements\n'
              '*******************************\n'
              '\n'
              'Augmented assignment ni the combination, kwenye a single statement, '
              'of a\n'
              'binary operation na an assignment statement:\n'
              '\n'
              '   augmented_assignment_stmt ::= augtarget augop '
              '(expression_list | tuma_expression)\n'
              '   augtarget                 ::= identifier | attributeref | '
              'subscription | slicing\n'
              '   augop                     ::= "+=" | "-=" | "*=" | "@=" | '
              '"/=" | "//=" | "%=" | "**="\n'
              '             | ">>=" | "<<=" | "&=" | "^=" | "|="\n'
              '\n'
              '(See section Primaries kila the syntax definitions of the last '
              'three\n'
              'symbols.)\n'
              '\n'
              'An augmented assignment evaluates the target (which, unlike '
              'normal\n'
              'assignment statements, cansio be an unpacking) na the '
              'expression\n'
              'list, performs the binary operation specific to the type of '
              'assignment\n'
              'on the two operands, na assigns the result to the original '
              'target.\n'
              'The target ni only evaluated once.\n'
              '\n'
              'An augmented assignment expression like "x += 1" can be '
              'rewritten as\n'
              '"x = x + 1" to achieve a similar, but sio exactly equal effect. '
              'In the\n'
              'augmented version, "x" ni only evaluated once. Also, when '
              'possible,\n'
              'the actual operation ni performed *in-place*, meaning that '
              'rather than\n'
              'creating a new object na assigning that to the target, the old '
              'object\n'
              'is modified instead.\n'
              '\n'
              'Unlike normal assignments, augmented assignments evaluate the '
              'left-\n'
              'hand side *before* evaluating the right-hand side.  For '
              'example, "a[i]\n'
              '+= f(x)" first looks-up "a[i]", then it evaluates "f(x)" na '
              'performs\n'
              'the addition, na lastly, it writes the result back to "a[i]".\n'
              '\n'
              'With the exception of assigning to tuples na multiple targets '
              'in a\n'
              'single statement, the assignment done by augmented assignment\n'
              'statements ni handled the same way kama normal assignments. '
              'Similarly,\n'
              'ukijumuisha the exception of the possible *in-place* behavior, the '
              'binary\n'
              'operation performed by augmented assignment ni the same kama the '
              'normal\n'
              'binary operations.\n'
              '\n'
              'For targets which are attribute references, the same caveat '
              'about\n'
              'kundi na instance attributes applies kama kila regular '
              'assignments.\n',
 'await': 'Await expression\n'
          '****************\n'
          '\n'
          'Suspend the execution of *coroutine* on an *awaitable* object. Can\n'
          'only be used inside a *coroutine function*.\n'
          '\n'
          '   await_expr ::= "await" primary\n'
          '\n'
          'New kwenye version 3.5.\n',
 'binary': 'Binary arithmetic operations\n'
           '****************************\n'
           '\n'
           'The binary arithmetic operations have the conventional priority\n'
           'levels.  Note that some of these operations also apply to certain '
           'non-\n'
           'numeric types.  Apart kutoka the power operator, there are only two\n'
           'levels, one kila multiplicative operators na one kila additive\n'
           'operators:\n'
           '\n'
           '   m_expr ::= u_expr | m_expr "*" u_expr | m_expr "@" m_expr |\n'
           '              m_expr "//" u_expr | m_expr "/" u_expr |\n'
           '              m_expr "%" u_expr\n'
           '   a_expr ::= m_expr | a_expr "+" m_expr | a_expr "-" m_expr\n'
           '\n'
           'The "*" (multiplication) operator tumas the product of its '
           'arguments.\n'
           'The arguments must either both be numbers, ama one argument must be '
           'an\n'
           'integer na the other must be a sequence. In the former case, the\n'
           'numbers are converted to a common type na then multiplied '
           'together.\n'
           'In the latter case, sequence repetition ni performed; a negative\n'
           'repetition factor tumas an empty sequence.\n'
           '\n'
           'The "@" (at) operator ni intended to be used kila matrix\n'
           'multiplication.  No builtin Python types implement this operator.\n'
           '\n'
           'New kwenye version 3.5.\n'
           '\n'
           'The "/" (division) na "//" (floor division) operators tuma the\n'
           'quotient of their arguments.  The numeric arguments are first\n'
           'converted to a common type. Division of integers tumas a float, '
           'while\n'
           'floor division of integers results kwenye an integer; the result ni '
           'that\n'
           'of mathematical division ukijumuisha the ‘floor’ function applied to the\n'
           'result.  Division by zero raises the "ZeroDivisionError" '
           'exception.\n'
           '\n'
           'The "%" (modulo) operator tumas the remainder kutoka the division '
           'of\n'
           'the first argument by the second.  The numeric arguments are '
           'first\n'
           'converted to a common type.  A zero right argument raises the\n'
           '"ZeroDivisionError" exception.  The arguments may be floating '
           'point\n'
           'numbers, e.g., "3.14%0.7" equals "0.34" (since "3.14" equals '
           '"4*0.7 +\n'
           '0.34".)  The modulo operator always tumas a result ukijumuisha the same '
           'sign\n'
           'as its second operand (or zero); the absolute value of the result '
           'is\n'
           'strictly smaller than the absolute value of the second operand '
           '[1].\n'
           '\n'
           'The floor division na modulo operators are connected by the '
           'following\n'
           'identity: "x == (x//y)*y + (x%y)".  Floor division na modulo are '
           'also\n'
           'connected ukijumuisha the built-in function "divmod()": "divmod(x, y) ==\n'
           '(x//y, x%y)". [2].\n'
           '\n'
           'In addition to performing the modulo operation on numbers, the '
           '"%"\n'
           'operator ni also overloaded by string objects to perform '
           'old-style\n'
           'string formatting (also known kama interpolation).  The syntax for\n'
           'string formatting ni described kwenye the Python Library Reference,\n'
           'section printf-style String Formatting.\n'
           '\n'
           'The floor division operator, the modulo operator, na the '
           '"divmod()"\n'
           'function are sio defined kila complex numbers.  Instead, convert to '
           'a\n'
           'floating point number using the "abs()" function ikiwa appropriate.\n'
           '\n'
           'The "+" (addition) operator tumas the sum of its arguments.  The\n'
           'arguments must either both be numbers ama both be sequences of the '
           'same\n'
           'type.  In the former case, the numbers are converted to a common '
           'type\n'
           'and then added together. In the latter case, the sequences are\n'
           'concatenated.\n'
           '\n'
           'The "-" (subtraction) operator tumas the difference of its '
           'arguments.\n'
           'The numeric arguments are first converted to a common type.\n',
 'bitwise': 'Binary bitwise operations\n'
            '*************************\n'
            '\n'
            'Each of the three bitwise operations has a different priority '
            'level:\n'
            '\n'
            '   and_expr ::= shift_expr | and_expr "&" shift_expr\n'
            '   xor_expr ::= and_expr | xor_expr "^" and_expr\n'
            '   or_expr  ::= xor_expr | or_expr "|" xor_expr\n'
            '\n'
            'The "&" operator tumas the bitwise AND of its arguments, which '
            'must\n'
            'be integers.\n'
            '\n'
            'The "^" operator tumas the bitwise XOR (exclusive OR) of its\n'
            'arguments, which must be integers.\n'
            '\n'
            'The "|" operator tumas the bitwise (inclusive) OR of its '
            'arguments,\n'
            'which must be integers.\n',
 'bltin-code-objects': 'Code Objects\n'
                       '************\n'
                       '\n'
                       'Code objects are used by the implementation to '
                       'represent “pseudo-\n'
                       'compiled” executable Python code such kama a function '
                       'body. They differ\n'
                       'kutoka function objects because they don’t contain a '
                       'reference to their\n'
                       'global execution environment.  Code objects are '
                       'returned by the built-\n'
                       'in "compile()" function na can be extracted kutoka '
                       'function objects\n'
                       'through their "__code__" attribute. See also the '
                       '"code" module.\n'
                       '\n'
                       'A code object can be executed ama evaluated by pitaing '
                       'it (instead of a\n'
                       'source string) to the "exec()" ama "eval()"  built-in '
                       'functions.\n'
                       '\n'
                       'See The standard type hierarchy kila more '
                       'information.\n',
 'bltin-ellipsis-object': 'The Ellipsis Object\n'
                          '*******************\n'
                          '\n'
                          'This object ni commonly used by slicing (see '
                          'Slicings).  It supports\n'
                          'no special operations.  There ni exactly one '
                          'ellipsis object, named\n'
                          '"Ellipsis" (a built-in name).  "type(Ellipsis)()" '
                          'produces the\n'
                          '"Ellipsis" singleton.\n'
                          '\n'
                          'It ni written kama "Ellipsis" ama "...".\n',
 'bltin-null-object': 'The Null Object\n'
                      '***************\n'
                      '\n'
                      'This object ni returned by functions that don’t '
                      'explicitly rudisha a\n'
                      'value.  It supports no special operations.  There ni '
                      'exactly one null\n'
                      'object, named "Tupu" (a built-in name).  "type(Tupu)()" '
                      'produces the\n'
                      'same singleton.\n'
                      '\n'
                      'It ni written kama "Tupu".\n',
 'bltin-type-objects': 'Type Objects\n'
                       '************\n'
                       '\n'
                       'Type objects represent the various object types.  An '
                       'object’s type is\n'
                       'accessed by the built-in function "type()".  There are '
                       'no special\n'
                       'operations on types.  The standard module "types" '
                       'defines names for\n'
                       'all standard built-in types.\n'
                       '\n'
                       'Types are written like this: "<kundi \'int\'>".\n',
 'booleans': 'Boolean operations\n'
             '******************\n'
             '\n'
             '   or_test  ::= and_test | or_test "or" and_test\n'
             '   and_test ::= not_test | and_test "and" not_test\n'
             '   not_test ::= comparison | "not" not_test\n'
             '\n'
             'In the context of Boolean operations, na also when expressions '
             'are\n'
             'used by control flow statements, the following values are '
             'interpreted\n'
             'as false: "Uongo", "Tupu", numeric zero of all types, na empty\n'
             'strings na containers (including strings, tuples, lists,\n'
             'dictionaries, sets na frozensets).  All other values are '
             'interpreted\n'
             'as true.  User-defined objects can customize their truth value '
             'by\n'
             'providing a "__bool__()" method.\n'
             '\n'
             'The operator "not" tumas "Kweli" ikiwa its argument ni false, '
             '"Uongo"\n'
             'otherwise.\n'
             '\n'
             'The expression "x na y" first evaluates *x*; ikiwa *x* ni false, '
             'its\n'
             'value ni returned; otherwise, *y* ni evaluated na the resulting '
             'value\n'
             'is returned.\n'
             '\n'
             'The expression "x ama y" first evaluates *x*; ikiwa *x* ni true, its '
             'value\n'
             'is returned; otherwise, *y* ni evaluated na the resulting value '
             'is\n'
             'returned.\n'
             '\n'
             'Note that neither "and" nor "or" restrict the value na type '
             'they\n'
             'rudisha to "Uongo" na "Kweli", but rather rudisha the last '
             'evaluated\n'
             'argument.  This ni sometimes useful, e.g., ikiwa "s" ni a string '
             'that\n'
             'should be replaced by a default value ikiwa it ni empty, the '
             'expression\n'
             '"s ama \'foo\'" tumas the desired value.  Because "not" has to '
             'create a\n'
             'new value, it returns a boolean value regardless of the type of '
             'its\n'
             'argument (kila example, "sio \'foo\'" produces "Uongo" rather '
             'than "\'\'".)\n',
 'koma': 'The "koma" statement\n'
          '*********************\n'
          '\n'
          '   koma_stmt ::= "koma"\n'
          '\n'
          '"koma" may only occur syntactically nested kwenye a "for" ama "while"\n'
          'loop, but sio nested kwenye a function ama kundi definition within that\n'
          'loop.\n'
          '\n'
          'It terminates the nearest enclosing loop, skipping the optional '
          '"else"\n'
          'clause ikiwa the loop has one.\n'
          '\n'
          'If a "for" loop ni terminated by "koma", the loop control target\n'
          'keeps its current value.\n'
          '\n'
          'When "koma" pitaes control out of a "try" statement ukijumuisha a '
          '"finally"\n'
          'clause, that "finally" clause ni executed before really leaving '
          'the\n'
          'loop.\n',
 'callable-types': 'Emulating callable objects\n'
                   '**************************\n'
                   '\n'
                   'object.__call__(self[, args...])\n'
                   '\n'
                   '   Called when the instance ni “called” kama a function; ikiwa '
                   'this method\n'
                   '   ni defined, "x(arg1, arg2, ...)" ni a shorthand for\n'
                   '   "x.__call__(arg1, arg2, ...)".\n',
 'calls': 'Calls\n'
          '*****\n'
          '\n'
          'A call calls a callable object (e.g., a *function*) ukijumuisha a '
          'possibly\n'
          'empty series of *arguments*:\n'
          '\n'
          '   call                 ::= primary "(" [argument_list [","] | '
          'comprehension] ")"\n'
          '   argument_list        ::= positional_arguments ["," '
          'starred_and_keywords]\n'
          '                       ["," keywords_arguments]\n'
          '                     | starred_and_keywords ["," '
          'keywords_arguments]\n'
          '                     | keywords_arguments\n'
          '   positional_arguments ::= ["*"] expression ("," ["*"] '
          'expression)*\n'
          '   starred_and_keywords ::= ("*" expression | keyword_item)\n'
          '                            ("," "*" expression | "," '
          'keyword_item)*\n'
          '   keywords_arguments   ::= (keyword_item | "**" expression)\n'
          '                          ("," keyword_item | "," "**" '
          'expression)*\n'
          '   keyword_item         ::= identifier "=" expression\n'
          '\n'
          'An optional trailing comma may be present after the positional and\n'
          'keyword arguments but does sio affect the semantics.\n'
          '\n'
          'The primary must evaluate to a callable object (user-defined\n'
          'functions, built-in functions, methods of built-in objects, class\n'
          'objects, methods of kundi instances, na all objects having a\n'
          '"__call__()" method are callable).  All argument expressions are\n'
          'evaluated before the call ni attempted.  Please refer to section\n'
          'Function definitions kila the syntax of formal *parameter* lists.\n'
          '\n'
          'If keyword arguments are present, they are first converted to\n'
          'positional arguments, kama follows.  First, a list of unfilled slots '
          'is\n'
          'created kila the formal parameters.  If there are N positional\n'
          'arguments, they are placed kwenye the first N slots.  Next, kila each\n'
          'keyword argument, the identifier ni used to determine the\n'
          'corresponding slot (ikiwa the identifier ni the same kama the first '
          'formal\n'
          'parameter name, the first slot ni used, na so on).  If the slot '
          'is\n'
          'already filled, a "TypeError" exception ni raised. Otherwise, the\n'
          'value of the argument ni placed kwenye the slot, filling it (even ikiwa '
          'the\n'
          'expression ni "Tupu", it fills the slot).  When all arguments have\n'
          'been processed, the slots that are still unfilled are filled ukijumuisha '
          'the\n'
          'corresponding default value kutoka the function definition.  '
          '(Default\n'
          'values are calculated, once, when the function ni defined; thus, a\n'
          'mutable object such kama a list ama dictionary used kama default value '
          'will\n'
          'be shared by all calls that don’t specify an argument value kila '
          'the\n'
          'corresponding slot; this should usually be avoided.)  If there are '
          'any\n'
          'unfilled slots kila which no default value ni specified, a '
          '"TypeError"\n'
          'exception ni raised.  Otherwise, the list of filled slots ni used '
          'as\n'
          'the argument list kila the call.\n'
          '\n'
          '**CPython implementation detail:** An implementation may provide\n'
          'built-in functions whose positional parameters do sio have names, '
          'even\n'
          'ikiwa they are ‘named’ kila the purpose of documentation, na which\n'
          'therefore cansio be supplied by keyword.  In CPython, this ni the '
          'case\n'
          'kila functions implemented kwenye C that use "PyArg_ParseTuple()" to '
          'parse\n'
          'their arguments.\n'
          '\n'
          'If there are more positional arguments than there are formal '
          'parameter\n'
          'slots, a "TypeError" exception ni raised, unless a formal '
          'parameter\n'
          'using the syntax "*identifier" ni present; kwenye this case, that '
          'formal\n'
          'parameter receives a tuple containing the excess positional '
          'arguments\n'
          '(or an empty tuple ikiwa there were no excess positional arguments).\n'
          '\n'
          'If any keyword argument does sio correspond to a formal parameter\n'
          'name, a "TypeError" exception ni raised, unless a formal parameter\n'
          'using the syntax "**identifier" ni present; kwenye this case, that '
          'formal\n'
          'parameter receives a dictionary containing the excess keyword\n'
          'arguments (using the keywords kama keys na the argument values as\n'
          'corresponding values), ama a (new) empty dictionary ikiwa there were '
          'no\n'
          'excess keyword arguments.\n'
          '\n'
          'If the syntax "*expression" appears kwenye the function call, '
          '"expression"\n'
          'must evaluate to an *iterable*.  Elements kutoka these iterables are\n'
          'treated kama ikiwa they were additional positional arguments.  For the '
          'call\n'
          '"f(x1, x2, *y, x3, x4)", ikiwa *y* evaluates to a sequence *y1*, …, '
          '*yM*,\n'
          'this ni equivalent to a call ukijumuisha M+4 positional arguments *x1*, '
          '*x2*,\n'
          '*y1*, …, *yM*, *x3*, *x4*.\n'
          '\n'
          'A consequence of this ni that although the "*expression" syntax '
          'may\n'
          'appear *after* explicit keyword arguments, it ni processed '
          '*before*\n'
          'the keyword arguments (and any "**expression" arguments – see '
          'below).\n'
          'So:\n'
          '\n'
          '   >>> eleza f(a, b):\n'
          '   ...     andika(a, b)\n'
          '   ...\n'
          '   >>> f(b=1, *(2,))\n'
          '   2 1\n'
          '   >>> f(a=1, *(2,))\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 1, kwenye <module>\n'
          "   TypeError: f() got multiple values kila keyword argument 'a'\n"
          '   >>> f(1, *(2,))\n'
          '   1 2\n'
          '\n'
          'It ni unusual kila both keyword arguments na the "*expression" '
          'syntax\n'
          'to be used kwenye the same call, so kwenye practice this confusion does '
          'not\n'
          'arise.\n'
          '\n'
          'If the syntax "**expression" appears kwenye the function call,\n'
          '"expression" must evaluate to a *mapping*, the contents of which '
          'are\n'
          'treated kama additional keyword arguments.  If a keyword ni already\n'
          'present (as an explicit keyword argument, ama kutoka another '
          'unpacking),\n'
          'a "TypeError" exception ni raised.\n'
          '\n'
          'Formal parameters using the syntax "*identifier" ama "**identifier"\n'
          'cansio be used kama positional argument slots ama kama keyword argument\n'
          'names.\n'
          '\n'
          'Changed kwenye version 3.5: Function calls accept any number of "*" '
          'and\n'
          '"**" unpackings, positional arguments may follow iterable '
          'unpackings\n'
          '("*"), na keyword arguments may follow dictionary unpackings '
          '("**").\n'
          'Originally proposed by **PEP 448**.\n'
          '\n'
          'A call always returns some value, possibly "Tupu", unless it raises '
          'an\n'
          'exception.  How this value ni computed depends on the type of the\n'
          'callable object.\n'
          '\n'
          'If it is—\n'
          '\n'
          'a user-defined function:\n'
          '   The code block kila the function ni executed, pitaing it the\n'
          '   argument list.  The first thing the code block will do ni bind '
          'the\n'
          '   formal parameters to the arguments; this ni described kwenye '
          'section\n'
          '   Function definitions.  When the code block executes a "return"\n'
          '   statement, this specifies the rudisha value of the function '
          'call.\n'
          '\n'
          'a built-in function ama method:\n'
          '   The result ni up to the interpreter; see Built-in Functions kila '
          'the\n'
          '   descriptions of built-in functions na methods.\n'
          '\n'
          'a kundi object:\n'
          '   A new instance of that kundi ni returned.\n'
          '\n'
          'a kundi instance method:\n'
          '   The corresponding user-defined function ni called, ukijumuisha an '
          'argument\n'
          '   list that ni one longer than the argument list of the call: the\n'
          '   instance becomes the first argument.\n'
          '\n'
          'a kundi instance:\n'
          '   The kundi must define a "__call__()" method; the effect ni then '
          'the\n'
          '   same kama ikiwa that method was called.\n',
 'class': 'Class definitions\n'
          '*****************\n'
          '\n'
          'A kundi definition defines a kundi object (see section The '
          'standard\n'
          'type hierarchy):\n'
          '\n'
          '   classeleza    ::= [decorators] "class" classname [inheritance] ":" '
          'suite\n'
          '   inheritance ::= "(" [argument_list] ")"\n'
          '   classname   ::= identifier\n'
          '\n'
          'A kundi definition ni an executable statement.  The inheritance '
          'list\n'
          'usually gives a list of base classes (see Metaclasses kila more\n'
          'advanced uses), so each item kwenye the list should evaluate to a '
          'class\n'
          'object which allows subclassing.  Classes without an inheritance '
          'list\n'
          'inherit, by default, kutoka the base kundi "object"; hence,\n'
          '\n'
          '   kundi Foo:\n'
          '       pita\n'
          '\n'
          'is equivalent to\n'
          '\n'
          '   kundi Foo(object):\n'
          '       pita\n'
          '\n'
          'The class’s suite ni then executed kwenye a new execution frame (see\n'
          'Naming na binding), using a newly created local namespace na the\n'
          'original global namespace. (Usually, the suite contains mostly\n'
          'function definitions.)  When the class’s suite finishes execution, '
          'its\n'
          'execution frame ni discarded but its local namespace ni saved. [3] '
          'A\n'
          'kundi object ni then created using the inheritance list kila the '
          'base\n'
          'classes na the saved local namespace kila the attribute '
          'dictionary.\n'
          'The kundi name ni bound to this kundi object kwenye the original local\n'
          'namespace.\n'
          '\n'
          'The order kwenye which attributes are defined kwenye the kundi body is\n'
          'preserved kwenye the new class’s "__dict__".  Note that this ni '
          'reliable\n'
          'only right after the kundi ni created na only kila classes that '
          'were\n'
          'defined using the definition syntax.\n'
          '\n'
          'Class creation can be customized heavily using metaclasses.\n'
          '\n'
          'Classes can also be decorated: just like when decorating '
          'functions,\n'
          '\n'
          '   @f1(arg)\n'
          '   @f2\n'
          '   kundi Foo: pita\n'
          '\n'
          'is roughly equivalent to\n'
          '\n'
          '   kundi Foo: pita\n'
          '   Foo = f1(arg)(f2(Foo))\n'
          '\n'
          'The evaluation rules kila the decorator expressions are the same kama '
          'for\n'
          'function decorators.  The result ni then bound to the kundi name.\n'
          '\n'
          '**Programmer’s note:** Variables defined kwenye the kundi definition '
          'are\n'
          'kundi attributes; they are shared by instances.  Instance '
          'attributes\n'
          'can be set kwenye a method ukijumuisha "self.name = value".  Both kundi and\n'
          'instance attributes are accessible through the notation '
          '“"self.name"”,\n'
          'and an instance attribute hides a kundi attribute ukijumuisha the same '
          'name\n'
          'when accessed kwenye this way.  Class attributes can be used kama '
          'defaults\n'
          'kila instance attributes, but using mutable values there can lead '
          'to\n'
          'unexpected results.  Descriptors can be used to create instance\n'
          'variables ukijumuisha different implementation details.\n'
          '\n'
          'See also:\n'
          '\n'
          '  **PEP 3115** - Metaclasses kwenye Python 3000\n'
          '     The proposal that changed the declaration of metaclasses to '
          'the\n'
          '     current syntax, na the semantics kila how classes with\n'
          '     metaclasses are constructed.\n'
          '\n'
          '  **PEP 3129** - Class Decorators\n'
          '     The proposal that added kundi decorators.  Function na '
          'method\n'
          '     decorators were introduced kwenye **PEP 318**.\n',
 'comparisons': 'Comparisons\n'
                '***********\n'
                '\n'
                'Unlike C, all comparison operations kwenye Python have the same '
                'priority,\n'
                'which ni lower than that of any arithmetic, shifting ama '
                'bitwise\n'
                'operation.  Also unlike C, expressions like "a < b < c" have '
                'the\n'
                'interpretation that ni conventional kwenye mathematics:\n'
                '\n'
                '   comparison    ::= or_expr (comp_operator or_expr)*\n'
                '   comp_operator ::= "<" | ">" | "==" | ">=" | "<=" | "!="\n'
                '                     | "is" ["not"] | ["not"] "in"\n'
                '\n'
                'Comparisons tuma boolean values: "Kweli" ama "Uongo".\n'
                '\n'
                'Comparisons can be chained arbitrarily, e.g., "x < y <= z" '
                'is\n'
                'equivalent to "x < y na y <= z", tatizo that "y" ni '
                'evaluated only\n'
                'once (but kwenye both cases "z" ni sio evaluated at all when "x < '
                'y" is\n'
                'found to be false).\n'
                '\n'
                'Formally, ikiwa *a*, *b*, *c*, …, *y*, *z* are expressions na '
                '*op1*,\n'
                '*op2*, …, *opN* are comparison operators, then "a op1 b op2 c '
                '... y\n'
                'opN z" ni equivalent to "a op1 b na b op2 c na ... y opN '
                'z", except\n'
                'that each expression ni evaluated at most once.\n'
                '\n'
                'Note that "a op1 b op2 c" doesn’t imply any kind of '
                'comparison between\n'
                '*a* na *c*, so that, e.g., "x < y > z" ni perfectly legal '
                '(though\n'
                'perhaps sio pretty).\n'
                '\n'
                '\n'
                'Value comparisons\n'
                '=================\n'
                '\n'
                'The operators "<", ">", "==", ">=", "<=", na "!=" compare '
                'the values\n'
                'of two objects.  The objects do sio need to have the same '
                'type.\n'
                '\n'
                'Chapter Objects, values na types states that objects have a '
                'value (in\n'
                'addition to type na identity).  The value of an object ni a '
                'rather\n'
                'abstract notion kwenye Python: For example, there ni no canonical '
                'access\n'
                'method kila an object’s value.  Also, there ni no requirement '
                'that the\n'
                'value of an object should be constructed kwenye a particular way, '
                'e.g.\n'
                'comprised of all its data attributes. Comparison operators '
                'implement a\n'
                'particular notion of what the value of an object is.  One can '
                'think of\n'
                'them kama defining the value of an object indirectly, by means '
                'of their\n'
                'comparison implementation.\n'
                '\n'
                'Because all types are (direct ama indirect) subtypes of '
                '"object", they\n'
                'inherit the default comparison behavior kutoka "object".  Types '
                'can\n'
                'customize their comparison behavior by implementing *rich '
                'comparison\n'
                'methods* like "__lt__()", described kwenye Basic customization.\n'
                '\n'
                'The default behavior kila equality comparison ("==" na "!=") '
                'is based\n'
                'on the identity of the objects.  Hence, equality comparison '
                'of\n'
                'instances ukijumuisha the same identity results kwenye equality, na '
                'equality\n'
                'comparison of instances ukijumuisha different identities results in\n'
                'inequality.  A motivation kila this default behavior ni the '
                'desire that\n'
                'all objects should be reflexive (i.e. "x ni y" implies "x == '
                'y").\n'
                '\n'
                'A default order comparison ("<", ">", "<=", na ">=") ni sio '
                'provided;\n'
                'an attempt raises "TypeError".  A motivation kila this default '
                'behavior\n'
                'is the lack of a similar invariant kama kila equality.\n'
                '\n'
                'The behavior of the default equality comparison, that '
                'instances with\n'
                'different identities are always unequal, may be kwenye contrast '
                'to what\n'
                'types will need that have a sensible definition of object '
                'value and\n'
                'value-based equality.  Such types will need to customize '
                'their\n'
                'comparison behavior, na kwenye fact, a number of built-in types '
                'have done\n'
                'that.\n'
                '\n'
                'The following list describes the comparison behavior of the '
                'most\n'
                'important built-in types.\n'
                '\n'
                '* Numbers of built-in numeric types (Numeric Types — int, '
                'float,\n'
                '  complex) na of the standard library types '
                '"fractions.Fraction" and\n'
                '  "decimal.Decimal" can be compared within na across their '
                'types,\n'
                '  ukijumuisha the restriction that complex numbers do sio support '
                'order\n'
                '  comparison.  Within the limits of the types involved, they '
                'compare\n'
                '  mathematically (algorithmically) correct without loss of '
                'precision.\n'
                '\n'
                '  The not-a-number values "float(\'NaN\')" na '
                '"decimal.Decimal(\'NaN\')"\n'
                '  are special.  Any ordered comparison of a number to a '
                'not-a-number\n'
                '  value ni false. A counter-intuitive implication ni that '
                'not-a-number\n'
                '  values are sio equal to themselves.  For example, ikiwa "x =\n'
                '  float(\'NaN\')", "3 < x", "x < 3", "x == x", "x != x" are '
                'all false.\n'
                '  This behavior ni compliant ukijumuisha IEEE 754.\n'
                '\n'
                '* "Tupu" na "NotImplemented" are singletons.  **PEP 8** '
                'advises\n'
                '  that comparisons kila singletons should always be done ukijumuisha '
                '"is" or\n'
                '  "is not", never the equality operators.\n'
                '\n'
                '* Binary sequences (instances of "bytes" ama "bytearray") can '
                'be\n'
                '  compared within na across their types.  They compare\n'
                '  lexicographically using the numeric values of their '
                'elements.\n'
                '\n'
                '* Strings (instances of "str") compare lexicographically '
                'using the\n'
                '  numerical Unicode code points (the result of the built-in '
                'function\n'
                '  "ord()") of their characters. [3]\n'
                '\n'
                '  Strings na binary sequences cansio be directly compared.\n'
                '\n'
                '* Sequences (instances of "tuple", "list", ama "range") can '
                'be\n'
                '  compared only within each of their types, ukijumuisha the '
                'restriction that\n'
                '  ranges do sio support order comparison.  Equality '
                'comparison across\n'
                '  these types results kwenye inequality, na ordering comparison '
                'across\n'
                '  these types raises "TypeError".\n'
                '\n'
                '  Sequences compare lexicographically using comparison of\n'
                '  corresponding elements.  The built-in containers typically '
                'assume\n'
                '  identical objects are equal to themselves.  That lets them '
                'bypita\n'
                '  equality tests kila identical objects to improve performance '
                'and to\n'
                '  maintain their internal invariants.\n'
                '\n'
                '  Lexicographical comparison between built-in collections '
                'works as\n'
                '  follows:\n'
                '\n'
                '  * For two collections to compare equal, they must be of the '
                'same\n'
                '    type, have the same length, na each pair of '
                'corresponding\n'
                '    elements must compare equal (kila example, "[1,2] == '
                '(1,2)" is\n'
                '    false because the type ni sio the same).\n'
                '\n'
                '  * Collections that support order comparison are ordered the '
                'same\n'
                '    kama their first unequal elements (kila example, "[1,2,x] <= '
                '[1,2,y]"\n'
                '    has the same value kama "x <= y").  If a corresponding '
                'element does\n'
                '    sio exist, the shorter collection ni ordered first (kila '
                'example,\n'
                '    "[1,2] < [1,2,3]" ni true).\n'
                '\n'
                '* Mappings (instances of "dict") compare equal ikiwa na only ikiwa '
                'they\n'
                '  have equal *(key, value)* pairs. Equality comparison of the '
                'keys and\n'
                '  values enforces reflexivity.\n'
                '\n'
                '  Order comparisons ("<", ">", "<=", na ">=") ashiria '
                '"TypeError".\n'
                '\n'
                '* Sets (instances of "set" ama "frozenset") can be compared '
                'within\n'
                '  na across their types.\n'
                '\n'
                '  They define order comparison operators to mean subset na '
                'superset\n'
                '  tests.  Those relations do sio define total orderings (kila '
                'example,\n'
                '  the two sets "{1,2}" na "{2,3}" are sio equal, nor subsets '
                'of one\n'
                '  another, nor supersets of one another).  Accordingly, sets '
                'are not\n'
                '  appropriate arguments kila functions which depend on total '
                'ordering\n'
                '  (kila example, "min()", "max()", na "sorted()" produce '
                'undefined\n'
                '  results given a list of sets kama inputs).\n'
                '\n'
                '  Comparison of sets enforces reflexivity of its elements.\n'
                '\n'
                '* Most other built-in types have no comparison methods '
                'implemented,\n'
                '  so they inherit the default comparison behavior.\n'
                '\n'
                'User-defined classes that customize their comparison behavior '
                'should\n'
                'follow some consistency rules, ikiwa possible:\n'
                '\n'
                '* Equality comparison should be reflexive. In other words, '
                'identical\n'
                '  objects should compare equal:\n'
                '\n'
                '     "x ni y" implies "x == y"\n'
                '\n'
                '* Comparison should be symmetric. In other words, the '
                'following\n'
                '  expressions should have the same result:\n'
                '\n'
                '     "x == y" na "y == x"\n'
                '\n'
                '     "x != y" na "y != x"\n'
                '\n'
                '     "x < y" na "y > x"\n'
                '\n'
                '     "x <= y" na "y >= x"\n'
                '\n'
                '* Comparison should be transitive. The following '
                '(non-exhaustive)\n'
                '  examples illustrate that:\n'
                '\n'
                '     "x > y na y > z" implies "x > z"\n'
                '\n'
                '     "x < y na y <= z" implies "x < z"\n'
                '\n'
                '* Inverse comparison should result kwenye the boolean negation. '
                'In other\n'
                '  words, the following expressions should have the same '
                'result:\n'
                '\n'
                '     "x == y" na "sio x != y"\n'
                '\n'
                '     "x < y" na "sio x >= y" (kila total ordering)\n'
                '\n'
                '     "x > y" na "sio x <= y" (kila total ordering)\n'
                '\n'
                '  The last two expressions apply to totally ordered '
                'collections (e.g.\n'
                '  to sequences, but sio to sets ama mappings). See also the\n'
                '  "total_ordering()" decorator.\n'
                '\n'
                '* The "hash()" result should be consistent ukijumuisha equality. '
                'Objects\n'
                '  that are equal should either have the same hash value, ama '
                'be marked\n'
                '  kama unhashable.\n'
                '\n'
                'Python does sio enforce these consistency rules. In fact, '
                'the\n'
                'not-a-number values are an example kila sio following these '
                'rules.\n'
                '\n'
                '\n'
                'Membership test operations\n'
                '==========================\n'
                '\n'
                'The operators "in" na "sio in" test kila membership.  "x kwenye '
                's"\n'
                'evaluates to "Kweli" ikiwa *x* ni a member of *s*, na "Uongo" '
                'otherwise.\n'
                '"x haiko kwenye s" returns the negation of "x kwenye s".  All built-in '
                'sequences\n'
                'and set types support this kama well kama dictionary, kila which '
                '"in" tests\n'
                'whether the dictionary has a given key. For container types '
                'such as\n'
                'list, tuple, set, frozenset, dict, ama collections.deque, the\n'
                'expression "x kwenye y" ni equivalent to "any(x ni e ama x == e '
                'kila e in\n'
                'y)".\n'
                '\n'
                'For the string na bytes types, "x kwenye y" ni "Kweli" ikiwa na '
                'only ikiwa *x*\n'
                'is a substring of *y*.  An equivalent test ni "y.find(x) != '
                '-1".\n'
                'Empty strings are always considered to be a substring of any '
                'other\n'
                'string, so """ kwenye "abc"" will rudisha "Kweli".\n'
                '\n'
                'For user-defined classes which define the "__contains__()" '
                'method, "x\n'
                'in y" returns "Kweli" ikiwa "y.__contains__(x)" returns a true '
                'value, and\n'
                '"Uongo" otherwise.\n'
                '\n'
                'For user-defined classes which do sio define "__contains__()" '
                'but do\n'
                'define "__iter__()", "x kwenye y" ni "Kweli" ikiwa some value "z", '
                'kila which\n'
                'the expression "x ni z ama x == z" ni true, ni produced wakati '
                'iterating\n'
                'over "y". If an exception ni raised during the iteration, it '
                'is kama if\n'
                '"in" raised that exception.\n'
                '\n'
                'Lastly, the old-style iteration protocol ni tried: ikiwa a kundi '
                'defines\n'
                '"__getitem__()", "x kwenye y" ni "Kweli" ikiwa na only ikiwa there ni a '
                'non-\n'
                'negative integer index *i* such that "x ni y[i] ama x == '
                'y[i]", na no\n'
                'lower integer index raises the "IndexError" exception.  (If '
                'any other\n'
                'exception ni raised, it ni kama ikiwa "in" raised that '
                'exception).\n'
                '\n'
                'The operator "sio in" ni defined to have the inverse truth '
                'value of\n'
                '"in".\n'
                '\n'
                '\n'
                'Identity comparisons\n'
                '====================\n'
                '\n'
                'The operators "is" na "is not" test kila an object’s '
                'identity: "x is\n'
                'y" ni true ikiwa na only ikiwa *x* na *y* are the same object.  '
                'An\n'
                'Object’s identity ni determined using the "id()" function.  '
                '"x ni not\n'
                'y" tumas the inverse truth value. [4]\n',
 'compound': 'Compound statements\n'
             '*******************\n'
             '\n'
             'Compound statements contain (groups of) other statements; they '
             'affect\n'
             'or control the execution of those other statements kwenye some way.  '
             'In\n'
             'general, compound statements span multiple lines, although kwenye '
             'simple\n'
             'incarnations a whole compound statement may be contained kwenye one '
             'line.\n'
             '\n'
             'The "if", "while" na "for" statements implement traditional '
             'control\n'
             'flow constructs.  "try" specifies exception handlers and/or '
             'cleanup\n'
             'code kila a group of statements, wakati the "with" statement '
             'allows the\n'
             'execution of initialization na finalization code around a block '
             'of\n'
             'code.  Function na kundi definitions are also syntactically '
             'compound\n'
             'statements.\n'
             '\n'
             'A compound statement consists of one ama more ‘clauses.’  A '
             'clause\n'
             'consists of a header na a ‘suite.’  The clause headers of a\n'
             'particular compound statement are all at the same indentation '
             'level.\n'
             'Each clause header begins ukijumuisha a uniquely identifying keyword '
             'and ends\n'
             'ukijumuisha a colon.  A suite ni a group of statements controlled by a\n'
             'clause.  A suite can be one ama more semicolon-separated simple\n'
             'statements on the same line kama the header, following the '
             'header’s\n'
             'colon, ama it can be one ama more indented statements on '
             'subsequent\n'
             'lines.  Only the latter form of a suite can contain nested '
             'compound\n'
             'statements; the following ni illegal, mostly because it wouldn’t '
             'be\n'
             'clear to which "if" clause a following "else" clause would '
             'belong:\n'
             '\n'
             '   ikiwa test1: ikiwa test2: andika(x)\n'
             '\n'
             'Also note that the semicolon binds tighter than the colon kwenye '
             'this\n'
             'context, so that kwenye the following example, either all ama none of '
             'the\n'
             '"andika()" calls are executed:\n'
             '\n'
             '   ikiwa x < y < z: andika(x); andika(y); andika(z)\n'
             '\n'
             'Summarizing:\n'
             '\n'
             '   compound_stmt ::= if_stmt\n'
             '                     | while_stmt\n'
             '                     | for_stmt\n'
             '                     | try_stmt\n'
             '                     | with_stmt\n'
             '                     | funcdef\n'
             '                     | classdef\n'
             '                     | async_with_stmt\n'
             '                     | async_for_stmt\n'
             '                     | async_funcdef\n'
             '   suite         ::= stmt_list NEWLINE | NEWLINE INDENT '
             'statement+ DEDENT\n'
             '   statement     ::= stmt_list NEWLINE | compound_stmt\n'
             '   stmt_list     ::= simple_stmt (";" simple_stmt)* [";"]\n'
             '\n'
             'Note that statements always end kwenye a "NEWLINE" possibly followed '
             'by a\n'
             '"DEDENT".  Also note that optional continuation clauses always '
             'begin\n'
             'ukijumuisha a keyword that cansio start a statement, thus there are no\n'
             'ambiguities (the ‘dangling "else"’ problem ni solved kwenye Python '
             'by\n'
             'requiring nested "if" statements to be indented).\n'
             '\n'
             'The formatting of the grammar rules kwenye the following sections '
             'places\n'
             'each clause on a separate line kila clarity.\n'
             '\n'
             '\n'
             'The "if" statement\n'
             '==================\n'
             '\n'
             'The "if" statement ni used kila conditional execution:\n'
             '\n'
             '   if_stmt ::= "if" expression ":" suite\n'
             '               ("elif" expression ":" suite)*\n'
             '               ["else" ":" suite]\n'
             '\n'
             'It selects exactly one of the suites by evaluating the '
             'expressions one\n'
             'by one until one ni found to be true (see section Boolean '
             'operations\n'
             'kila the definition of true na false); then that suite ni '
             'executed\n'
             '(and no other part of the "if" statement ni executed ama '
             'evaluated).\n'
             'If all expressions are false, the suite of the "else" clause, '
             'if\n'
             'present, ni executed.\n'
             '\n'
             '\n'
             'The "while" statement\n'
             '=====================\n'
             '\n'
             'The "while" statement ni used kila repeated execution kama long kama '
             'an\n'
             'expression ni true:\n'
             '\n'
             '   while_stmt ::= "while" expression ":" suite\n'
             '                  ["else" ":" suite]\n'
             '\n'
             'This repeatedly tests the expression and, ikiwa it ni true, '
             'executes the\n'
             'first suite; ikiwa the expression ni false (which may be the first '
             'time\n'
             'it ni tested) the suite of the "else" clause, ikiwa present, ni '
             'executed\n'
             'and the loop terminates.\n'
             '\n'
             'A "koma" statement executed kwenye the first suite terminates the '
             'loop\n'
             'without executing the "else" clause’s suite.  A "endelea" '
             'statement\n'
             'executed kwenye the first suite skips the rest of the suite na goes '
             'back\n'
             'to testing the expression.\n'
             '\n'
             '\n'
             'The "for" statement\n'
             '===================\n'
             '\n'
             'The "for" statement ni used to iterate over the elements of a '
             'sequence\n'
             '(such kama a string, tuple ama list) ama other iterable object:\n'
             '\n'
             '   for_stmt ::= "for" target_list "in" expression_list ":" '
             'suite\n'
             '                ["else" ":" suite]\n'
             '\n'
             'The expression list ni evaluated once; it should tuma an '
             'iterable\n'
             'object.  An iterator ni created kila the result of the\n'
             '"expression_list".  The suite ni then executed once kila each '
             'item\n'
             'provided by the iterator, kwenye the order returned by the '
             'iterator.  Each\n'
             'item kwenye turn ni assigned to the target list using the standard '
             'rules\n'
             'kila assignments (see Assignment statements), na then the suite '
             'is\n'
             'executed.  When the items are exhausted (which ni immediately '
             'when the\n'
             'sequence ni empty ama an iterator raises a "StopIteration" '
             'exception),\n'
             'the suite kwenye the "else" clause, ikiwa present, ni executed, na the '
             'loop\n'
             'terminates.\n'
             '\n'
             'A "koma" statement executed kwenye the first suite terminates the '
             'loop\n'
             'without executing the "else" clause’s suite.  A "endelea" '
             'statement\n'
             'executed kwenye the first suite skips the rest of the suite na '
             'endeleas\n'
             'ukijumuisha the next item, ama ukijumuisha the "else" clause ikiwa there ni no '
             'next\n'
             'item.\n'
             '\n'
             'The for-loop makes assignments to the variables kwenye the target '
             'list.\n'
             'This overwrites all previous assignments to those variables '
             'including\n'
             'those made kwenye the suite of the for-loop:\n'
             '\n'
             '   kila i kwenye range(10):\n'
             '       andika(i)\n'
             '       i = 5             # this will sio affect the for-loop\n'
             '                         # because i will be overwritten ukijumuisha '
             'the next\n'
             '                         # index kwenye the range\n'
             '\n'
             'Names kwenye the target list are sio deleted when the loop ni '
             'finished,\n'
             'but ikiwa the sequence ni empty, they will sio have been assigned '
             'to at\n'
             'all by the loop.  Hint: the built-in function "range()" returns '
             'an\n'
             'iterator of integers suitable to emulate the effect of Pascal’s '
             '"kila i\n'
             ':= a to b do"; e.g., "list(range(3))" returns the list "[0, 1, '
             '2]".\n'
             '\n'
             'Note: There ni a subtlety when the sequence ni being modified by '
             'the\n'
             '  loop (this can only occur kila mutable sequences, e.g. lists).  '
             'An\n'
             '  internal counter ni used to keep track of which item ni used '
             'next,\n'
             '  na this ni incremented on each iteration.  When this counter '
             'has\n'
             '  reached the length of the sequence the loop terminates.  This '
             'means\n'
             '  that ikiwa the suite deletes the current (or a previous) item '
             'kutoka the\n'
             '  sequence, the next item will be skipped (since it gets the '
             'index of\n'
             '  the current item which has already been treated).  Likewise, '
             'ikiwa the\n'
             '  suite inserts an item kwenye the sequence before the current item, '
             'the\n'
             '  current item will be treated again the next time through the '
             'loop.\n'
             '  This can lead to nasty bugs that can be avoided by making a\n'
             '  temporary copy using a slice of the whole sequence, e.g.,\n'
             '\n'
             '     kila x kwenye a[:]:\n'
             '         ikiwa x < 0: a.remove(x)\n'
             '\n'
             '\n'
             'The "try" statement\n'
             '===================\n'
             '\n'
             'The "try" statement specifies exception handlers and/or cleanup '
             'code\n'
             'kila a group of statements:\n'
             '\n'
             '   try_stmt  ::= try1_stmt | try2_stmt\n'
             '   try1_stmt ::= "try" ":" suite\n'
             '                 ("except" [expression ["as" identifier]] ":" '
             'suite)+\n'
             '                 ["else" ":" suite]\n'
             '                 ["finally" ":" suite]\n'
             '   try2_stmt ::= "try" ":" suite\n'
             '                 "finally" ":" suite\n'
             '\n'
             'The "except" clause(s) specify one ama more exception handlers. '
             'When no\n'
             'exception occurs kwenye the "try" clause, no exception handler is\n'
             'executed. When an exception occurs kwenye the "try" suite, a search '
             'kila an\n'
             'exception handler ni started.  This search inspects the tatizo '
             'clauses\n'
             'in turn until one ni found that matches the exception.  An '
             'expression-\n'
             'less tatizo clause, ikiwa present, must be last; it matches any\n'
             'exception.  For an tatizo clause ukijumuisha an expression, that '
             'expression\n'
             'is evaluated, na the clause matches the exception ikiwa the '
             'resulting\n'
             'object ni “compatible” ukijumuisha the exception.  An object ni '
             'compatible\n'
             'ukijumuisha an exception ikiwa it ni the kundi ama a base kundi of the '
             'exception\n'
             'object ama a tuple containing an item compatible ukijumuisha the '
             'exception.\n'
             '\n'
             'If no tatizo clause matches the exception, the search kila an '
             'exception\n'
             'handler endeleas kwenye the surrounding code na on the invocation '
             'stack.\n'
             '[1]\n'
             '\n'
             'If the evaluation of an expression kwenye the header of an tatizo '
             'clause\n'
             'raises an exception, the original search kila a handler ni '
             'canceled and\n'
             'a search starts kila the new exception kwenye the surrounding code '
             'and on\n'
             'the call stack (it ni treated kama ikiwa the entire "try" statement '
             'raised\n'
             'the exception).\n'
             '\n'
             'When a matching tatizo clause ni found, the exception ni '
             'assigned to\n'
             'the target specified after the "as" keyword kwenye that tatizo '
             'clause, if\n'
             'present, na the tatizo clause’s suite ni executed.  All except\n'
             'clauses must have an executable block.  When the end of this '
             'block is\n'
             'reached, execution endeleas normally after the entire try '
             'statement.\n'
             '(This means that ikiwa two nested handlers exist kila the same '
             'exception,\n'
             'and the exception occurs kwenye the try clause of the inner handler, '
             'the\n'
             'outer handler will sio handle the exception.)\n'
             '\n'
             'When an exception has been assigned using "as target", it ni '
             'cleared\n'
             'at the end of the tatizo clause.  This ni kama if\n'
             '\n'
             '   tatizo E kama N:\n'
             '       foo\n'
             '\n'
             'was translated to\n'
             '\n'
             '   tatizo E kama N:\n'
             '       jaribu:\n'
             '           foo\n'
             '       mwishowe:\n'
             '           toa N\n'
             '\n'
             'This means the exception must be assigned to a different name to '
             'be\n'
             'able to refer to it after the tatizo clause.  Exceptions are '
             'cleared\n'
             'because ukijumuisha the traceback attached to them, they form a '
             'reference\n'
             'cycle ukijumuisha the stack frame, keeping all locals kwenye that frame '
             'alive\n'
             'until the next garbage collection occurs.\n'
             '\n'
             'Before an tatizo clause’s suite ni executed, details about the\n'
             'exception are stored kwenye the "sys" module na can be accessed '
             'via\n'
             '"sys.exc_info()". "sys.exc_info()" returns a 3-tuple consisting '
             'of the\n'
             'exception class, the exception instance na a traceback object '
             '(see\n'
             'section The standard type hierarchy) identifying the point kwenye '
             'the\n'
             'program where the exception occurred.  "sys.exc_info()" values '
             'are\n'
             'restored to their previous values (before the call) when '
             'returning\n'
             'kutoka a function that handled an exception.\n'
             '\n'
             'The optional "else" clause ni executed ikiwa the control flow '
             'leaves the\n'
             '"try" suite, no exception was raised, na no "return", '
             '"endelea", or\n'
             '"koma" statement was executed.  Exceptions kwenye the "else" clause '
             'are\n'
             'sio handled by the preceding "except" clauses.\n'
             '\n'
             'If "finally" ni present, it specifies a ‘cleanup’ handler.  The '
             '"try"\n'
             'clause ni executed, including any "except" na "else" clauses.  '
             'If an\n'
             'exception occurs kwenye any of the clauses na ni sio handled, the\n'
             'exception ni temporarily saved. The "finally" clause ni '
             'executed.  If\n'
             'there ni a saved exception it ni re-raised at the end of the '
             '"finally"\n'
             'clause.  If the "finally" clause raises another exception, the '
             'saved\n'
             'exception ni set kama the context of the new exception. If the '
             '"finally"\n'
             'clause executes a "return", "koma" ama "endelea" statement, the '
             'saved\n'
             'exception ni discarded:\n'
             '\n'
             '   >>> eleza f():\n'
             '   ...     jaribu:\n'
             '   ...         1/0\n'
             '   ...     mwishowe:\n'
             '   ...         rudisha 42\n'
             '   ...\n'
             '   >>> f()\n'
             '   42\n'
             '\n'
             'The exception information ni sio available to the program '
             'during\n'
             'execution of the "finally" clause.\n'
             '\n'
             'When a "return", "koma" ama "endelea" statement ni executed kwenye '
             'the\n'
             '"try" suite of a "try"…"finally" statement, the "finally" clause '
             'is\n'
             'also executed ‘on the way out.’\n'
             '\n'
             'The rudisha value of a function ni determined by the last '
             '"return"\n'
             'statement executed.  Since the "finally" clause always executes, '
             'a\n'
             '"return" statement executed kwenye the "finally" clause will always '
             'be the\n'
             'last one executed:\n'
             '\n'
             '   >>> eleza foo():\n'
             '   ...     jaribu:\n'
             "   ...         rudisha 'try'\n"
             '   ...     mwishowe:\n'
             "   ...         rudisha 'finally'\n"
             '   ...\n'
             '   >>> foo()\n'
             "   'finally'\n"
             '\n'
             'Additional information on exceptions can be found kwenye section\n'
             'Exceptions, na information on using the "raise" statement to '
             'generate\n'
             'exceptions may be found kwenye section The ashiria statement.\n'
             '\n'
             'Changed kwenye version 3.8: Prior to Python 3.8, a "endelea" '
             'statement\n'
             'was illegal kwenye the "finally" clause due to a problem ukijumuisha the\n'
             'implementation.\n'
             '\n'
             '\n'
             'The "with" statement\n'
             '====================\n'
             '\n'
             'The "with" statement ni used to wrap the execution of a block '
             'with\n'
             'methods defined by a context manager (see section With '
             'Statement\n'
             'Context Managers). This allows common "try"…"except"…"finally" '
             'usage\n'
             'patterns to be encapsulated kila convenient reuse.\n'
             '\n'
             '   with_stmt ::= "with" with_item ("," with_item)* ":" suite\n'
             '   with_item ::= expression ["as" target]\n'
             '\n'
             'The execution of the "with" statement ukijumuisha one “item” proceeds '
             'as\n'
             'follows:\n'
             '\n'
             '1. The context expression (the expression given kwenye the '
             '"with_item")\n'
             '   ni evaluated to obtain a context manager.\n'
             '\n'
             '2. The context manager’s "__exit__()" ni loaded kila later use.\n'
             '\n'
             '3. The context manager’s "__enter__()" method ni invoked.\n'
             '\n'
             '4. If a target was included kwenye the "with" statement, the return\n'
             '   value kutoka "__enter__()" ni assigned to it.\n'
             '\n'
             '   Note: The "with" statement guarantees that ikiwa the '
             '"__enter__()"\n'
             '     method returns without an error, then "__exit__()" will '
             'always be\n'
             '     called. Thus, ikiwa an error occurs during the assignment to '
             'the\n'
             '     target list, it will be treated the same kama an error '
             'occurring\n'
             '     within the suite would be. See step 6 below.\n'
             '\n'
             '5. The suite ni executed.\n'
             '\n'
             '6. The context manager’s "__exit__()" method ni invoked.  If an\n'
             '   exception caused the suite to be exited, its type, value, '
             'and\n'
             '   traceback are pitaed kama arguments to "__exit__()". Otherwise, '
             'three\n'
             '   "Tupu" arguments are supplied.\n'
             '\n'
             '   If the suite was exited due to an exception, na the rudisha '
             'value\n'
             '   kutoka the "__exit__()" method was false, the exception ni '
             'reraised.\n'
             '   If the rudisha value was true, the exception ni suppressed, '
             'and\n'
             '   execution endeleas ukijumuisha the statement following the "with"\n'
             '   statement.\n'
             '\n'
             '   If the suite was exited kila any reason other than an '
             'exception, the\n'
             '   rudisha value kutoka "__exit__()" ni ignored, na execution '
             'proceeds\n'
             '   at the normal location kila the kind of exit that was taken.\n'
             '\n'
             'With more than one item, the context managers are processed kama '
             'if\n'
             'multiple "with" statements were nested:\n'
             '\n'
             '   ukijumuisha A() kama a, B() kama b:\n'
             '       suite\n'
             '\n'
             'is equivalent to\n'
             '\n'
             '   ukijumuisha A() kama a:\n'
             '       ukijumuisha B() kama b:\n'
             '           suite\n'
             '\n'
             'Changed kwenye version 3.1: Support kila multiple context '
             'expressions.\n'
             '\n'
             'See also:\n'
             '\n'
             '  **PEP 343** - The “with” statement\n'
             '     The specification, background, na examples kila the Python '
             '"with"\n'
             '     statement.\n'
             '\n'
             '\n'
             'Function definitions\n'
             '====================\n'
             '\n'
             'A function definition defines a user-defined function object '
             '(see\n'
             'section The standard type hierarchy):\n'
             '\n'
             '   funceleza                   ::= [decorators] "def" funcname "(" '
             '[parameter_list] ")"\n'
             '               ["->" expression] ":" suite\n'
             '   decorators                ::= decorator+\n'
             '   decorator                 ::= "@" dotted_name ["(" '
             '[argument_list [","]] ")"] NEWLINE\n'
             '   dotted_name               ::= identifier ("." identifier)*\n'
             '   parameter_list            ::= defparameter ("," '
             'defparameter)* "," "/" ["," [parameter_list_no_posonly]]\n'
             '                        | parameter_list_no_posonly\n'
             '   parameter_list_no_posonly ::= defparameter ("," '
             'defparameter)* ["," [parameter_list_starargs]]\n'
             '                                 | parameter_list_starargs\n'
             '   parameter_list_starargs   ::= "*" [parameter] ("," '
             'defparameter)* ["," ["**" parameter [","]]]\n'
             '                               | "**" parameter [","]\n'
             '   parameter                 ::= identifier [":" expression]\n'
             '   defparameter              ::= parameter ["=" expression]\n'
             '   funcname                  ::= identifier\n'
             '\n'
             'A function definition ni an executable statement.  Its execution '
             'binds\n'
             'the function name kwenye the current local namespace to a function '
             'object\n'
             '(a wrapper around the executable code kila the function).  This\n'
             'function object contains a reference to the current global '
             'namespace\n'
             'as the global namespace to be used when the function ni called.\n'
             '\n'
             'The function definition does sio execute the function body; this '
             'gets\n'
             'executed only when the function ni called. [2]\n'
             '\n'
             'A function definition may be wrapped by one ama more *decorator*\n'
             'expressions. Decorator expressions are evaluated when the '
             'function is\n'
             'defined, kwenye the scope that contains the function definition.  '
             'The\n'
             'result must be a callable, which ni invoked ukijumuisha the function '
             'object\n'
             'as the only argument. The returned value ni bound to the '
             'function name\n'
             'instead of the function object.  Multiple decorators are applied '
             'in\n'
             'nested fashion. For example, the following code\n'
             '\n'
             '   @f1(arg)\n'
             '   @f2\n'
             '   eleza func(): pita\n'
             '\n'
             'is roughly equivalent to\n'
             '\n'
             '   eleza func(): pita\n'
             '   func = f1(arg)(f2(func))\n'
             '\n'
             'tatizo that the original function ni sio temporarily bound to '
             'the name\n'
             '"func".\n'
             '\n'
             'When one ama more *parameters* have the form *parameter* "="\n'
             '*expression*, the function ni said to have “default parameter '
             'values.”\n'
             'For a parameter ukijumuisha a default value, the corresponding '
             '*argument* may\n'
             'be omitted kutoka a call, kwenye which case the parameter’s default '
             'value is\n'
             'substituted.  If a parameter has a default value, all following\n'
             'parameters up until the “"*"” must also have a default value — '
             'this is\n'
             'a syntactic restriction that ni sio expressed by the grammar.\n'
             '\n'
             '**Default parameter values are evaluated kutoka left to right when '
             'the\n'
             'function definition ni executed.** This means that the '
             'expression is\n'
             'evaluated once, when the function ni defined, na that the same '
             '“pre-\n'
             'computed” value ni used kila each call.  This ni especially '
             'important\n'
             'to understand when a default parameter ni a mutable object, such '
             'as a\n'
             'list ama a dictionary: ikiwa the function modifies the object (e.g. '
             'by\n'
             'appending an item to a list), the default value ni kwenye effect '
             'modified.\n'
             'This ni generally sio what was intended.  A way around this ni '
             'to use\n'
             '"Tupu" kama the default, na explicitly test kila it kwenye the body of '
             'the\n'
             'function, e.g.:\n'
             '\n'
             '   eleza whats_on_the_telly(penguin=Tupu):\n'
             '       ikiwa penguin ni Tupu:\n'
             '           penguin = []\n'
             '       penguin.append("property of the zoo")\n'
             '       rudisha penguin\n'
             '\n'
             'Function call semantics are described kwenye more detail kwenye section '
             'Calls.\n'
             'A function call always assigns values to all parameters '
             'mentioned in\n'
             'the parameter list, either kutoka position arguments, kutoka '
             'keyword\n'
             'arguments, ama kutoka default values.  If the form “"*identifier"” '
             'is\n'
             'present, it ni initialized to a tuple receiving any excess '
             'positional\n'
             'parameters, defaulting to the empty tuple. If the form\n'
             '“"**identifier"” ni present, it ni initialized to a new ordered\n'
             'mapping receiving any excess keyword arguments, defaulting to a '
             'new\n'
             'empty mapping of the same type.  Parameters after “"*"” or\n'
             '“"*identifier"” are keyword-only parameters na may only be '
             'pitaed\n'
             'used keyword arguments.\n'
             '\n'
             'Parameters may have an *annotation* of the form “": '
             'expression"”\n'
             'following the parameter name.  Any parameter may have an '
             'annotation,\n'
             'even those of the form "*identifier" ama "**identifier".  '
             'Functions may\n'
             'have “return” annotation of the form “"-> expression"” after '
             'the\n'
             'parameter list.  These annotations can be any valid Python '
             'expression.\n'
             'The presence of annotations does sio change the semantics of a\n'
             'function.  The annotation values are available kama values of a\n'
             'dictionary keyed by the parameters’ names kwenye the '
             '"__annotations__"\n'
             'attribute of the function object.  If the "annotations" agiza '
             'from\n'
             '"__future__" ni used, annotations are preserved kama strings at '
             'runtime\n'
             'which enables postponed evaluation.  Otherwise, they are '
             'evaluated\n'
             'when the function definition ni executed.  In this case '
             'annotations\n'
             'may be evaluated kwenye a different order than they appear kwenye the '
             'source\n'
             'code.\n'
             '\n'
             'It ni also possible to create anonymous functions (functions sio '
             'bound\n'
             'to a name), kila immediate use kwenye expressions.  This uses lambda\n'
             'expressions, described kwenye section Lambdas.  Note that the '
             'lambda\n'
             'expression ni merely a shorthand kila a simplified function '
             'definition;\n'
             'a function defined kwenye a “"def"” statement can be pitaed around '
             'or\n'
             'assigned to another name just like a function defined by a '
             'lambda\n'
             'expression.  The “"def"” form ni actually more powerful since '
             'it\n'
             'allows the execution of multiple statements na annotations.\n'
             '\n'
             '**Programmer’s note:** Functions are first-kundi objects.  A '
             '“"def"”\n'
             'statement executed inside a function definition defines a local\n'
             'function that can be returned ama pitaed around.  Free variables '
             'used\n'
             'in the nested function can access the local variables of the '
             'function\n'
             'containing the def.  See section Naming na binding kila '
             'details.\n'
             '\n'
             'See also:\n'
             '\n'
             '  **PEP 3107** - Function Annotations\n'
             '     The original specification kila function annotations.\n'
             '\n'
             '  **PEP 484** - Type Hints\n'
             '     Definition of a standard meaning kila annotations: type '
             'hints.\n'
             '\n'
             '  **PEP 526** - Syntax kila Variable Annotations\n'
             '     Ability to type hint variable declarations, including '
             'class\n'
             '     variables na instance variables\n'
             '\n'
             '  **PEP 563** - Postponed Evaluation of Annotations\n'
             '     Support kila forward references within annotations by '
             'preserving\n'
             '     annotations kwenye a string form at runtime instead of eager\n'
             '     evaluation.\n'
             '\n'
             '\n'
             'Class definitions\n'
             '=================\n'
             '\n'
             'A kundi definition defines a kundi object (see section The '
             'standard\n'
             'type hierarchy):\n'
             '\n'
             '   classeleza    ::= [decorators] "class" classname [inheritance] '
             '":" suite\n'
             '   inheritance ::= "(" [argument_list] ")"\n'
             '   classname   ::= identifier\n'
             '\n'
             'A kundi definition ni an executable statement.  The inheritance '
             'list\n'
             'usually gives a list of base classes (see Metaclasses kila more\n'
             'advanced uses), so each item kwenye the list should evaluate to a '
             'class\n'
             'object which allows subclassing.  Classes without an inheritance '
             'list\n'
             'inherit, by default, kutoka the base kundi "object"; hence,\n'
             '\n'
             '   kundi Foo:\n'
             '       pita\n'
             '\n'
             'is equivalent to\n'
             '\n'
             '   kundi Foo(object):\n'
             '       pita\n'
             '\n'
             'The class’s suite ni then executed kwenye a new execution frame '
             '(see\n'
             'Naming na binding), using a newly created local namespace na '
             'the\n'
             'original global namespace. (Usually, the suite contains mostly\n'
             'function definitions.)  When the class’s suite finishes '
             'execution, its\n'
             'execution frame ni discarded but its local namespace ni saved. '
             '[3] A\n'
             'kundi object ni then created using the inheritance list kila the '
             'base\n'
             'classes na the saved local namespace kila the attribute '
             'dictionary.\n'
             'The kundi name ni bound to this kundi object kwenye the original '
             'local\n'
             'namespace.\n'
             '\n'
             'The order kwenye which attributes are defined kwenye the kundi body is\n'
             'preserved kwenye the new class’s "__dict__".  Note that this ni '
             'reliable\n'
             'only right after the kundi ni created na only kila classes that '
             'were\n'
             'defined using the definition syntax.\n'
             '\n'
             'Class creation can be customized heavily using metaclasses.\n'
             '\n'
             'Classes can also be decorated: just like when decorating '
             'functions,\n'
             '\n'
             '   @f1(arg)\n'
             '   @f2\n'
             '   kundi Foo: pita\n'
             '\n'
             'is roughly equivalent to\n'
             '\n'
             '   kundi Foo: pita\n'
             '   Foo = f1(arg)(f2(Foo))\n'
             '\n'
             'The evaluation rules kila the decorator expressions are the same '
             'as for\n'
             'function decorators.  The result ni then bound to the kundi '
             'name.\n'
             '\n'
             '**Programmer’s note:** Variables defined kwenye the kundi definition '
             'are\n'
             'kundi attributes; they are shared by instances.  Instance '
             'attributes\n'
             'can be set kwenye a method ukijumuisha "self.name = value".  Both kundi '
             'and\n'
             'instance attributes are accessible through the notation '
             '“"self.name"”,\n'
             'and an instance attribute hides a kundi attribute ukijumuisha the same '
             'name\n'
             'when accessed kwenye this way.  Class attributes can be used kama '
             'defaults\n'
             'kila instance attributes, but using mutable values there can lead '
             'to\n'
             'unexpected results.  Descriptors can be used to create instance\n'
             'variables ukijumuisha different implementation details.\n'
             '\n'
             'See also:\n'
             '\n'
             '  **PEP 3115** - Metaclasses kwenye Python 3000\n'
             '     The proposal that changed the declaration of metaclasses to '
             'the\n'
             '     current syntax, na the semantics kila how classes with\n'
             '     metaclasses are constructed.\n'
             '\n'
             '  **PEP 3129** - Class Decorators\n'
             '     The proposal that added kundi decorators.  Function na '
             'method\n'
             '     decorators were introduced kwenye **PEP 318**.\n'
             '\n'
             '\n'
             'Coroutines\n'
             '==========\n'
             '\n'
             'New kwenye version 3.5.\n'
             '\n'
             '\n'
             'Coroutine function definition\n'
             '-----------------------------\n'
             '\n'
             '   async_funceleza ::= [decorators] "async" "def" funcname "(" '
             '[parameter_list] ")"\n'
             '                     ["->" expression] ":" suite\n'
             '\n'
             'Execution of Python coroutines can be suspended na resumed at '
             'many\n'
             'points (see *coroutine*).  Inside the body of a coroutine '
             'function,\n'
             '"await" na "async" identifiers become reserved keywords; '
             '"await"\n'
             'expressions, "async for" na "async with" can only be used in\n'
             'coroutine function bodies.\n'
             '\n'
             'Functions defined ukijumuisha "async def" syntax are always coroutine\n'
             'functions, even ikiwa they do sio contain "await" ama "async" '
             'keywords.\n'
             '\n'
             'It ni a "SyntaxError" to use a "tuma from" expression inside '
             'the body\n'
             'of a coroutine function.\n'
             '\n'
             'An example of a coroutine function:\n'
             '\n'
             '   async eleza func(param1, param2):\n'
             '       do_stuff()\n'
             '       await some_coroutine()\n'
             '\n'
             '\n'
             'The "async for" statement\n'
             '-------------------------\n'
             '\n'
             '   async_for_stmt ::= "async" for_stmt\n'
             '\n'
             'An *asynchronous iterable* ni able to call asynchronous code kwenye '
             'its\n'
             '*iter* implementation, na *asynchronous iterator* can call\n'
             'asynchronous code kwenye its *next* method.\n'
             '\n'
             'The "async for" statement allows convenient iteration over\n'
             'asynchronous iterators.\n'
             '\n'
             'The following code:\n'
             '\n'
             '   async kila TARGET kwenye ITER:\n'
             '       BLOCK\n'
             '   isipokua:\n'
             '       BLOCK2\n'
             '\n'
             'Is semantically equivalent to:\n'
             '\n'
             '   iter = (ITER)\n'
             '   iter = type(iter).__aiter__(iter)\n'
             '   running = Kweli\n'
             '   wakati running:\n'
             '       jaribu:\n'
             '           TARGET = await type(iter).__anext__(iter)\n'
             '       tatizo StopAsyncIteration:\n'
             '           running = Uongo\n'
             '       isipokua:\n'
             '           BLOCK\n'
             '   isipokua:\n'
             '       BLOCK2\n'
             '\n'
             'See also "__aiter__()" na "__anext__()" kila details.\n'
             '\n'
             'It ni a "SyntaxError" to use an "async for" statement outside '
             'the body\n'
             'of a coroutine function.\n'
             '\n'
             '\n'
             'The "async with" statement\n'
             '--------------------------\n'
             '\n'
             '   async_with_stmt ::= "async" with_stmt\n'
             '\n'
             'An *asynchronous context manager* ni a *context manager* that ni '
             'able\n'
             'to suspend execution kwenye its *enter* na *exit* methods.\n'
             '\n'
             'The following code:\n'
             '\n'
             '   async ukijumuisha EXPR kama VAR:\n'
             '       BLOCK\n'
             '\n'
             'Is semantically equivalent to:\n'
             '\n'
             '   mgr = (EXPR)\n'
             '   aexit = type(mgr).__aexit__\n'
             '   aenter = type(mgr).__aenter__(mgr)\n'
             '\n'
             '   VAR = await aenter\n'
             '   jaribu:\n'
             '       BLOCK\n'
             '   tatizo:\n'
             '       ikiwa sio await aexit(mgr, *sys.exc_info()):\n'
             '           raise\n'
             '   isipokua:\n'
             '       await aexit(mgr, Tupu, Tupu, Tupu)\n'
             '\n'
             'See also "__aenter__()" na "__aexit__()" kila details.\n'
             '\n'
             'It ni a "SyntaxError" to use an "async with" statement outside '
             'the\n'
             'body of a coroutine function.\n'
             '\n'
             'See also:\n'
             '\n'
             '  **PEP 492** - Coroutines ukijumuisha async na await syntax\n'
             '     The proposal that made coroutines a proper standalone '
             'concept in\n'
             '     Python, na added supporting syntax.\n'
             '\n'
             '-[ Footnotes ]-\n'
             '\n'
             '[1] The exception ni propagated to the invocation stack unless\n'
             '    there ni a "finally" clause which happens to ashiria another\n'
             '    exception. That new exception causes the old one to be '
             'lost.\n'
             '\n'
             '[2] A string literal appearing kama the first statement kwenye the\n'
             '    function body ni transformed into the function’s "__doc__"\n'
             '    attribute na therefore the function’s *docstring*.\n'
             '\n'
             '[3] A string literal appearing kama the first statement kwenye the '
             'class\n'
             '    body ni transformed into the namespace’s "__doc__" item and\n'
             '    therefore the class’s *docstring*.\n',
 'context-managers': 'With Statement Context Managers\n'
                     '*******************************\n'
                     '\n'
                     'A *context manager* ni an object that defines the '
                     'runtime context to\n'
                     'be established when executing a "with" statement. The '
                     'context manager\n'
                     'handles the entry into, na the exit from, the desired '
                     'runtime context\n'
                     'kila the execution of the block of code.  Context '
                     'managers are normally\n'
                     'invoked using the "with" statement (described kwenye section '
                     'The with\n'
                     'statement), but can also be used by directly invoking '
                     'their methods.\n'
                     '\n'
                     'Typical uses of context managers include saving na '
                     'restoring various\n'
                     'kinds of global state, locking na unlocking resources, '
                     'closing opened\n'
                     'files, etc.\n'
                     '\n'
                     'For more information on context managers, see Context '
                     'Manager Types.\n'
                     '\n'
                     'object.__enter__(self)\n'
                     '\n'
                     '   Enter the runtime context related to this object. The '
                     '"with"\n'
                     '   statement will bind this method’s rudisha value to the '
                     'target(s)\n'
                     '   specified kwenye the "as" clause of the statement, ikiwa '
                     'any.\n'
                     '\n'
                     'object.__exit__(self, exc_type, exc_value, traceback)\n'
                     '\n'
                     '   Exit the runtime context related to this object. The '
                     'parameters\n'
                     '   describe the exception that caused the context to be '
                     'exited. If the\n'
                     '   context was exited without an exception, all three '
                     'arguments will\n'
                     '   be "Tupu".\n'
                     '\n'
                     '   If an exception ni supplied, na the method wishes to '
                     'suppress the\n'
                     '   exception (i.e., prevent it kutoka being propagated), '
                     'it should\n'
                     '   rudisha a true value. Otherwise, the exception will be '
                     'processed\n'
                     '   normally upon exit kutoka this method.\n'
                     '\n'
                     '   Note that "__exit__()" methods should sio reashiria the '
                     'pitaed-in\n'
                     '   exception; this ni the caller’s responsibility.\n'
                     '\n'
                     'See also:\n'
                     '\n'
                     '  **PEP 343** - The “with” statement\n'
                     '     The specification, background, na examples kila the '
                     'Python "with"\n'
                     '     statement.\n',
 'endelea': 'The "endelea" statement\n'
             '************************\n'
             '\n'
             '   endelea_stmt ::= "endelea"\n'
             '\n'
             '"endelea" may only occur syntactically nested kwenye a "for" ama '
             '"while"\n'
             'loop, but sio nested kwenye a function ama kundi definition within '
             'that\n'
             'loop.  It endeleas ukijumuisha the next cycle of the nearest enclosing '
             'loop.\n'
             '\n'
             'When "endelea" pitaes control out of a "try" statement ukijumuisha a\n'
             '"finally" clause, that "finally" clause ni executed before '
             'really\n'
             'starting the next loop cycle.\n',
 'conversions': 'Arithmetic conversions\n'
                '**********************\n'
                '\n'
                'When a description of an arithmetic operator below uses the '
                'phrase\n'
                '“the numeric arguments are converted to a common type,” this '
                'means\n'
                'that the operator implementation kila built-in types works kama '
                'follows:\n'
                '\n'
                '* If either argument ni a complex number, the other ni '
                'converted to\n'
                '  complex;\n'
                '\n'
                '* otherwise, ikiwa either argument ni a floating point number, '
                'the\n'
                '  other ni converted to floating point;\n'
                '\n'
                '* otherwise, both must be integers na no conversion ni '
                'necessary.\n'
                '\n'
                'Some additional rules apply kila certain operators (e.g., a '
                'string kama a\n'
                'left argument to the ‘%’ operator).  Extensions must define '
                'their own\n'
                'conversion behavior.\n',
 'customization': 'Basic customization\n'
                  '*******************\n'
                  '\n'
                  'object.__new__(cls[, ...])\n'
                  '\n'
                  '   Called to create a new instance of kundi *cls*.  '
                  '"__new__()" ni a\n'
                  '   static method (special-cased so you need sio declare it '
                  'as such)\n'
                  '   that takes the kundi of which an instance was requested '
                  'as its\n'
                  '   first argument.  The remaining arguments are those '
                  'pitaed to the\n'
                  '   object constructor expression (the call to the class).  '
                  'The return\n'
                  '   value of "__new__()" should be the new object instance '
                  '(usually an\n'
                  '   instance of *cls*).\n'
                  '\n'
                  '   Typical implementations create a new instance of the '
                  'kundi by\n'
                  '   invoking the superclass’s "__new__()" method using\n'
                  '   "super().__new__(cls[, ...])" ukijumuisha appropriate arguments '
                  'and then\n'
                  '   modifying the newly-created instance kama necessary before '
                  'returning\n'
                  '   it.\n'
                  '\n'
                  '   If "__new__()" ni invoked during object construction na '
                  'it returns\n'
                  '   an instance ama subkundi of *cls*, then the new '
                  'instance’s\n'
                  '   "__init__()" method will be invoked like '
                  '"__init__(self[, ...])",\n'
                  '   where *self* ni the new instance na the remaining '
                  'arguments are\n'
                  '   the same kama were pitaed to the object constructor.\n'
                  '\n'
                  '   If "__new__()" does sio rudisha an instance of *cls*, '
                  'then the new\n'
                  '   instance’s "__init__()" method will sio be invoked.\n'
                  '\n'
                  '   "__new__()" ni intended mainly to allow subclasses of '
                  'immutable\n'
                  '   types (like int, str, ama tuple) to customize instance '
                  'creation.  It\n'
                  '   ni also commonly overridden kwenye custom metaclasses kwenye '
                  'order to\n'
                  '   customize kundi creation.\n'
                  '\n'
                  'object.__init__(self[, ...])\n'
                  '\n'
                  '   Called after the instance has been created (by '
                  '"__new__()"), but\n'
                  '   before it ni returned to the caller.  The arguments are '
                  'those\n'
                  '   pitaed to the kundi constructor expression.  If a base '
                  'kundi has an\n'
                  '   "__init__()" method, the derived class’s "__init__()" '
                  'method, if\n'
                  '   any, must explicitly call it to ensure proper '
                  'initialization of the\n'
                  '   base kundi part of the instance; kila example:\n'
                  '   "super().__init__([args...])".\n'
                  '\n'
                  '   Because "__new__()" na "__init__()" work together kwenye '
                  'constructing\n'
                  '   objects ("__new__()" to create it, na "__init__()" to '
                  'customize\n'
                  '   it), no non-"Tupu" value may be returned by '
                  '"__init__()"; doing so\n'
                  '   will cause a "TypeError" to be raised at runtime.\n'
                  '\n'
                  'object.__del__(self)\n'
                  '\n'
                  '   Called when the instance ni about to be destroyed.  This '
                  'is also\n'
                  '   called a finalizer ama (improperly) a destructor.  If a '
                  'base class\n'
                  '   has a "__del__()" method, the derived class’s '
                  '"__del__()" method,\n'
                  '   ikiwa any, must explicitly call it to ensure proper '
                  'deletion of the\n'
                  '   base kundi part of the instance.\n'
                  '\n'
                  '   It ni possible (though sio recommended!) kila the '
                  '"__del__()" method\n'
                  '   to postpone destruction of the instance by creating a '
                  'new reference\n'
                  '   to it.  This ni called object *resurrection*.  It is\n'
                  '   implementation-dependent whether "__del__()" ni called a '
                  'second\n'
                  '   time when a resurrected object ni about to be destroyed; '
                  'the\n'
                  '   current *CPython* implementation only calls it once.\n'
                  '\n'
                  '   It ni sio guaranteed that "__del__()" methods are called '
                  'for\n'
                  '   objects that still exist when the interpreter exits.\n'
                  '\n'
                  '   Note: "toa x" doesn’t directly call "x.__del__()" — the '
                  'former\n'
                  '     decrements the reference count kila "x" by one, na the '
                  'latter is\n'
                  '     only called when "x"’s reference count reaches zero.\n'
                  '\n'
                  '   **CPython implementation detail:** It ni possible kila a '
                  'reference\n'
                  '   cycle to prevent the reference count of an object kutoka '
                  'going to\n'
                  '   zero.  In this case, the cycle will be later detected '
                  'and deleted\n'
                  '   by the *cyclic garbage collector*.  A common cause of '
                  'reference\n'
                  '   cycles ni when an exception has been caught kwenye a local '
                  'variable.\n'
                  '   The frame’s locals then reference the exception, which '
                  'references\n'
                  '   its own traceback, which references the locals of all '
                  'frames caught\n'
                  '   kwenye the traceback.\n'
                  '\n'
                  '   See also: Documentation kila the "gc" module.\n'
                  '\n'
                  '   Warning: Due to the precarious circumstances under '
                  'which\n'
                  '     "__del__()" methods are invoked, exceptions that occur '
                  'during\n'
                  '     their execution are ignored, na a warning ni printed '
                  'to\n'
                  '     "sys.stderr" instead. In particular:\n'
                  '\n'
                  '     * "__del__()" can be invoked when arbitrary code ni '
                  'being\n'
                  '       executed, including kutoka any arbitrary thread.  If '
                  '"__del__()"\n'
                  '       needs to take a lock ama invoke any other blocking '
                  'resource, it\n'
                  '       may deadlock kama the resource may already be taken by '
                  'the code\n'
                  '       that gets interrupted to execute "__del__()".\n'
                  '\n'
                  '     * "__del__()" can be executed during interpreter '
                  'shutdown.  As\n'
                  '       a consequence, the global variables it needs to '
                  'access\n'
                  '       (including other modules) may already have been '
                  'deleted ama set\n'
                  '       to "Tupu". Python guarantees that globals whose name '
                  'begins\n'
                  '       ukijumuisha a single underscore are deleted kutoka their '
                  'module before\n'
                  '       other globals are deleted; ikiwa no other references to '
                  'such\n'
                  '       globals exist, this may help kwenye assuring that '
                  'imported modules\n'
                  '       are still available at the time when the "__del__()" '
                  'method is\n'
                  '       called.\n'
                  '\n'
                  'object.__repr__(self)\n'
                  '\n'
                  '   Called by the "repr()" built-in function to compute the '
                  '“official”\n'
                  '   string representation of an object.  If at all possible, '
                  'this\n'
                  '   should look like a valid Python expression that could be '
                  'used to\n'
                  '   recreate an object ukijumuisha the same value (given an '
                  'appropriate\n'
                  '   environment).  If this ni sio possible, a string of the '
                  'form\n'
                  '   "<...some useful description...>" should be returned. '
                  'The return\n'
                  '   value must be a string object. If a kundi defines '
                  '"__repr__()" but\n'
                  '   sio "__str__()", then "__repr__()" ni also used when an '
                  '“informal”\n'
                  '   string representation of instances of that kundi ni '
                  'required.\n'
                  '\n'
                  '   This ni typically used kila debugging, so it ni important '
                  'that the\n'
                  '   representation ni information-rich na unambiguous.\n'
                  '\n'
                  'object.__str__(self)\n'
                  '\n'
                  '   Called by "str(object)" na the built-in functions '
                  '"format()" and\n'
                  '   "andika()" to compute the “informal” ama nicely printable '
                  'string\n'
                  '   representation of an object.  The rudisha value must be a '
                  'string\n'
                  '   object.\n'
                  '\n'
                  '   This method differs kutoka "object.__repr__()" kwenye that '
                  'there ni no\n'
                  '   expectation that "__str__()" rudisha a valid Python '
                  'expression: a\n'
                  '   more convenient ama concise representation can be used.\n'
                  '\n'
                  '   The default implementation defined by the built-in type '
                  '"object"\n'
                  '   calls "object.__repr__()".\n'
                  '\n'
                  'object.__bytes__(self)\n'
                  '\n'
                  '   Called by bytes to compute a byte-string representation '
                  'of an\n'
                  '   object. This should rudisha a "bytes" object.\n'
                  '\n'
                  'object.__format__(self, format_spec)\n'
                  '\n'
                  '   Called by the "format()" built-in function, na by '
                  'extension,\n'
                  '   evaluation of formatted string literals na the '
                  '"str.format()"\n'
                  '   method, to produce a “formatted” string representation '
                  'of an\n'
                  '   object. The *format_spec* argument ni a string that '
                  'contains a\n'
                  '   description of the formatting options desired. The '
                  'interpretation\n'
                  '   of the *format_spec* argument ni up to the type '
                  'implementing\n'
                  '   "__format__()", however most classes will either '
                  'delegate\n'
                  '   formatting to one of the built-in types, ama use a '
                  'similar\n'
                  '   formatting option syntax.\n'
                  '\n'
                  '   See Format Specification Mini-Language kila a description '
                  'of the\n'
                  '   standard formatting syntax.\n'
                  '\n'
                  '   The rudisha value must be a string object.\n'
                  '\n'
                  '   Changed kwenye version 3.4: The __format__ method of '
                  '"object" itself\n'
                  '   raises a "TypeError" ikiwa pitaed any non-empty string.\n'
                  '\n'
                  '   Changed kwenye version 3.7: "object.__format__(x, \'\')" ni '
                  'now\n'
                  '   equivalent to "str(x)" rather than "format(str(self), '
                  '\'\')".\n'
                  '\n'
                  'object.__lt__(self, other)\n'
                  'object.__le__(self, other)\n'
                  'object.__eq__(self, other)\n'
                  'object.__ne__(self, other)\n'
                  'object.__gt__(self, other)\n'
                  'object.__ge__(self, other)\n'
                  '\n'
                  '   These are the so-called “rich comparison” methods. The\n'
                  '   correspondence between operator symbols na method names '
                  'is as\n'
                  '   follows: "x<y" calls "x.__lt__(y)", "x<=y" calls '
                  '"x.__le__(y)",\n'
                  '   "x==y" calls "x.__eq__(y)", "x!=y" calls "x.__ne__(y)", '
                  '"x>y" calls\n'
                  '   "x.__gt__(y)", na "x>=y" calls "x.__ge__(y)".\n'
                  '\n'
                  '   A rich comparison method may rudisha the singleton '
                  '"NotImplemented"\n'
                  '   ikiwa it does sio implement the operation kila a given pair '
                  'of\n'
                  '   arguments. By convention, "Uongo" na "Kweli" are '
                  'returned kila a\n'
                  '   successful comparison. However, these methods can rudisha '
                  'any value,\n'
                  '   so ikiwa the comparison operator ni used kwenye a Boolean '
                  'context (e.g.,\n'
                  '   kwenye the condition of an "if" statement), Python will call '
                  '"bool()"\n'
                  '   on the value to determine ikiwa the result ni true ama '
                  'false.\n'
                  '\n'
                  '   By default, "__ne__()" delegates to "__eq__()" na '
                  'inverts the\n'
                  '   result unless it ni "NotImplemented".  There are no '
                  'other implied\n'
                  '   relationships among the comparison operators, kila '
                  'example, the\n'
                  '   truth of "(x<y ama x==y)" does sio imply "x<=y". To '
                  'automatically\n'
                  '   generate ordering operations kutoka a single root '
                  'operation, see\n'
                  '   "functools.total_ordering()".\n'
                  '\n'
                  '   See the paragraph on "__hash__()" kila some important '
                  'notes on\n'
                  '   creating *hashable* objects which support custom '
                  'comparison\n'
                  '   operations na are usable kama dictionary keys.\n'
                  '\n'
                  '   There are no swapped-argument versions of these methods '
                  '(to be used\n'
                  '   when the left argument does sio support the operation '
                  'but the right\n'
                  '   argument does); rather, "__lt__()" na "__gt__()" are '
                  'each other’s\n'
                  '   reflection, "__le__()" na "__ge__()" are each other’s '
                  'reflection,\n'
                  '   na "__eq__()" na "__ne__()" are their own reflection. '
                  'If the\n'
                  '   operands are of different types, na right operand’s '
                  'type ni a\n'
                  '   direct ama indirect subkundi of the left operand’s type, '
                  'the\n'
                  '   reflected method of the right operand has priority, '
                  'otherwise the\n'
                  '   left operand’s method has priority.  Virtual subclassing '
                  'is not\n'
                  '   considered.\n'
                  '\n'
                  'object.__hash__(self)\n'
                  '\n'
                  '   Called by built-in function "hash()" na kila operations '
                  'on members\n'
                  '   of hashed collections including "set", "frozenset", na '
                  '"dict".\n'
                  '   "__hash__()" should rudisha an integer. The only required '
                  'property\n'
                  '   ni that objects which compare equal have the same hash '
                  'value; it is\n'
                  '   advised to mix together the hash values of the '
                  'components of the\n'
                  '   object that also play a part kwenye comparison of objects by '
                  'packing\n'
                  '   them into a tuple na hashing the tuple. Example:\n'
                  '\n'
                  '      eleza __hash__(self):\n'
                  '          rudisha hash((self.name, self.nick, self.color))\n'
                  '\n'
                  '   Note: "hash()" truncates the value returned kutoka an '
                  'object’s\n'
                  '     custom "__hash__()" method to the size of a '
                  '"Py_ssize_t".  This\n'
                  '     ni typically 8 bytes on 64-bit builds na 4 bytes on '
                  '32-bit\n'
                  '     builds. If an object’s   "__hash__()" must '
                  'interoperate on builds\n'
                  '     of different bit sizes, be sure to check the width on '
                  'all\n'
                  '     supported builds.  An easy way to do this ni ukijumuisha '
                  '"python -c\n'
                  '     "agiza sys; andika(sys.hash_info.width)"".\n'
                  '\n'
                  '   If a kundi does sio define an "__eq__()" method it '
                  'should not\n'
                  '   define a "__hash__()" operation either; ikiwa it defines '
                  '"__eq__()"\n'
                  '   but sio "__hash__()", its instances will sio be usable '
                  'as items in\n'
                  '   hashable collections.  If a kundi defines mutable '
                  'objects and\n'
                  '   implements an "__eq__()" method, it should sio '
                  'implement\n'
                  '   "__hash__()", since the implementation of hashable '
                  'collections\n'
                  '   requires that a key’s hash value ni immutable (ikiwa the '
                  'object’s hash\n'
                  '   value changes, it will be kwenye the wrong hash bucket).\n'
                  '\n'
                  '   User-defined classes have "__eq__()" na "__hash__()" '
                  'methods by\n'
                  '   default; ukijumuisha them, all objects compare unequal (tatizo '
                  'with\n'
                  '   themselves) na "x.__hash__()" returns an appropriate '
                  'value such\n'
                  '   that "x == y" implies both that "x ni y" na "hash(x) == '
                  'hash(y)".\n'
                  '\n'
                  '   A kundi that overrides "__eq__()" na does sio define '
                  '"__hash__()"\n'
                  '   will have its "__hash__()" implicitly set to "Tupu".  '
                  'When the\n'
                  '   "__hash__()" method of a kundi ni "Tupu", instances of '
                  'the class\n'
                  '   will ashiria an appropriate "TypeError" when a program '
                  'attempts to\n'
                  '   retrieve their hash value, na will also be correctly '
                  'identified as\n'
                  '   unhashable when checking "isinstance(obj,\n'
                  '   collections.abc.Hashable)".\n'
                  '\n'
                  '   If a kundi that overrides "__eq__()" needs to retain '
                  'the\n'
                  '   implementation of "__hash__()" kutoka a parent class, the '
                  'interpreter\n'
                  '   must be told this explicitly by setting "__hash__ =\n'
                  '   <ParentClass>.__hash__".\n'
                  '\n'
                  '   If a kundi that does sio override "__eq__()" wishes to '
                  'suppress\n'
                  '   hash support, it should include "__hash__ = Tupu" kwenye the '
                  'class\n'
                  '   definition. A kundi which defines its own "__hash__()" '
                  'that\n'
                  '   explicitly raises a "TypeError" would be incorrectly '
                  'identified as\n'
                  '   hashable by an "isinstance(obj, '
                  'collections.abc.Hashable)" call.\n'
                  '\n'
                  '   Note: By default, the "__hash__()" values of str na '
                  'bytes\n'
                  '     objects are “salted” ukijumuisha an unpredictable random '
                  'value.\n'
                  '     Although they remain constant within an individual '
                  'Python\n'
                  '     process, they are sio predictable between repeated '
                  'invocations of\n'
                  '     Python.This ni intended to provide protection against '
                  'a denial-\n'
                  '     of-service caused by carefully-chosen inputs that '
                  'exploit the\n'
                  '     worst case performance of a dict insertion, O(n^2) '
                  'complexity.\n'
                  '     See '
                  'http://www.ocert.org/advisories/ocert-2011-003.html for\n'
                  '     details.Changing hash values affects the iteration '
                  'order of sets.\n'
                  '     Python has never made guarantees about this ordering '
                  '(and it\n'
                  '     typically varies between 32-bit na 64-bit builds).See '
                  'also\n'
                  '     "PYTHONHASHSEED".\n'
                  '\n'
                  '   Changed kwenye version 3.3: Hash randomization ni enabled by '
                  'default.\n'
                  '\n'
                  'object.__bool__(self)\n'
                  '\n'
                  '   Called to implement truth value testing na the built-in '
                  'operation\n'
                  '   "bool()"; should rudisha "Uongo" ama "Kweli".  When this '
                  'method ni not\n'
                  '   defined, "__len__()" ni called, ikiwa it ni defined, na '
                  'the object is\n'
                  '   considered true ikiwa its result ni nonzero.  If a kundi '
                  'defines\n'
                  '   neither "__len__()" nor "__bool__()", all its instances '
                  'are\n'
                  '   considered true.\n',
 'debugger': '"pdb" — The Python Debugger\n'
             '***************************\n'
             '\n'
             '**Source code:** Lib/pdb.py\n'
             '\n'
             '======================================================================\n'
             '\n'
             'The module "pdb" defines an interactive source code debugger '
             'for\n'
             'Python programs.  It supports setting (conditional) komapoints '
             'and\n'
             'single stepping at the source line level, inspection of stack '
             'frames,\n'
             'source code listing, na evaluation of arbitrary Python code kwenye '
             'the\n'
             'context of any stack frame.  It also supports post-mortem '
             'debugging\n'
             'and can be called under program control.\n'
             '\n'
             'The debugger ni extensible – it ni actually defined kama the '
             'class\n'
             '"Pdb". This ni currently undocumented but easily understood by '
             'reading\n'
             'the source.  The extension interface uses the modules "bdb" na '
             '"cmd".\n'
             '\n'
             'The debugger’s prompt ni "(Pdb)". Typical usage to run a program '
             'under\n'
             'control of the debugger is:\n'
             '\n'
             '   >>> agiza pdb\n'
             '   >>> agiza mymodule\n'
             "   >>> pdb.run('mymodule.test()')\n"
             '   > <string>(0)?()\n'
             '   (Pdb) endelea\n'
             '   > <string>(1)?()\n'
             '   (Pdb) endelea\n'
             "   NameError: 'spam'\n"
             '   > <string>(1)?()\n'
             '   (Pdb)\n'
             '\n'
             'Changed kwenye version 3.3: Tab-completion via the "readline" module '
             'is\n'
             'available kila commands na command arguments, e.g. the current '
             'global\n'
             'and local names are offered kama arguments of the "p" command.\n'
             '\n'
             '"pdb.py" can also be invoked kama a script to debug other '
             'scripts.  For\n'
             'example:\n'
             '\n'
             '   python3 -m pdb myscript.py\n'
             '\n'
             'When invoked kama a script, pdb will automatically enter '
             'post-mortem\n'
             'debugging ikiwa the program being debugged exits abnormally.  After '
             'post-\n'
             'mortem debugging (or after normal exit of the program), pdb '
             'will\n'
             'restart the program.  Automatic restarting preserves pdb’s state '
             '(such\n'
             'as komapoints) na kwenye most cases ni more useful than quitting '
             'the\n'
             'debugger upon program’s exit.\n'
             '\n'
             'New kwenye version 3.2: "pdb.py" now accepts a "-c" option that '
             'executes\n'
             'commands kama ikiwa given kwenye a ".pdbrc" file, see Debugger Commands.\n'
             '\n'
             'New kwenye version 3.7: "pdb.py" now accepts a "-m" option that '
             'execute\n'
             'modules similar to the way "python3 -m" does. As ukijumuisha a script, '
             'the\n'
             'debugger will pause execution just before the first line of the\n'
             'module.\n'
             '\n'
             'The typical usage to koma into the debugger kutoka a running '
             'program is\n'
             'to insert\n'
             '\n'
             '   agiza pdb; pdb.set_trace()\n'
             '\n'
             'at the location you want to koma into the debugger.  You can '
             'then\n'
             'step through the code following this statement, na endelea '
             'running\n'
             'without the debugger using the "endelea" command.\n'
             '\n'
             'New kwenye version 3.7: The built-in "komapoint()", when called '
             'with\n'
             'defaults, can be used instead of "agiza pdb; pdb.set_trace()".\n'
             '\n'
             'The typical usage to inspect a crashed program is:\n'
             '\n'
             '   >>> agiza pdb\n'
             '   >>> agiza mymodule\n'
             '   >>> mymodule.test()\n'
             '   Traceback (most recent call last):\n'
             '     File "<stdin>", line 1, kwenye <module>\n'
             '     File "./mymodule.py", line 4, kwenye test\n'
             '       test2()\n'
             '     File "./mymodule.py", line 3, kwenye test2\n'
             '       andika(spam)\n'
             '   NameError: spam\n'
             '   >>> pdb.pm()\n'
             '   > ./mymodule.py(3)test2()\n'
             '   -> andika(spam)\n'
             '   (Pdb)\n'
             '\n'
             'The module defines the following functions; each enters the '
             'debugger\n'
             'in a slightly different way:\n'
             '\n'
             'pdb.run(statement, globals=Tupu, locals=Tupu)\n'
             '\n'
             '   Execute the *statement* (given kama a string ama a code object) '
             'under\n'
             '   debugger control.  The debugger prompt appears before any '
             'code is\n'
             '   executed; you can set komapoints na type "endelea", ama you '
             'can\n'
             '   step through the statement using "step" ama "next" (all these\n'
             '   commands are explained below).  The optional *globals* na '
             '*locals*\n'
             '   arguments specify the environment kwenye which the code ni '
             'executed; by\n'
             '   default the dictionary of the module "__main__" ni used.  '
             '(See the\n'
             '   explanation of the built-in "exec()" ama "eval()" functions.)\n'
             '\n'
             'pdb.runeval(expression, globals=Tupu, locals=Tupu)\n'
             '\n'
             '   Evaluate the *expression* (given kama a string ama a code '
             'object)\n'
             '   under debugger control.  When "runeval()" returns, it returns '
             'the\n'
             '   value of the expression.  Otherwise this function ni similar '
             'to\n'
             '   "run()".\n'
             '\n'
             'pdb.runcall(function, *args, **kwds)\n'
             '\n'
             '   Call the *function* (a function ama method object, sio a '
             'string)\n'
             '   ukijumuisha the given arguments.  When "runcall()" returns, it '
             'returns\n'
             '   whatever the function call returned.  The debugger prompt '
             'appears\n'
             '   kama soon kama the function ni entered.\n'
             '\n'
             'pdb.set_trace(*, header=Tupu)\n'
             '\n'
             '   Enter the debugger at the calling stack frame.  This ni '
             'useful to\n'
             '   hard-code a komapoint at a given point kwenye a program, even ikiwa '
             'the\n'
             '   code ni sio otherwise being debugged (e.g. when an assertion\n'
             '   fails).  If given, *header* ni printed to the console just '
             'before\n'
             '   debugging begins.\n'
             '\n'
             '   Changed kwenye version 3.7: The keyword-only argument *header*.\n'
             '\n'
             'pdb.post_mortem(traceback=Tupu)\n'
             '\n'
             '   Enter post-mortem debugging of the given *traceback* object.  '
             'If no\n'
             '   *traceback* ni given, it uses the one of the exception that '
             'is\n'
             '   currently being handled (an exception must be being handled '
             'ikiwa the\n'
             '   default ni to be used).\n'
             '\n'
             'pdb.pm()\n'
             '\n'
             '   Enter post-mortem debugging of the traceback found in\n'
             '   "sys.last_traceback".\n'
             '\n'
             'The "run*" functions na "set_trace()" are aliases kila '
             'instantiating\n'
             'the "Pdb" kundi na calling the method of the same name.  If you '
             'want\n'
             'to access further features, you have to do this yourself:\n'
             '\n'
             "kundi pdb.Pdb(completekey='tab', stdin=Tupu, stdout=Tupu, "
             'skip=Tupu, nosigint=Uongo, readrc=Kweli)\n'
             '\n'
             '   "Pdb" ni the debugger class.\n'
             '\n'
             '   The *completekey*, *stdin* na *stdout* arguments are pitaed '
             'to the\n'
             '   underlying "cmd.Cmd" class; see the description there.\n'
             '\n'
             '   The *skip* argument, ikiwa given, must be an iterable of '
             'glob-style\n'
             '   module name patterns.  The debugger will sio step into frames '
             'that\n'
             '   originate kwenye a module that matches one of these patterns. '
             '[1]\n'
             '\n'
             '   By default, Pdb sets a handler kila the SIGINT signal (which '
             'is sent\n'
             '   when the user presses "Ctrl-C" on the console) when you give '
             'a\n'
             '   "endelea" command. This allows you to koma into the '
             'debugger\n'
             '   again by pressing "Ctrl-C".  If you want Pdb sio to touch '
             'the\n'
             '   SIGINT handler, set *nosigint* to true.\n'
             '\n'
             '   The *readrc* argument defaults to true na controls whether '
             'Pdb\n'
             '   will load .pdbrc files kutoka the filesystem.\n'
             '\n'
             '   Example call to enable tracing ukijumuisha *skip*:\n'
             '\n'
             "      agiza pdb; pdb.Pdb(skip=['django.*']).set_trace()\n"
             '\n'
             '   Raises an auditing event "pdb.Pdb" ukijumuisha no arguments.\n'
             '\n'
             '   New kwenye version 3.1: The *skip* argument.\n'
             '\n'
             '   New kwenye version 3.2: The *nosigint* argument.  Previously, a '
             'SIGINT\n'
             '   handler was never set by Pdb.\n'
             '\n'
             '   Changed kwenye version 3.6: The *readrc* argument.\n'
             '\n'
             '   run(statement, globals=Tupu, locals=Tupu)\n'
             '   runeval(expression, globals=Tupu, locals=Tupu)\n'
             '   runcall(function, *args, **kwds)\n'
             '   set_trace()\n'
             '\n'
             '      See the documentation kila the functions explained above.\n'
             '\n'
             '\n'
             'Debugger Commands\n'
             '=================\n'
             '\n'
             'The commands recognized by the debugger are listed below.  Most\n'
             'commands can be abbreviated to one ama two letters kama indicated; '
             'e.g.\n'
             '"h(elp)" means that either "h" ama "help" can be used to enter '
             'the help\n'
             'command (but sio "he" ama "hel", nor "H" ama "Help" ama "HELP").\n'
             'Arguments to commands must be separated by whitespace (spaces '
             'or\n'
             'tabs).  Optional arguments are enclosed kwenye square brackets '
             '("[]") in\n'
             'the command syntax; the square brackets must sio be typed.\n'
             'Alternatives kwenye the command syntax are separated by a vertical '
             'bar\n'
             '("|").\n'
             '\n'
             'Entering a blank line repeats the last command entered.  '
             'Exception: if\n'
             'the last command was a "list" command, the next 11 lines are '
             'listed.\n'
             '\n'
             'Commands that the debugger doesn’t recognize are assumed to be '
             'Python\n'
             'statements na are executed kwenye the context of the program being\n'
             'debugged.  Python statements can also be prefixed ukijumuisha an '
             'exclamation\n'
             'point ("!").  This ni a powerful way to inspect the program '
             'being\n'
             'debugged; it ni even possible to change a variable ama call a '
             'function.\n'
             'When an exception occurs kwenye such a statement, the exception name '
             'is\n'
             'printed but the debugger’s state ni sio changed.\n'
             '\n'
             'The debugger supports aliases.  Aliases can have parameters '
             'which\n'
             'allows one a certain level of adaptability to the context under\n'
             'examination.\n'
             '\n'
             'Multiple commands may be entered on a single line, separated by '
             '";;".\n'
             '(A single ";" ni sio used kama it ni the separator kila multiple '
             'commands\n'
             'in a line that ni pitaed to the Python parser.)  No intelligence '
             'is\n'
             'applied to separating the commands; the input ni split at the '
             'first\n'
             '";;" pair, even ikiwa it ni kwenye the middle of a quoted string.\n'
             '\n'
             'If a file ".pdbrc" exists kwenye the user’s home directory ama kwenye '
             'the\n'
             'current directory, it ni read kwenye na executed kama ikiwa it had been '
             'typed\n'
             'at the debugger prompt.  This ni particularly useful kila '
             'aliases.  If\n'
             'both files exist, the one kwenye the home directory ni read first '
             'and\n'
             'aliases defined there can be overridden by the local file.\n'
             '\n'
             'Changed kwenye version 3.2: ".pdbrc" can now contain commands that\n'
             'endelea debugging, such kama "endelea" ama "next".  Previously, '
             'these\n'
             'commands had no effect.\n'
             '\n'
             'h(elp) [command]\n'
             '\n'
             '   Without argument, andika the list of available commands.  With '
             'a\n'
             '   *command* kama argument, andika help about that command.  "help '
             'pdb"\n'
             '   displays the full documentation (the docstring of the "pdb"\n'
             '   module).  Since the *command* argument must be an identifier, '
             '"help\n'
             '   exec" must be entered to get help on the "!" command.\n'
             '\n'
             'w(here)\n'
             '\n'
             '   Print a stack trace, ukijumuisha the most recent frame at the '
             'bottom.  An\n'
             '   arrow indicates the current frame, which determines the '
             'context of\n'
             '   most commands.\n'
             '\n'
             'd(own) [count]\n'
             '\n'
             '   Move the current frame *count* (default one) levels down kwenye '
             'the\n'
             '   stack trace (to a newer frame).\n'
             '\n'
             'u(p) [count]\n'
             '\n'
             '   Move the current frame *count* (default one) levels up kwenye the '
             'stack\n'
             '   trace (to an older frame).\n'
             '\n'
             'b(reak) [([filename:]lineno | function) [, condition]]\n'
             '\n'
             '   With a *lineno* argument, set a koma there kwenye the current '
             'file.\n'
             '   With a *function* argument, set a koma at the first '
             'executable\n'
             '   statement within that function.  The line number may be '
             'prefixed\n'
             '   ukijumuisha a filename na a colon, to specify a komapoint kwenye '
             'another\n'
             '   file (probably one that hasn’t been loaded yet).  The file '
             'is\n'
             '   searched on "sys.path".  Note that each komapoint ni '
             'assigned a\n'
             '   number to which all the other komapoint commands refer.\n'
             '\n'
             '   If a second argument ni present, it ni an expression which '
             'must\n'
             '   evaluate to true before the komapoint ni honored.\n'
             '\n'
             '   Without argument, list all komas, including kila each '
             'komapoint,\n'
             '   the number of times that komapoint has been hit, the '
             'current\n'
             '   ignore count, na the associated condition ikiwa any.\n'
             '\n'
             'tkoma [([filename:]lineno | function) [, condition]]\n'
             '\n'
             '   Temporary komapoint, which ni removed automatically when it '
             'is\n'
             '   first hit. The arguments are the same kama kila "koma".\n'
             '\n'
             'cl(ear) [filename:lineno | bpnumber [bpnumber ...]]\n'
             '\n'
             '   With a *filename:lineno* argument, clear all the komapoints '
             'at\n'
             '   this line. With a space separated list of komapoint numbers, '
             'clear\n'
             '   those komapoints. Without argument, clear all komas (but '
             'first\n'
             '   ask confirmation).\n'
             '\n'
             'disable [bpnumber [bpnumber ...]]\n'
             '\n'
             '   Disable the komapoints given kama a space separated list of\n'
             '   komapoint numbers.  Disabling a komapoint means it cansio '
             'cause\n'
             '   the program to stop execution, but unlike clearing a '
             'komapoint, it\n'
             '   remains kwenye the list of komapoints na can be (re-)enabled.\n'
             '\n'
             'enable [bpnumber [bpnumber ...]]\n'
             '\n'
             '   Enable the komapoints specified.\n'
             '\n'
             'ignore bpnumber [count]\n'
             '\n'
             '   Set the ignore count kila the given komapoint number.  If '
             'count is\n'
             '   omitted, the ignore count ni set to 0.  A komapoint becomes '
             'active\n'
             '   when the ignore count ni zero.  When non-zero, the count is\n'
             '   decremented each time the komapoint ni reached na the '
             'komapoint\n'
             '   ni sio disabled na any associated condition evaluates to '
             'true.\n'
             '\n'
             'condition bpnumber [condition]\n'
             '\n'
             '   Set a new *condition* kila the komapoint, an expression which '
             'must\n'
             '   evaluate to true before the komapoint ni honored.  If '
             '*condition*\n'
             '   ni absent, any existing condition ni removed; i.e., the '
             'komapoint\n'
             '   ni made unconditional.\n'
             '\n'
             'commands [bpnumber]\n'
             '\n'
             '   Specify a list of commands kila komapoint number *bpnumber*.  '
             'The\n'
             '   commands themselves appear on the following lines.  Type a '
             'line\n'
             '   containing just "end" to terminate the commands. An example:\n'
             '\n'
             '      (Pdb) commands 1\n'
             '      (com) p some_variable\n'
             '      (com) end\n'
             '      (Pdb)\n'
             '\n'
             '   To remove all commands kutoka a komapoint, type "commands" '
             'and\n'
             '   follow it immediately ukijumuisha "end"; that is, give no commands.\n'
             '\n'
             '   With no *bpnumber* argument, "commands" refers to the last\n'
             '   komapoint set.\n'
             '\n'
             '   You can use komapoint commands to start your program up '
             'again.\n'
             '   Simply use the "endelea" command, ama "step", ama any other '
             'command\n'
             '   that resumes execution.\n'
             '\n'
             '   Specifying any command resuming execution (currently '
             '"endelea",\n'
             '   "step", "next", "return", "jump", "quit" na their '
             'abbreviations)\n'
             '   terminates the command list (as ikiwa that command was '
             'immediately\n'
             '   followed by end). This ni because any time you resume '
             'execution\n'
             '   (even ukijumuisha a simple next ama step), you may encounter another\n'
             '   komapoint—which could have its own command list, leading to\n'
             '   ambiguities about which list to execute.\n'
             '\n'
             '   If you use the ‘silent’ command kwenye the command list, the '
             'usual\n'
             '   message about stopping at a komapoint ni sio printed.  This '
             'may be\n'
             '   desirable kila komapoints that are to andika a specific '
             'message and\n'
             '   then endelea.  If none of the other commands andika anything, '
             'you\n'
             '   see no sign that the komapoint was reached.\n'
             '\n'
             's(tep)\n'
             '\n'
             '   Execute the current line, stop at the first possible '
             'occasion\n'
             '   (either kwenye a function that ni called ama on the next line kwenye '
             'the\n'
             '   current function).\n'
             '\n'
             'n(ext)\n'
             '\n'
             '   Continue execution until the next line kwenye the current '
             'function is\n'
             '   reached ama it returns.  (The difference between "next" na '
             '"step"\n'
             '   ni that "step" stops inside a called function, wakati "next"\n'
             '   executes called functions at (nearly) full speed, only '
             'stopping at\n'
             '   the next line kwenye the current function.)\n'
             '\n'
             'unt(il) [lineno]\n'
             '\n'
             '   Without argument, endelea execution until the line ukijumuisha a '
             'number\n'
             '   greater than the current one ni reached.\n'
             '\n'
             '   With a line number, endelea execution until a line ukijumuisha a '
             'number\n'
             '   greater ama equal to that ni reached.  In both cases, also '
             'stop when\n'
             '   the current frame returns.\n'
             '\n'
             '   Changed kwenye version 3.2: Allow giving an explicit line '
             'number.\n'
             '\n'
             'r(eturn)\n'
             '\n'
             '   Continue execution until the current function returns.\n'
             '\n'
             'c(ont(inue))\n'
             '\n'
             '   Continue execution, only stop when a komapoint ni '
             'encountered.\n'
             '\n'
             'j(ump) lineno\n'
             '\n'
             '   Set the next line that will be executed.  Only available kwenye '
             'the\n'
             '   bottom-most frame.  This lets you jump back na execute code '
             'again,\n'
             '   ama jump forward to skip code that you don’t want to run.\n'
             '\n'
             '   It should be noted that sio all jumps are allowed – kila '
             'instance it\n'
             '   ni sio possible to jump into the middle of a "for" loop ama '
             'out of a\n'
             '   "finally" clause.\n'
             '\n'
             'l(ist) [first[, last]]\n'
             '\n'
             '   List source code kila the current file.  Without arguments, '
             'list 11\n'
             '   lines around the current line ama endelea the previous '
             'listing.\n'
             '   With "." kama argument, list 11 lines around the current line.  '
             'With\n'
             '   one argument, list 11 lines around at that line.  With two\n'
             '   arguments, list the given range; ikiwa the second argument ni '
             'less\n'
             '   than the first, it ni interpreted kama a count.\n'
             '\n'
             '   The current line kwenye the current frame ni indicated by "->".  '
             'If an\n'
             '   exception ni being debugged, the line where the exception '
             'was\n'
             '   originally raised ama propagated ni indicated by ">>", ikiwa it '
             'differs\n'
             '   kutoka the current line.\n'
             '\n'
             '   New kwenye version 3.2: The ">>" marker.\n'
             '\n'
             'll | longlist\n'
             '\n'
             '   List all source code kila the current function ama frame.\n'
             '   Interesting lines are marked kama kila "list".\n'
             '\n'
             '   New kwenye version 3.2.\n'
             '\n'
             'a(rgs)\n'
             '\n'
             '   Print the argument list of the current function.\n'
             '\n'
             'p expression\n'
             '\n'
             '   Evaluate the *expression* kwenye the current context na andika '
             'its\n'
             '   value.\n'
             '\n'
             '   Note: "andika()" can also be used, but ni sio a debugger '
             'command —\n'
             '     this executes the Python "andika()" function.\n'
             '\n'
             'pp expression\n'
             '\n'
             '   Like the "p" command, tatizo the value of the expression ni '
             'pretty-\n'
             '   printed using the "pprint" module.\n'
             '\n'
             'whatis expression\n'
             '\n'
             '   Print the type of the *expression*.\n'
             '\n'
             'source expression\n'
             '\n'
             '   Try to get source code kila the given object na display it.\n'
             '\n'
             '   New kwenye version 3.2.\n'
             '\n'
             'display [expression]\n'
             '\n'
             '   Display the value of the expression ikiwa it changed, each time\n'
             '   execution stops kwenye the current frame.\n'
             '\n'
             '   Without expression, list all display expressions kila the '
             'current\n'
             '   frame.\n'
             '\n'
             '   New kwenye version 3.2.\n'
             '\n'
             'undisplay [expression]\n'
             '\n'
             '   Do sio display the expression any more kwenye the current frame.\n'
             '   Without expression, clear all display expressions kila the '
             'current\n'
             '   frame.\n'
             '\n'
             '   New kwenye version 3.2.\n'
             '\n'
             'interact\n'
             '\n'
             '   Start an interactive interpreter (using the "code" module) '
             'whose\n'
             '   global namespace contains all the (global na local) names '
             'found in\n'
             '   the current scope.\n'
             '\n'
             '   New kwenye version 3.2.\n'
             '\n'
             'alias [name [command]]\n'
             '\n'
             '   Create an alias called *name* that executes *command*.  The '
             'command\n'
             '   must *not* be enclosed kwenye quotes.  Replaceable parameters can '
             'be\n'
             '   indicated by "%1", "%2", na so on, wakati "%*" ni replaced by '
             'all\n'
             '   the parameters. If no command ni given, the current alias '
             'for\n'
             '   *name* ni shown. If no arguments are given, all aliases are '
             'listed.\n'
             '\n'
             '   Aliases may be nested na can contain anything that can be '
             'legally\n'
             '   typed at the pdb prompt.  Note that internal pdb commands '
             '*can* be\n'
             '   overridden by aliases.  Such a command ni then hidden until '
             'the\n'
             '   alias ni removed.  Aliasing ni recursively applied to the '
             'first\n'
             '   word of the command line; all other words kwenye the line are '
             'left\n'
             '   alone.\n'
             '\n'
             '   As an example, here are two useful aliases (especially when '
             'placed\n'
             '   kwenye the ".pdbrc" file):\n'
             '\n'
             '      # Print instance variables (usage "pi classInst")\n'
             '      alias pi kila k kwenye %1.__dict__.keys(): '
             'andika("%1.",k,"=",%1.__dict__[k])\n'
             '      # Print instance variables kwenye self\n'
             '      alias ps pi self\n'
             '\n'
             'unalias name\n'
             '\n'
             '   Delete the specified alias.\n'
             '\n'
             '! statement\n'
             '\n'
             '   Execute the (one-line) *statement* kwenye the context of the '
             'current\n'
             '   stack frame. The exclamation point can be omitted unless the '
             'first\n'
             '   word of the statement resembles a debugger command.  To set '
             'a\n'
             '   global variable, you can prefix the assignment command ukijumuisha '
             'a\n'
             '   "global" statement on the same line, e.g.:\n'
             '\n'
             "      (Pdb) global list_options; list_options = ['-l']\n"
             '      (Pdb)\n'
             '\n'
             'run [args ...]\n'
             'restart [args ...]\n'
             '\n'
             '   Restart the debugged Python program.  If an argument ni '
             'supplied,\n'
             '   it ni split ukijumuisha "shlex" na the result ni used kama the new\n'
             '   "sys.argv". History, komapoints, actions na debugger '
             'options are\n'
             '   preserved. "restart" ni an alias kila "run".\n'
             '\n'
             'q(uit)\n'
             '\n'
             '   Quit kutoka the debugger.  The program being executed ni '
             'aborted.\n'
             '\n'
             '-[ Footnotes ]-\n'
             '\n'
             '[1] Whether a frame ni considered to originate kwenye a certain '
             'module\n'
             '    ni determined by the "__name__" kwenye the frame globals.\n',
 'del': 'The "del" statement\n'
        '*******************\n'
        '\n'
        '   del_stmt ::= "del" target_list\n'
        '\n'
        'Deletion ni recursively defined very similar to the way assignment '
        'is\n'
        'defined. Rather than spelling it out kwenye full details, here are some\n'
        'hints.\n'
        '\n'
        'Deletion of a target list recursively deletes each target, kutoka left\n'
        'to right.\n'
        '\n'
        'Deletion of a name removes the binding of that name kutoka the local '
        'or\n'
        'global namespace, depending on whether the name occurs kwenye a "global"\n'
        'statement kwenye the same code block.  If the name ni unbound, a\n'
        '"NameError" exception will be raised.\n'
        '\n'
        'Deletion of attribute references, subscriptions na slicings ni '
        'pitaed\n'
        'to the primary object involved; deletion of a slicing ni kwenye general\n'
        'equivalent to assignment of an empty slice of the right type (but '
        'even\n'
        'this ni determined by the sliced object).\n'
        '\n'
        'Changed kwenye version 3.2: Previously it was illegal to delete a name\n'
        'kutoka the local namespace ikiwa it occurs kama a free variable kwenye a nested\n'
        'block.\n',
 'dict': 'Dictionary displays\n'
         '*******************\n'
         '\n'
         'A dictionary display ni a possibly empty series of key/datum pairs\n'
         'enclosed kwenye curly braces:\n'
         '\n'
         '   dict_display       ::= "{" [key_datum_list | dict_comprehension] '
         '"}"\n'
         '   key_datum_list     ::= key_datum ("," key_datum)* [","]\n'
         '   key_datum          ::= expression ":" expression | "**" or_expr\n'
         '   dict_comprehension ::= expression ":" expression comp_for\n'
         '\n'
         'A dictionary display tumas a new dictionary object.\n'
         '\n'
         'If a comma-separated sequence of key/datum pairs ni given, they are\n'
         'evaluated kutoka left to right to define the entries of the '
         'dictionary:\n'
         'each key object ni used kama a key into the dictionary to store the\n'
         'corresponding datum.  This means that you can specify the same key\n'
         'multiple times kwenye the key/datum list, na the final dictionary’s '
         'value\n'
         'kila that key will be the last one given.\n'
         '\n'
         'A double asterisk "**" denotes *dictionary unpacking*. Its operand\n'
         'must be a *mapping*.  Each mapping item ni added to the new\n'
         'dictionary.  Later values replace values already set by earlier\n'
         'key/datum pairs na earlier dictionary unpackings.\n'
         '\n'
         'New kwenye version 3.5: Unpacking into dictionary displays, originally\n'
         'proposed by **PEP 448**.\n'
         '\n'
         'A dict comprehension, kwenye contrast to list na set comprehensions,\n'
         'needs two expressions separated ukijumuisha a colon followed by the usual\n'
         '“for” na “if” clauses. When the comprehension ni run, the '
         'resulting\n'
         'key na value elements are inserted kwenye the new dictionary kwenye the '
         'order\n'
         'they are produced.\n'
         '\n'
         'Restrictions on the types of the key values are listed earlier in\n'
         'section The standard type hierarchy.  (To summarize, the key type\n'
         'should be *hashable*, which excludes all mutable objects.)  Clashes\n'
         'between duplicate keys are sio detected; the last datum (textually\n'
         'rightmost kwenye the display) stored kila a given key value prevails.\n'
         '\n'
         'Changed kwenye version 3.8: Prior to Python 3.8, kwenye dict '
         'comprehensions,\n'
         'the evaluation order of key na value was sio well-defined.  In\n'
         'CPython, the value was evaluated before the key.  Starting ukijumuisha '
         '3.8,\n'
         'the key ni evaluated before the value, kama proposed by **PEP 572**.\n',
 'dynamic-features': 'Interaction ukijumuisha dynamic features\n'
                     '*********************************\n'
                     '\n'
                     'Name resolution of free variables occurs at runtime, sio '
                     'at compile\n'
                     'time. This means that the following code will andika 42:\n'
                     '\n'
                     '   i = 10\n'
                     '   eleza f():\n'
                     '       andika(i)\n'
                     '   i = 42\n'
                     '   f()\n'
                     '\n'
                     'The "eval()" na "exec()" functions do sio have access '
                     'to the full\n'
                     'environment kila resolving names.  Names may be resolved '
                     'in the local\n'
                     'and global namespaces of the caller.  Free variables are '
                     'sio resolved\n'
                     'in the nearest enclosing namespace, but kwenye the global '
                     'namespace.  [1]\n'
                     'The "exec()" na "eval()" functions have optional '
                     'arguments to\n'
                     'override the global na local namespace.  If only one '
                     'namespace is\n'
                     'specified, it ni used kila both.\n',
 'else': 'The "if" statement\n'
         '******************\n'
         '\n'
         'The "if" statement ni used kila conditional execution:\n'
         '\n'
         '   if_stmt ::= "if" expression ":" suite\n'
         '               ("elif" expression ":" suite)*\n'
         '               ["else" ":" suite]\n'
         '\n'
         'It selects exactly one of the suites by evaluating the expressions '
         'one\n'
         'by one until one ni found to be true (see section Boolean '
         'operations\n'
         'kila the definition of true na false); then that suite ni executed\n'
         '(and no other part of the "if" statement ni executed ama evaluated).\n'
         'If all expressions are false, the suite of the "else" clause, if\n'
         'present, ni executed.\n',
 'exceptions': 'Exceptions\n'
               '**********\n'
               '\n'
               'Exceptions are a means of komaing out of the normal flow of '
               'control\n'
               'of a code block kwenye order to handle errors ama other '
               'exceptional\n'
               'conditions.  An exception ni *raised* at the point where the '
               'error is\n'
               'detected; it may be *handled* by the surrounding code block ama '
               'by any\n'
               'code block that directly ama indirectly invoked the code block '
               'where\n'
               'the error occurred.\n'
               '\n'
               'The Python interpreter raises an exception when it detects a '
               'run-time\n'
               'error (such kama division by zero).  A Python program can also\n'
               'explicitly ashiria an exception ukijumuisha the "raise" statement. '
               'Exception\n'
               'handlers are specified ukijumuisha the "try" … "except" statement.  '
               'The\n'
               '"finally" clause of such a statement can be used to specify '
               'cleanup\n'
               'code which does sio handle the exception, but ni executed '
               'whether an\n'
               'exception occurred ama haiko kwenye the preceding code.\n'
               '\n'
               'Python uses the “termination” motoa of error handling: an '
               'exception\n'
               'handler can find out what happened na endelea execution at '
               'an outer\n'
               'level, but it cansio repair the cause of the error na retry '
               'the\n'
               'failing operation (tatizo by re-entering the offending piece '
               'of code\n'
               'kutoka the top).\n'
               '\n'
               'When an exception ni sio handled at all, the interpreter '
               'terminates\n'
               'execution of the program, ama returns to its interactive main '
               'loop.  In\n'
               'either case, it prints a stack traceback, tatizo when the '
               'exception is\n'
               '"SystemExit".\n'
               '\n'
               'Exceptions are identified by kundi instances.  The "except" '
               'clause is\n'
               'selected depending on the kundi of the instance: it must '
               'reference the\n'
               'kundi of the instance ama a base kundi thereof.  The instance '
               'can be\n'
               'received by the handler na can carry additional information '
               'about the\n'
               'exceptional condition.\n'
               '\n'
               'Note: Exception messages are sio part of the Python API.  '
               'Their\n'
               '  contents may change kutoka one version of Python to the next '
               'without\n'
               '  warning na should sio be relied on by code which will run '
               'under\n'
               '  multiple versions of the interpreter.\n'
               '\n'
               'See also the description of the "try" statement kwenye section The '
               'try\n'
               'statement na "raise" statement kwenye section The ashiria '
               'statement.\n'
               '\n'
               '-[ Footnotes ]-\n'
               '\n'
               '[1] This limitation occurs because the code that ni executed '
               'by\n'
               '    these operations ni sio available at the time the module '
               'is\n'
               '    compiled.\n',
 'execmodel': 'Execution model\n'
              '***************\n'
              '\n'
              '\n'
              'Structure of a program\n'
              '======================\n'
              '\n'
              'A Python program ni constructed kutoka code blocks. A *block* ni '
              'a piece\n'
              'of Python program text that ni executed kama a unit. The '
              'following are\n'
              'blocks: a module, a function body, na a kundi definition. '
              'Each\n'
              'command typed interactively ni a block.  A script file (a file '
              'given\n'
              'as standard input to the interpreter ama specified kama a command '
              'line\n'
              'argument to the interpreter) ni a code block.  A script command '
              '(a\n'
              'command specified on the interpreter command line ukijumuisha the '
              '"-c"\n'
              'option) ni a code block.  The string argument pitaed to the '
              'built-in\n'
              'functions "eval()" na "exec()" ni a code block.\n'
              '\n'
              'A code block ni executed kwenye an *execution frame*.  A frame '
              'contains\n'
              'some administrative information (used kila debugging) na '
              'determines\n'
              'where na how execution endeleas after the code block’s '
              'execution has\n'
              'completed.\n'
              '\n'
              '\n'
              'Naming na binding\n'
              '==================\n'
              '\n'
              '\n'
              'Binding of names\n'
              '----------------\n'
              '\n'
              '*Names* refer to objects.  Names are introduced by name '
              'binding\n'
              'operations.\n'
              '\n'
              'The following constructs bind names: formal parameters to '
              'functions,\n'
              '"import" statements, kundi na function definitions (these bind '
              'the\n'
              'kundi ama function name kwenye the defining block), na targets that '
              'are\n'
              'identifiers ikiwa occurring kwenye an assignment, "for" loop header, '
              'or after\n'
              '"as" kwenye a "with" statement ama "except" clause. The "import" '
              'statement\n'
              'of the form "kutoka ... agiza *" binds all names defined kwenye the\n'
              'imported module, tatizo those beginning ukijumuisha an underscore.  '
              'This form\n'
              'may only be used at the module level.\n'
              '\n'
              'A target occurring kwenye a "del" statement ni also considered '
              'bound for\n'
              'this purpose (though the actual semantics are to unbind the '
              'name).\n'
              '\n'
              'Each assignment ama agiza statement occurs within a block '
              'defined by a\n'
              'kundi ama function definition ama at the module level (the '
              'top-level\n'
              'code block).\n'
              '\n'
              'If a name ni bound kwenye a block, it ni a local variable of that '
              'block,\n'
              'unless declared kama "nonlocal" ama "global".  If a name ni bound '
              'at the\n'
              'module level, it ni a global variable.  (The variables of the '
              'module\n'
              'code block are local na global.)  If a variable ni used kwenye a '
              'code\n'
              'block but sio defined there, it ni a *free variable*.\n'
              '\n'
              'Each occurrence of a name kwenye the program text refers to the '
              '*binding*\n'
              'of that name established by the following name resolution '
              'rules.\n'
              '\n'
              '\n'
              'Resolution of names\n'
              '-------------------\n'
              '\n'
              'A *scope* defines the visibility of a name within a block.  If '
              'a local\n'
              'variable ni defined kwenye a block, its scope includes that block.  '
              'If the\n'
              'definition occurs kwenye a function block, the scope extends to any '
              'blocks\n'
              'contained within the defining one, unless a contained block '
              'introduces\n'
              'a different binding kila the name.\n'
              '\n'
              'When a name ni used kwenye a code block, it ni resolved using the '
              'nearest\n'
              'enclosing scope.  The set of all such scopes visible to a code '
              'block\n'
              'is called the block’s *environment*.\n'
              '\n'
              'When a name ni sio found at all, a "NameError" exception ni '
              'raised. If\n'
              'the current scope ni a function scope, na the name refers to a '
              'local\n'
              'variable that has sio yet been bound to a value at the point '
              'where the\n'
              'name ni used, an "UnboundLocalError" exception ni raised.\n'
              '"UnboundLocalError" ni a subkundi of "NameError".\n'
              '\n'
              'If a name binding operation occurs anywhere within a code '
              'block, all\n'
              'uses of the name within the block are treated kama references to '
              'the\n'
              'current block.  This can lead to errors when a name ni used '
              'within a\n'
              'block before it ni bound.  This rule ni subtle.  Python lacks\n'
              'declarations na allows name binding operations to occur '
              'anywhere\n'
              'within a code block.  The local variables of a code block can '
              'be\n'
              'determined by scanning the entire text of the block kila name '
              'binding\n'
              'operations.\n'
              '\n'
              'If the "global" statement occurs within a block, all uses of '
              'the name\n'
              'specified kwenye the statement refer to the binding of that name kwenye '
              'the\n'
              'top-level namespace.  Names are resolved kwenye the top-level '
              'namespace by\n'
              'searching the global namespace, i.e. the namespace of the '
              'module\n'
              'containing the code block, na the builtins namespace, the '
              'namespace\n'
              'of the module "builtins".  The global namespace ni searched '
              'first.  If\n'
              'the name ni sio found there, the builtins namespace ni '
              'searched.  The\n'
              '"global" statement must precede all uses of the name.\n'
              '\n'
              'The "global" statement has the same scope kama a name binding '
              'operation\n'
              'in the same block.  If the nearest enclosing scope kila a free '
              'variable\n'
              'contains a global statement, the free variable ni treated kama a '
              'global.\n'
              '\n'
              'The "nonlocal" statement causes corresponding names to refer '
              'to\n'
              'previously bound variables kwenye the nearest enclosing function '
              'scope.\n'
              '"SyntaxError" ni raised at compile time ikiwa the given name does '
              'not\n'
              'exist kwenye any enclosing function scope.\n'
              '\n'
              'The namespace kila a module ni automatically created the first '
              'time a\n'
              'module ni imported.  The main module kila a script ni always '
              'called\n'
              '"__main__".\n'
              '\n'
              'Class definition blocks na arguments to "exec()" na "eval()" '
              'are\n'
              'special kwenye the context of name resolution. A kundi definition '
              'is an\n'
              'executable statement that may use na define names. These '
              'references\n'
              'follow the normal rules kila name resolution ukijumuisha an exception '
              'that\n'
              'unbound local variables are looked up kwenye the global namespace. '
              'The\n'
              'namespace of the kundi definition becomes the attribute '
              'dictionary of\n'
              'the class. The scope of names defined kwenye a kundi block ni '
              'limited to\n'
              'the kundi block; it does sio extend to the code blocks of '
              'methods –\n'
              'this includes comprehensions na generator expressions since '
              'they are\n'
              'implemented using a function scope.  This means that the '
              'following\n'
              'will fail:\n'
              '\n'
              '   kundi A:\n'
              '       a = 42\n'
              '       b = list(a + i kila i kwenye range(10))\n'
              '\n'
              '\n'
              'Builtins na restricted execution\n'
              '---------------------------------\n'
              '\n'
              '**CPython implementation detail:** Users should sio touch\n'
              '"__builtins__"; it ni strictly an implementation detail.  '
              'Users\n'
              'wanting to override values kwenye the builtins namespace should '
              '"import"\n'
              'the "builtins" module na modify its attributes appropriately.\n'
              '\n'
              'The builtins namespace associated ukijumuisha the execution of a code '
              'block\n'
              'is actually found by looking up the name "__builtins__" kwenye its '
              'global\n'
              'namespace; this should be a dictionary ama a module (in the '
              'latter case\n'
              'the module’s dictionary ni used).  By default, when kwenye the '
              '"__main__"\n'
              'module, "__builtins__" ni the built-in module "builtins"; when '
              'in any\n'
              'other module, "__builtins__" ni an alias kila the dictionary of '
              'the\n'
              '"builtins" module itself.\n'
              '\n'
              '\n'
              'Interaction ukijumuisha dynamic features\n'
              '---------------------------------\n'
              '\n'
              'Name resolution of free variables occurs at runtime, sio at '
              'compile\n'
              'time. This means that the following code will andika 42:\n'
              '\n'
              '   i = 10\n'
              '   eleza f():\n'
              '       andika(i)\n'
              '   i = 42\n'
              '   f()\n'
              '\n'
              'The "eval()" na "exec()" functions do sio have access to the '
              'full\n'
              'environment kila resolving names.  Names may be resolved kwenye the '
              'local\n'
              'and global namespaces of the caller.  Free variables are sio '
              'resolved\n'
              'in the nearest enclosing namespace, but kwenye the global '
              'namespace.  [1]\n'
              'The "exec()" na "eval()" functions have optional arguments to\n'
              'override the global na local namespace.  If only one namespace '
              'is\n'
              'specified, it ni used kila both.\n'
              '\n'
              '\n'
              'Exceptions\n'
              '==========\n'
              '\n'
              'Exceptions are a means of komaing out of the normal flow of '
              'control\n'
              'of a code block kwenye order to handle errors ama other exceptional\n'
              'conditions.  An exception ni *raised* at the point where the '
              'error is\n'
              'detected; it may be *handled* by the surrounding code block ama '
              'by any\n'
              'code block that directly ama indirectly invoked the code block '
              'where\n'
              'the error occurred.\n'
              '\n'
              'The Python interpreter raises an exception when it detects a '
              'run-time\n'
              'error (such kama division by zero).  A Python program can also\n'
              'explicitly ashiria an exception ukijumuisha the "raise" statement. '
              'Exception\n'
              'handlers are specified ukijumuisha the "try" … "except" statement.  '
              'The\n'
              '"finally" clause of such a statement can be used to specify '
              'cleanup\n'
              'code which does sio handle the exception, but ni executed '
              'whether an\n'
              'exception occurred ama haiko kwenye the preceding code.\n'
              '\n'
              'Python uses the “termination” motoa of error handling: an '
              'exception\n'
              'handler can find out what happened na endelea execution at an '
              'outer\n'
              'level, but it cansio repair the cause of the error na retry '
              'the\n'
              'failing operation (tatizo by re-entering the offending piece of '
              'code\n'
              'kutoka the top).\n'
              '\n'
              'When an exception ni sio handled at all, the interpreter '
              'terminates\n'
              'execution of the program, ama returns to its interactive main '
              'loop.  In\n'
              'either case, it prints a stack traceback, tatizo when the '
              'exception is\n'
              '"SystemExit".\n'
              '\n'
              'Exceptions are identified by kundi instances.  The "except" '
              'clause is\n'
              'selected depending on the kundi of the instance: it must '
              'reference the\n'
              'kundi of the instance ama a base kundi thereof.  The instance '
              'can be\n'
              'received by the handler na can carry additional information '
              'about the\n'
              'exceptional condition.\n'
              '\n'
              'Note: Exception messages are sio part of the Python API.  '
              'Their\n'
              '  contents may change kutoka one version of Python to the next '
              'without\n'
              '  warning na should sio be relied on by code which will run '
              'under\n'
              '  multiple versions of the interpreter.\n'
              '\n'
              'See also the description of the "try" statement kwenye section The '
              'try\n'
              'statement na "raise" statement kwenye section The ashiria '
              'statement.\n'
              '\n'
              '-[ Footnotes ]-\n'
              '\n'
              '[1] This limitation occurs because the code that ni executed '
              'by\n'
              '    these operations ni sio available at the time the module '
              'is\n'
              '    compiled.\n',
 'exprlists': 'Expression lists\n'
              '****************\n'
              '\n'
              '   expression_list    ::= expression ("," expression)* [","]\n'
              '   starred_list       ::= starred_item ("," starred_item)* '
              '[","]\n'
              '   starred_expression ::= expression | (starred_item ",")* '
              '[starred_item]\n'
              '   starred_item       ::= expression | "*" or_expr\n'
              '\n'
              'Except when part of a list ama set display, an expression list\n'
              'containing at least one comma tumas a tuple.  The length of '
              'the tuple\n'
              'is the number of expressions kwenye the list.  The expressions are\n'
              'evaluated kutoka left to right.\n'
              '\n'
              'An asterisk "*" denotes *iterable unpacking*.  Its operand must '
              'be an\n'
              '*iterable*.  The iterable ni expanded into a sequence of items, '
              'which\n'
              'are included kwenye the new tuple, list, ama set, at the site of '
              'the\n'
              'unpacking.\n'
              '\n'
              'New kwenye version 3.5: Iterable unpacking kwenye expression lists, '
              'originally\n'
              'proposed by **PEP 448**.\n'
              '\n'
              'The trailing comma ni required only to create a single tuple '
              '(a.k.a. a\n'
              '*singleton*); it ni optional kwenye all other cases.  A single '
              'expression\n'
              'without a trailing comma doesn’t create a tuple, but rather '
              'tumas the\n'
              'value of that expression. (To create an empty tuple, use an '
              'empty pair\n'
              'of parentheses: "()".)\n',
 'floating': 'Floating point literals\n'
             '***********************\n'
             '\n'
             'Floating point literals are described by the following lexical\n'
             'definitions:\n'
             '\n'
             '   floatnumber   ::= pointfloat | exponentfloat\n'
             '   pointfloat    ::= [digitpart] fraction | digitpart "."\n'
             '   exponentfloat ::= (digitpart | pointfloat) exponent\n'
             '   digitpart     ::= digit (["_"] digit)*\n'
             '   fraction      ::= "." digitpart\n'
             '   exponent      ::= ("e" | "E") ["+" | "-"] digitpart\n'
             '\n'
             'Note that the integer na exponent parts are always interpreted '
             'using\n'
             'radix 10. For example, "077e010" ni legal, na denotes the same '
             'number\n'
             'as "77e10". The allowed range of floating point literals is\n'
             'implementation-dependent.  As kwenye integer literals, underscores '
             'are\n'
             'supported kila digit grouping.\n'
             '\n'
             'Some examples of floating point literals:\n'
             '\n'
             '   3.14    10.    .001    1e100    3.14e-10    0e0    '
             '3.14_15_93\n'
             '\n'
             'Changed kwenye version 3.6: Underscores are now allowed kila '
             'grouping\n'
             'purposes kwenye literals.\n',
 'for': 'The "for" statement\n'
        '*******************\n'
        '\n'
        'The "for" statement ni used to iterate over the elements of a '
        'sequence\n'
        '(such kama a string, tuple ama list) ama other iterable object:\n'
        '\n'
        '   for_stmt ::= "for" target_list "in" expression_list ":" suite\n'
        '                ["else" ":" suite]\n'
        '\n'
        'The expression list ni evaluated once; it should tuma an iterable\n'
        'object.  An iterator ni created kila the result of the\n'
        '"expression_list".  The suite ni then executed once kila each item\n'
        'provided by the iterator, kwenye the order returned by the iterator.  '
        'Each\n'
        'item kwenye turn ni assigned to the target list using the standard rules\n'
        'kila assignments (see Assignment statements), na then the suite is\n'
        'executed.  When the items are exhausted (which ni immediately when '
        'the\n'
        'sequence ni empty ama an iterator raises a "StopIteration" '
        'exception),\n'
        'the suite kwenye the "else" clause, ikiwa present, ni executed, na the '
        'loop\n'
        'terminates.\n'
        '\n'
        'A "koma" statement executed kwenye the first suite terminates the loop\n'
        'without executing the "else" clause’s suite.  A "endelea" statement\n'
        'executed kwenye the first suite skips the rest of the suite na '
        'endeleas\n'
        'ukijumuisha the next item, ama ukijumuisha the "else" clause ikiwa there ni no next\n'
        'item.\n'
        '\n'
        'The for-loop makes assignments to the variables kwenye the target list.\n'
        'This overwrites all previous assignments to those variables '
        'including\n'
        'those made kwenye the suite of the for-loop:\n'
        '\n'
        '   kila i kwenye range(10):\n'
        '       andika(i)\n'
        '       i = 5             # this will sio affect the for-loop\n'
        '                         # because i will be overwritten ukijumuisha the '
        'next\n'
        '                         # index kwenye the range\n'
        '\n'
        'Names kwenye the target list are sio deleted when the loop ni finished,\n'
        'but ikiwa the sequence ni empty, they will sio have been assigned to at\n'
        'all by the loop.  Hint: the built-in function "range()" returns an\n'
        'iterator of integers suitable to emulate the effect of Pascal’s "kila '
        'i\n'
        ':= a to b do"; e.g., "list(range(3))" returns the list "[0, 1, 2]".\n'
        '\n'
        'Note: There ni a subtlety when the sequence ni being modified by the\n'
        '  loop (this can only occur kila mutable sequences, e.g. lists).  An\n'
        '  internal counter ni used to keep track of which item ni used next,\n'
        '  na this ni incremented on each iteration.  When this counter has\n'
        '  reached the length of the sequence the loop terminates.  This '
        'means\n'
        '  that ikiwa the suite deletes the current (or a previous) item kutoka '
        'the\n'
        '  sequence, the next item will be skipped (since it gets the index '
        'of\n'
        '  the current item which has already been treated).  Likewise, ikiwa '
        'the\n'
        '  suite inserts an item kwenye the sequence before the current item, the\n'
        '  current item will be treated again the next time through the loop.\n'
        '  This can lead to nasty bugs that can be avoided by making a\n'
        '  temporary copy using a slice of the whole sequence, e.g.,\n'
        '\n'
        '     kila x kwenye a[:]:\n'
        '         ikiwa x < 0: a.remove(x)\n',
 'formatstrings': 'Format String Syntax\n'
                  '********************\n'
                  '\n'
                  'The "str.format()" method na the "Formatter" kundi share '
                  'the same\n'
                  'syntax kila format strings (although kwenye the case of '
                  '"Formatter",\n'
                  'subclasses can define their own format string syntax).  The '
                  'syntax is\n'
                  'related to that of formatted string literals, but there '
                  'are\n'
                  'differences.\n'
                  '\n'
                  'Format strings contain “replacement fields” surrounded by '
                  'curly braces\n'
                  '"{}". Anything that ni sio contained kwenye braces ni '
                  'considered literal\n'
                  'text, which ni copied unchanged to the output.  If you need '
                  'to include\n'
                  'a brace character kwenye the literal text, it can be escaped by '
                  'doubling:\n'
                  '"{{" na "}}".\n'
                  '\n'
                  'The grammar kila a replacement field ni kama follows:\n'
                  '\n'
                  '      replacement_field ::= "{" [field_name] ["!" '
                  'conversion] [":" format_spec] "}"\n'
                  '      field_name        ::= arg_name ("." attribute_name | '
                  '"[" element_index "]")*\n'
                  '      arg_name          ::= [identifier | digit+]\n'
                  '      attribute_name    ::= identifier\n'
                  '      element_index     ::= digit+ | index_string\n'
                  '      index_string      ::= <any source character tatizo '
                  '"]"> +\n'
                  '      conversion        ::= "r" | "s" | "a"\n'
                  '      format_spec       ::= <described kwenye the next '
                  'section>\n'
                  '\n'
                  'In less formal terms, the replacement field can start ukijumuisha '
                  'a\n'
                  '*field_name* that specifies the object whose value ni to be '
                  'formatted\n'
                  'and inserted into the output instead of the replacement '
                  'field. The\n'
                  '*field_name* ni optionally followed by a  *conversion* '
                  'field, which is\n'
                  'preceded by an exclamation point "\'!\'", na a '
                  '*format_spec*, which is\n'
                  'preceded by a colon "\':\'".  These specify a non-default '
                  'format kila the\n'
                  'replacement value.\n'
                  '\n'
                  'See also the Format Specification Mini-Language section.\n'
                  '\n'
                  'The *field_name* itself begins ukijumuisha an *arg_name* that ni '
                  'either a\n'
                  'number ama a keyword.  If it’s a number, it refers to a '
                  'positional\n'
                  'argument, na ikiwa it’s a keyword, it refers to a named '
                  'keyword\n'
                  'argument.  If the numerical arg_names kwenye a format string '
                  'are 0, 1, 2,\n'
                  '… kwenye sequence, they can all be omitted (sio just some) na '
                  'the numbers\n'
                  '0, 1, 2, … will be automatically inserted kwenye that order. '
                  'Because\n'
                  '*arg_name* ni sio quote-delimited, it ni sio possible to '
                  'specify\n'
                  'arbitrary dictionary keys (e.g., the strings "\'10\'" ama '
                  '"\':-]\'") within\n'
                  'a format string. The *arg_name* can be followed by any '
                  'number of index\n'
                  'or attribute expressions. An expression of the form '
                  '"\'.name\'" selects\n'
                  'the named attribute using "getattr()", wakati an expression '
                  'of the form\n'
                  '"\'[index]\'" does an index lookup using "__getitem__()".\n'
                  '\n'
                  'Changed kwenye version 3.1: The positional argument specifiers '
                  'can be\n'
                  'omitted kila "str.format()", so "\'{} {}\'.format(a, b)" ni '
                  'equivalent to\n'
                  '"\'{0} {1}\'.format(a, b)".\n'
                  '\n'
                  'Changed kwenye version 3.4: The positional argument specifiers '
                  'can be\n'
                  'omitted kila "Formatter".\n'
                  '\n'
                  'Some simple format string examples:\n'
                  '\n'
                  '   "First, thou shalt count to {0}"  # References first '
                  'positional argument\n'
                  '   "Bring me a {}"                   # Implicitly '
                  'references the first positional argument\n'
                  '   "From {} to {}"                   # Same kama "From {0} to '
                  '{1}"\n'
                  '   "My quest ni {name}"              # References keyword '
                  "argument 'name'\n"
                  '   "Weight kwenye tons {0.weight}"       # \'weight\' attribute '
                  'of first positional arg\n'
                  '   "Units destroyed: {players[0]}"   # First element of '
                  "keyword argument 'players'.\n"
                  '\n'
                  'The *conversion* field causes a type coercion before '
                  'formatting.\n'
                  'Normally, the job of formatting a value ni done by the '
                  '"__format__()"\n'
                  'method of the value itself.  However, kwenye some cases it ni '
                  'desirable to\n'
                  'force a type to be formatted kama a string, overriding its '
                  'own\n'
                  'definition of formatting.  By converting the value to a '
                  'string before\n'
                  'calling "__format__()", the normal formatting logic ni '
                  'bypitaed.\n'
                  '\n'
                  'Three conversion flags are currently supported: "\'!s\'" '
                  'which calls\n'
                  '"str()" on the value, "\'!r\'" which calls "repr()" na '
                  '"\'!a\'" which\n'
                  'calls "ascii()".\n'
                  '\n'
                  'Some examples:\n'
                  '\n'
                  '   "Harold\'s a clever {0!s}"        # Calls str() on the '
                  'argument first\n'
                  '   "Bring out the holy {name!r}"    # Calls repr() on the '
                  'argument first\n'
                  '   "More {!a}"                      # Calls ascii() on the '
                  'argument first\n'
                  '\n'
                  'The *format_spec* field contains a specification of how the '
                  'value\n'
                  'should be presented, including such details kama field width, '
                  'alignment,\n'
                  'padding, decimal precision na so on.  Each value type can '
                  'define its\n'
                  'own “formatting mini-language” ama interpretation of the '
                  '*format_spec*.\n'
                  '\n'
                  'Most built-in types support a common formatting '
                  'mini-language, which\n'
                  'is described kwenye the next section.\n'
                  '\n'
                  'A *format_spec* field can also include nested replacement '
                  'fields\n'
                  'within it. These nested replacement fields may contain a '
                  'field name,\n'
                  'conversion flag na format specification, but deeper '
                  'nesting ni not\n'
                  'allowed.  The replacement fields within the format_spec '
                  'are\n'
                  'substituted before the *format_spec* string ni interpreted. '
                  'This\n'
                  'allows the formatting of a value to be dynamically '
                  'specified.\n'
                  '\n'
                  'See the Format examples section kila some examples.\n'
                  '\n'
                  '\n'
                  'Format Specification Mini-Language\n'
                  '==================================\n'
                  '\n'
                  '“Format specifications” are used within replacement fields '
                  'contained\n'
                  'within a format string to define how individual values are '
                  'presented\n'
                  '(see Format String Syntax na Formatted string literals). '
                  'They can\n'
                  'also be pitaed directly to the built-in "format()" '
                  'function.  Each\n'
                  'formattable type may define how the format specification ni '
                  'to be\n'
                  'interpreted.\n'
                  '\n'
                  'Most built-in types implement the following options kila '
                  'format\n'
                  'specifications, although some of the formatting options are '
                  'only\n'
                  'supported by the numeric types.\n'
                  '\n'
                  'A general convention ni that an empty format string ("""") '
                  'produces\n'
                  'the same result kama ikiwa you had called "str()" on the value. '
                  'A non-empty\n'
                  'format string typically modifies the result.\n'
                  '\n'
                  'The general form of a *standard format specifier* is:\n'
                  '\n'
                  '   format_spec     ::= '
                  '[[fill]align][sign][#][0][width][grouping_option][.precision][type]\n'
                  '   fill            ::= <any character>\n'
                  '   align           ::= "<" | ">" | "=" | "^"\n'
                  '   sign            ::= "+" | "-" | " "\n'
                  '   width           ::= digit+\n'
                  '   grouping_option ::= "_" | ","\n'
                  '   precision       ::= digit+\n'
                  '   type            ::= "b" | "c" | "d" | "e" | "E" | "f" | '
                  '"F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"\n'
                  '\n'
                  'If a valid *align* value ni specified, it can be preceded '
                  'by a *fill*\n'
                  'character that can be any character na defaults to a space '
                  'if\n'
                  'omitted. It ni sio possible to use a literal curly brace '
                  '(“"{"” or\n'
                  '“"}"”) kama the *fill* character kwenye a formatted string '
                  'literal ama when\n'
                  'using the "str.format()" method.  However, it ni possible '
                  'to insert a\n'
                  'curly brace ukijumuisha a nested replacement field.  This '
                  'limitation doesn’t\n'
                  'affect the "format()" function.\n'
                  '\n'
                  'The meaning of the various alignment options ni kama '
                  'follows:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Option    | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '|===========|============================================================|\n'
                  '   | "\'<\'"     | Forces the field to be left-aligned '
                  'within the available   |\n'
                  '   |           | space (this ni the default kila most '
                  'objects).              |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'>\'"     | Forces the field to be right-aligned '
                  'within the available  |\n'
                  '   |           | space (this ni the default kila '
                  'numbers).                   |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'=\'"     | Forces the padding to be placed after '
                  'the sign (ikiwa any)    |\n'
                  '   |           | but before the digits.  This ni used kila '
                  'printing fields   |\n'
                  '   |           | kwenye the form ‘+000000120’. This alignment '
                  'option ni only    |\n'
                  '   |           | valid kila numeric types.  It becomes the '
                  'default when ‘0’  |\n'
                  '   |           | immediately precedes the field '
                  'width.                      |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'^\'"     | Forces the field to be centered within '
                  'the available       |\n'
                  '   |           | '
                  'space.                                                     '
                  '|\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  'Note that unless a minimum field width ni defined, the '
                  'field width\n'
                  'will always be the same size kama the data to fill it, so '
                  'that the\n'
                  'alignment option has no meaning kwenye this case.\n'
                  '\n'
                  'The *sign* option ni only valid kila number types, na can '
                  'be one of\n'
                  'the following:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Option    | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '|===========|============================================================|\n'
                  '   | "\'+\'"     | indicates that a sign should be used kila '
                  'both positive kama  |\n'
                  '   |           | well kama negative '
                  'numbers.                                  |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'-\'"     | indicates that a sign should be used '
                  'only kila negative     |\n'
                  '   |           | numbers (this ni the default '
                  'behavior).                    |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | space     | indicates that a leading space should be '
                  'used on positive  |\n'
                  '   |           | numbers, na a minus sign on negative '
                  'numbers.             |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  'The "\'#\'" option causes the “alternate form” to be used '
                  'kila the\n'
                  'conversion.  The alternate form ni defined differently kila '
                  'different\n'
                  'types.  This option ni only valid kila integer, float, '
                  'complex and\n'
                  'Decimal types. For integers, when binary, octal, ama '
                  'hexadecimal output\n'
                  'is used, this option adds the prefix respective "\'0b\'", '
                  '"\'0o\'", or\n'
                  '"\'0x\'" to the output value. For floats, complex na '
                  'Decimal the\n'
                  'alternate form causes the result of the conversion to '
                  'always contain a\n'
                  'decimal-point character, even ikiwa no digits follow it. '
                  'Normally, a\n'
                  'decimal-point character appears kwenye the result of these '
                  'conversions\n'
                  'only ikiwa a digit follows it. In addition, kila "\'g\'" na '
                  '"\'G\'"\n'
                  'conversions, trailing zeros are sio removed kutoka the '
                  'result.\n'
                  '\n'
                  'The "\',\'" option signals the use of a comma kila a '
                  'thousands separator.\n'
                  'For a locale aware separator, use the "\'n\'" integer '
                  'presentation type\n'
                  'instead.\n'
                  '\n'
                  'Changed kwenye version 3.1: Added the "\',\'" option (see also '
                  '**PEP 378**).\n'
                  '\n'
                  'The "\'_\'" option signals the use of an underscore kila a '
                  'thousands\n'
                  'separator kila floating point presentation types na kila '
                  'integer\n'
                  'presentation type "\'d\'".  For integer presentation types '
                  '"\'b\'", "\'o\'",\n'
                  '"\'x\'", na "\'X\'", underscores will be inserted every 4 '
                  'digits.  For\n'
                  'other presentation types, specifying this option ni an '
                  'error.\n'
                  '\n'
                  'Changed kwenye version 3.6: Added the "\'_\'" option (see also '
                  '**PEP 515**).\n'
                  '\n'
                  '*width* ni a decimal integer defining the minimum field '
                  'width.  If not\n'
                  'specified, then the field width will be determined by the '
                  'content.\n'
                  '\n'
                  'When no explicit alignment ni given, preceding the *width* '
                  'field by a\n'
                  'zero ("\'0\'") character enables sign-aware zero-padding '
                  'kila numeric\n'
                  'types.  This ni equivalent to a *fill* character of "\'0\'" '
                  'ukijumuisha an\n'
                  '*alignment* type of "\'=\'".\n'
                  '\n'
                  'The *precision* ni a decimal number indicating how many '
                  'digits should\n'
                  'be displayed after the decimal point kila a floating point '
                  'value\n'
                  'formatted ukijumuisha "\'f\'" na "\'F\'", ama before na after the '
                  'decimal point\n'
                  'kila a floating point value formatted ukijumuisha "\'g\'" ama '
                  '"\'G\'".  For non-\n'
                  'number types the field indicates the maximum field size - '
                  'in other\n'
                  'words, how many characters will be used kutoka the field '
                  'content. The\n'
                  '*precision* ni sio allowed kila integer values.\n'
                  '\n'
                  'Finally, the *type* determines how the data should be '
                  'presented.\n'
                  '\n'
                  'The available string presentation types are:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Type      | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '|===========|============================================================|\n'
                  '   | "\'s\'"     | String format. This ni the default type '
                  'kila strings na    |\n'
                  '   |           | may be '
                  'omitted.                                            |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Tupu      | The same kama '
                  '"\'s\'".                                         |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  'The available integer presentation types are:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Type      | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '|===========|============================================================|\n'
                  '   | "\'b\'"     | Binary format. Outputs the number kwenye '
                  'base 2.               |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'c\'"     | Character. Converts the integer to the '
                  'corresponding       |\n'
                  '   |           | unicode character before '
                  'printing.                         |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'d\'"     | Decimal Integer. Outputs the number kwenye '
                  'base 10.            |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'o\'"     | Octal format. Outputs the number kwenye base '
                  '8.                |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'x\'"     | Hex format. Outputs the number kwenye base '
                  '16, using lower-    |\n'
                  '   |           | case letters kila the digits above '
                  '9.                       |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'X\'"     | Hex format. Outputs the number kwenye base '
                  '16, using upper-    |\n'
                  '   |           | case letters kila the digits above '
                  '9.                       |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'n\'"     | Number. This ni the same kama "\'d\'", '
                  'tatizo that it uses the |\n'
                  '   |           | current locale setting to insert the '
                  'appropriate number    |\n'
                  '   |           | separator '
                  'characters.                                      |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Tupu      | The same kama '
                  '"\'d\'".                                         |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  'In addition to the above presentation types, integers can '
                  'be formatted\n'
                  'ukijumuisha the floating point presentation types listed below '
                  '(tatizo "\'n\'"\n'
                  'and "Tupu"). When doing so, "float()" ni used to convert '
                  'the integer\n'
                  'to a floating point number before formatting.\n'
                  '\n'
                  'The available presentation types kila floating point na '
                  'decimal values\n'
                  'are:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Type      | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '|===========|============================================================|\n'
                  '   | "\'e\'"     | Exponent notation. Prints the number kwenye '
                  'scientific         |\n'
                  '   |           | notation using the letter ‘e’ to indicate '
                  'the exponent.    |\n'
                  '   |           | The default precision ni '
                  '"6".                              |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'E\'"     | Exponent notation. Same kama "\'e\'" '
                  'tatizo it uses an upper   |\n'
                  '   |           | case ‘E’ kama the separator '
                  'character.                       |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'f\'"     | Fixed-point notation. Displays the '
                  'number kama a fixed-point |\n'
                  '   |           | number. The default precision ni '
                  '"6".                      |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'F\'"     | Fixed-point notation. Same kama "\'f\'", '
                  'but converts "nan" to |\n'
                  '   |           | "NAN" na "inf" to '
                  '"INF".                                  |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'g\'"     | General format.  For a given precision '
                  '"p >= 1", this      |\n'
                  '   |           | rounds the number to "p" significant '
                  'digits na then       |\n'
                  '   |           | formats the result kwenye either fixed-point '
                  'format ama kwenye      |\n'
                  '   |           | scientific notation, depending on its '
                  'magnitude.  The      |\n'
                  '   |           | precise rules are kama follows: suppose that '
                  'the result      |\n'
                  '   |           | formatted ukijumuisha presentation type "\'e\'" '
                  'and precision "p-1" |\n'
                  '   |           | would have exponent "exp".  Then, ikiwa "m <= '
                  'exp < p", where |\n'
                  '   |           | "m" ni -4 kila floats na -6 kila '
                  '"Decimals", the number ni  |\n'
                  '   |           | formatted ukijumuisha presentation type "\'f\'" '
                  'and precision       |\n'
                  '   |           | "p-1-exp".  Otherwise, the number ni '
                  'formatted ukijumuisha        |\n'
                  '   |           | presentation type "\'e\'" na precision '
                  '"p-1". In both cases |\n'
                  '   |           | insignificant trailing zeros are removed '
                  'kutoka the          |\n'
                  '   |           | significand, na the decimal point ni also '
                  'removed ikiwa      |\n'
                  '   |           | there are no remaining digits following '
                  'it, unless the     |\n'
                  '   |           | "\'#\'" option ni used.  Positive na '
                  'negative infinity,     |\n'
                  '   |           | positive na negative zero, na nans, are '
                  'formatted kama     |\n'
                  '   |           | "inf", "-inf", "0", "-0" na "nan" '
                  'respectively,           |\n'
                  '   |           | regardless of the precision.  A precision '
                  'of "0" ni        |\n'
                  '   |           | treated kama equivalent to a precision of '
                  '"1". The default   |\n'
                  '   |           | precision ni '
                  '"6".                                          |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'G\'"     | General format. Same kama "\'g\'" tatizo '
                  'switches to "\'E\'" ikiwa  |\n'
                  '   |           | the number gets too large. The '
                  'representations of infinity |\n'
                  '   |           | na NaN are uppercased, '
                  'too.                               |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'n\'"     | Number. This ni the same kama "\'g\'", '
                  'tatizo that it uses the |\n'
                  '   |           | current locale setting to insert the '
                  'appropriate number    |\n'
                  '   |           | separator '
                  'characters.                                      |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'%\'"     | Percentage. Multiplies the number by 100 '
                  'and displays kwenye   |\n'
                  '   |           | fixed ("\'f\'") format, followed by a '
                  'percent sign.          |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Tupu      | Similar to "\'g\'", tatizo that '
                  'fixed-point notation, when   |\n'
                  '   |           | used, has at least one digit past the '
                  'decimal point. The   |\n'
                  '   |           | default precision ni kama high kama needed to '
                  'represent the    |\n'
                  '   |           | particular value. The overall effect ni to '
                  'match the       |\n'
                  '   |           | output of "str()" kama altered by the other '
                  'format           |\n'
                  '   |           | '
                  'modifiers.                                                 '
                  '|\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  '\n'
                  'Format examples\n'
                  '===============\n'
                  '\n'
                  'This section contains examples of the "str.format()" syntax '
                  'and\n'
                  'comparison ukijumuisha the old "%"-formatting.\n'
                  '\n'
                  'In most of the cases the syntax ni similar to the old '
                  '"%"-formatting,\n'
                  'ukijumuisha the addition of the "{}" na ukijumuisha ":" used instead of '
                  '"%". For\n'
                  'example, "\'%03.2f\'" can be translated to "\'{:03.2f}\'".\n'
                  '\n'
                  'The new format syntax also supports new na different '
                  'options, shown\n'
                  'in the following examples.\n'
                  '\n'
                  'Accessing arguments by position:\n'
                  '\n'
                  "   >>> '{0}, {1}, {2}'.format('a', 'b', 'c')\n"
                  "   'a, b, c'\n"
                  "   >>> '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only\n"
                  "   'a, b, c'\n"
                  "   >>> '{2}, {1}, {0}'.format('a', 'b', 'c')\n"
                  "   'c, b, a'\n"
                  "   >>> '{2}, {1}, {0}'.format(*'abc')      # unpacking "
                  'argument sequence\n'
                  "   'c, b, a'\n"
                  "   >>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' "
                  'indices can be repeated\n'
                  "   'abracadabra'\n"
                  '\n'
                  'Accessing arguments by name:\n'
                  '\n'
                  "   >>> 'Coordinates: {latitude}, "
                  "{longitude}'.format(latitude='37.24N', "
                  "longitude='-115.81W')\n"
                  "   'Coordinates: 37.24N, -115.81W'\n"
                  "   >>> coord = {'latitude': '37.24N', 'longitude': "
                  "'-115.81W'}\n"
                  "   >>> 'Coordinates: {latitude}, "
                  "{longitude}'.format(**coord)\n"
                  "   'Coordinates: 37.24N, -115.81W'\n"
                  '\n'
                  'Accessing arguments’ attributes:\n'
                  '\n'
                  '   >>> c = 3-5j\n'
                  "   >>> ('The complex number {0} ni formed kutoka the real "
                  "part {0.real} '\n"
                  "   ...  'and the imaginary part {0.imag}.').format(c)\n"
                  "   'The complex number (3-5j) ni formed kutoka the real part "
                  "3.0 na the imaginary part -5.0.'\n"
                  '   >>> kundi Point:\n'
                  '   ...     eleza __init__(self, x, y):\n'
                  '   ...         self.x, self.y = x, y\n'
                  '   ...     eleza __str__(self):\n'
                  "   ...         rudisha 'Point({self.x}, "
                  "{self.y})'.format(self=self)\n"
                  '   ...\n'
                  '   >>> str(Point(4, 2))\n'
                  "   'Point(4, 2)'\n"
                  '\n'
                  'Accessing arguments’ items:\n'
                  '\n'
                  '   >>> coord = (3, 5)\n'
                  "   >>> 'X: {0[0]};  Y: {0[1]}'.format(coord)\n"
                  "   'X: 3;  Y: 5'\n"
                  '\n'
                  'Replacing "%s" na "%r":\n'
                  '\n'
                  '   >>> "repr() shows quotes: {!r}; str() doesn\'t: '
                  '{!s}".format(\'test1\', \'test2\')\n'
                  '   "repr() shows quotes: \'test1\'; str() doesn\'t: test2"\n'
                  '\n'
                  'Aligning the text na specifying a width:\n'
                  '\n'
                  "   >>> '{:<30}'.format('left aligned')\n"
                  "   'left aligned                  '\n"
                  "   >>> '{:>30}'.format('right aligned')\n"
                  "   '                 right aligned'\n"
                  "   >>> '{:^30}'.format('centered')\n"
                  "   '           centered           '\n"
                  "   >>> '{:*^30}'.format('centered')  # use '*' kama a fill "
                  'char\n'
                  "   '***********centered***********'\n"
                  '\n'
                  'Replacing "%+f", "%-f", na "% f" na specifying a sign:\n'
                  '\n'
                  "   >>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it "
                  'always\n'
                  "   '+3.140000; -3.140000'\n"
                  "   >>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space "
                  'kila positive numbers\n'
                  "   ' 3.140000; -3.140000'\n"
                  "   >>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the "
                  "minus -- same kama '{:f}; {:f}'\n"
                  "   '3.140000; -3.140000'\n"
                  '\n'
                  'Replacing "%x" na "%o" na converting the value to '
                  'different bases:\n'
                  '\n'
                  '   >>> # format also supports binary numbers\n'
                  '   >>> "int: {0:d};  hex: {0:x};  oct: {0:o};  bin: '
                  '{0:b}".format(42)\n'
                  "   'int: 42;  hex: 2a;  oct: 52;  bin: 101010'\n"
                  '   >>> # ukijumuisha 0x, 0o, ama 0b kama prefix:\n'
                  '   >>> "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: '
                  '{0:#b}".format(42)\n'
                  "   'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'\n"
                  '\n'
                  'Using the comma kama a thousands separator:\n'
                  '\n'
                  "   >>> '{:,}'.format(1234567890)\n"
                  "   '1,234,567,890'\n"
                  '\n'
                  'Expressing a percentage:\n'
                  '\n'
                  '   >>> points = 19\n'
                  '   >>> total = 22\n'
                  "   >>> 'Correct answers: {:.2%}'.format(points/total)\n"
                  "   'Correct answers: 86.36%'\n"
                  '\n'
                  'Using type-specific formatting:\n'
                  '\n'
                  '   >>> agiza datetime\n'
                  '   >>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)\n'
                  "   >>> '{:%Y-%m-%d %H:%M:%S}'.format(d)\n"
                  "   '2010-07-04 12:15:58'\n"
                  '\n'
                  'Nesting arguments na more complex examples:\n'
                  '\n'
                  "   >>> kila align, text kwenye zip('<^>', ['left', 'center', "
                  "'right']):\n"
                  "   ...     '{0:{fill}{align}16}'.format(text, fill=align, "
                  'align=align)\n'
                  '   ...\n'
                  "   'left<<<<<<<<<<<<'\n"
                  "   '^^^^^center^^^^^'\n"
                  "   '>>>>>>>>>>>right'\n"
                  '   >>>\n'
                  '   >>> octets = [192, 168, 0, 1]\n'
                  "   >>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)\n"
                  "   'C0A80001'\n"
                  '   >>> int(_, 16)\n'
                  '   3232235521\n'
                  '   >>>\n'
                  '   >>> width = 5\n'
                  '   >>> kila num kwenye range(5,12): \n'
                  "   ...     kila base kwenye 'dXob':\n"
                  "   ...         andika('{0:{width}{base}}'.format(num, "
                  "base=base, width=width), end=' ')\n"
                  '   ...     andika()\n'
                  '   ...\n'
                  '       5     5     5   101\n'
                  '       6     6     6   110\n'
                  '       7     7     7   111\n'
                  '       8     8    10  1000\n'
                  '       9     9    11  1001\n'
                  '      10     A    12  1010\n'
                  '      11     B    13  1011\n',
 'function': 'Function definitions\n'
             '********************\n'
             '\n'
             'A function definition defines a user-defined function object '
             '(see\n'
             'section The standard type hierarchy):\n'
             '\n'
             '   funceleza                   ::= [decorators] "def" funcname "(" '
             '[parameter_list] ")"\n'
             '               ["->" expression] ":" suite\n'
             '   decorators                ::= decorator+\n'
             '   decorator                 ::= "@" dotted_name ["(" '
             '[argument_list [","]] ")"] NEWLINE\n'
             '   dotted_name               ::= identifier ("." identifier)*\n'
             '   parameter_list            ::= defparameter ("," '
             'defparameter)* "," "/" ["," [parameter_list_no_posonly]]\n'
             '                        | parameter_list_no_posonly\n'
             '   parameter_list_no_posonly ::= defparameter ("," '
             'defparameter)* ["," [parameter_list_starargs]]\n'
             '                                 | parameter_list_starargs\n'
             '   parameter_list_starargs   ::= "*" [parameter] ("," '
             'defparameter)* ["," ["**" parameter [","]]]\n'
             '                               | "**" parameter [","]\n'
             '   parameter                 ::= identifier [":" expression]\n'
             '   defparameter              ::= parameter ["=" expression]\n'
             '   funcname                  ::= identifier\n'
             '\n'
             'A function definition ni an executable statement.  Its execution '
             'binds\n'
             'the function name kwenye the current local namespace to a function '
             'object\n'
             '(a wrapper around the executable code kila the function).  This\n'
             'function object contains a reference to the current global '
             'namespace\n'
             'as the global namespace to be used when the function ni called.\n'
             '\n'
             'The function definition does sio execute the function body; this '
             'gets\n'
             'executed only when the function ni called. [2]\n'
             '\n'
             'A function definition may be wrapped by one ama more *decorator*\n'
             'expressions. Decorator expressions are evaluated when the '
             'function is\n'
             'defined, kwenye the scope that contains the function definition.  '
             'The\n'
             'result must be a callable, which ni invoked ukijumuisha the function '
             'object\n'
             'as the only argument. The returned value ni bound to the '
             'function name\n'
             'instead of the function object.  Multiple decorators are applied '
             'in\n'
             'nested fashion. For example, the following code\n'
             '\n'
             '   @f1(arg)\n'
             '   @f2\n'
             '   eleza func(): pita\n'
             '\n'
             'is roughly equivalent to\n'
             '\n'
             '   eleza func(): pita\n'
             '   func = f1(arg)(f2(func))\n'
             '\n'
             'tatizo that the original function ni sio temporarily bound to '
             'the name\n'
             '"func".\n'
             '\n'
             'When one ama more *parameters* have the form *parameter* "="\n'
             '*expression*, the function ni said to have “default parameter '
             'values.”\n'
             'For a parameter ukijumuisha a default value, the corresponding '
             '*argument* may\n'
             'be omitted kutoka a call, kwenye which case the parameter’s default '
             'value is\n'
             'substituted.  If a parameter has a default value, all following\n'
             'parameters up until the “"*"” must also have a default value — '
             'this is\n'
             'a syntactic restriction that ni sio expressed by the grammar.\n'
             '\n'
             '**Default parameter values are evaluated kutoka left to right when '
             'the\n'
             'function definition ni executed.** This means that the '
             'expression is\n'
             'evaluated once, when the function ni defined, na that the same '
             '“pre-\n'
             'computed” value ni used kila each call.  This ni especially '
             'important\n'
             'to understand when a default parameter ni a mutable object, such '
             'as a\n'
             'list ama a dictionary: ikiwa the function modifies the object (e.g. '
             'by\n'
             'appending an item to a list), the default value ni kwenye effect '
             'modified.\n'
             'This ni generally sio what was intended.  A way around this ni '
             'to use\n'
             '"Tupu" kama the default, na explicitly test kila it kwenye the body of '
             'the\n'
             'function, e.g.:\n'
             '\n'
             '   eleza whats_on_the_telly(penguin=Tupu):\n'
             '       ikiwa penguin ni Tupu:\n'
             '           penguin = []\n'
             '       penguin.append("property of the zoo")\n'
             '       rudisha penguin\n'
             '\n'
             'Function call semantics are described kwenye more detail kwenye section '
             'Calls.\n'
             'A function call always assigns values to all parameters '
             'mentioned in\n'
             'the parameter list, either kutoka position arguments, kutoka '
             'keyword\n'
             'arguments, ama kutoka default values.  If the form “"*identifier"” '
             'is\n'
             'present, it ni initialized to a tuple receiving any excess '
             'positional\n'
             'parameters, defaulting to the empty tuple. If the form\n'
             '“"**identifier"” ni present, it ni initialized to a new ordered\n'
             'mapping receiving any excess keyword arguments, defaulting to a '
             'new\n'
             'empty mapping of the same type.  Parameters after “"*"” or\n'
             '“"*identifier"” are keyword-only parameters na may only be '
             'pitaed\n'
             'used keyword arguments.\n'
             '\n'
             'Parameters may have an *annotation* of the form “": '
             'expression"”\n'
             'following the parameter name.  Any parameter may have an '
             'annotation,\n'
             'even those of the form "*identifier" ama "**identifier".  '
             'Functions may\n'
             'have “return” annotation of the form “"-> expression"” after '
             'the\n'
             'parameter list.  These annotations can be any valid Python '
             'expression.\n'
             'The presence of annotations does sio change the semantics of a\n'
             'function.  The annotation values are available kama values of a\n'
             'dictionary keyed by the parameters’ names kwenye the '
             '"__annotations__"\n'
             'attribute of the function object.  If the "annotations" agiza '
             'from\n'
             '"__future__" ni used, annotations are preserved kama strings at '
             'runtime\n'
             'which enables postponed evaluation.  Otherwise, they are '
             'evaluated\n'
             'when the function definition ni executed.  In this case '
             'annotations\n'
             'may be evaluated kwenye a different order than they appear kwenye the '
             'source\n'
             'code.\n'
             '\n'
             'It ni also possible to create anonymous functions (functions sio '
             'bound\n'
             'to a name), kila immediate use kwenye expressions.  This uses lambda\n'
             'expressions, described kwenye section Lambdas.  Note that the '
             'lambda\n'
             'expression ni merely a shorthand kila a simplified function '
             'definition;\n'
             'a function defined kwenye a “"def"” statement can be pitaed around '
             'or\n'
             'assigned to another name just like a function defined by a '
             'lambda\n'
             'expression.  The “"def"” form ni actually more powerful since '
             'it\n'
             'allows the execution of multiple statements na annotations.\n'
             '\n'
             '**Programmer’s note:** Functions are first-kundi objects.  A '
             '“"def"”\n'
             'statement executed inside a function definition defines a local\n'
             'function that can be returned ama pitaed around.  Free variables '
             'used\n'
             'in the nested function can access the local variables of the '
             'function\n'
             'containing the def.  See section Naming na binding kila '
             'details.\n'
             '\n'
             'See also:\n'
             '\n'
             '  **PEP 3107** - Function Annotations\n'
             '     The original specification kila function annotations.\n'
             '\n'
             '  **PEP 484** - Type Hints\n'
             '     Definition of a standard meaning kila annotations: type '
             'hints.\n'
             '\n'
             '  **PEP 526** - Syntax kila Variable Annotations\n'
             '     Ability to type hint variable declarations, including '
             'class\n'
             '     variables na instance variables\n'
             '\n'
             '  **PEP 563** - Postponed Evaluation of Annotations\n'
             '     Support kila forward references within annotations by '
             'preserving\n'
             '     annotations kwenye a string form at runtime instead of eager\n'
             '     evaluation.\n',
 'global': 'The "global" statement\n'
           '**********************\n'
           '\n'
           '   global_stmt ::= "global" identifier ("," identifier)*\n'
           '\n'
           'The "global" statement ni a declaration which holds kila the '
           'entire\n'
           'current code block.  It means that the listed identifiers are to '
           'be\n'
           'interpreted kama globals.  It would be impossible to assign to a '
           'global\n'
           'variable without "global", although free variables may refer to\n'
           'globals without being declared global.\n'
           '\n'
           'Names listed kwenye a "global" statement must sio be used kwenye the same '
           'code\n'
           'block textually preceding that "global" statement.\n'
           '\n'
           'Names listed kwenye a "global" statement must sio be defined kama '
           'formal\n'
           'parameters ama kwenye a "for" loop control target, "class" definition,\n'
           'function definition, "import" statement, ama variable annotation.\n'
           '\n'
           '**CPython implementation detail:** The current implementation does '
           'not\n'
           'enforce some of these restrictions, but programs should sio abuse '
           'this\n'
           'freedom, kama future implementations may enforce them ama silently '
           'change\n'
           'the meaning of the program.\n'
           '\n'
           '**Programmer’s note:** "global" ni a directive to the parser.  It\n'
           'applies only to code parsed at the same time kama the "global"\n'
           'statement. In particular, a "global" statement contained kwenye a '
           'string\n'
           'or code object supplied to the built-in "exec()" function does '
           'not\n'
           'affect the code block *containing* the function call, na code\n'
           'contained kwenye such a string ni unaffected by "global" statements kwenye '
           'the\n'
           'code containing the function call.  The same applies to the '
           '"eval()"\n'
           'and "compile()" functions.\n',
 'id-classes': 'Reserved classes of identifiers\n'
               '*******************************\n'
               '\n'
               'Certain classes of identifiers (besides keywords) have '
               'special\n'
               'meanings.  These classes are identified by the patterns of '
               'leading and\n'
               'trailing underscore characters:\n'
               '\n'
               '"_*"\n'
               '   Not imported by "kutoka module agiza *".  The special '
               'identifier "_"\n'
               '   ni used kwenye the interactive interpreter to store the result '
               'of the\n'
               '   last evaluation; it ni stored kwenye the "builtins" module.  '
               'When not\n'
               '   kwenye interactive mode, "_" has no special meaning na ni sio '
               'defined.\n'
               '   See section The agiza statement.\n'
               '\n'
               '   Note: The name "_" ni often used kwenye conjunction with\n'
               '     internationalization; refer to the documentation kila the\n'
               '     "gettext" module kila more information on this '
               'convention.\n'
               '\n'
               '"__*__"\n'
               '   System-defined names. These names are defined by the '
               'interpreter\n'
               '   na its implementation (including the standard library).  '
               'Current\n'
               '   system names are discussed kwenye the Special method names '
               'section and\n'
               '   elsewhere.  More will likely be defined kwenye future versions '
               'of\n'
               '   Python.  *Any* use of "__*__" names, kwenye any context, that '
               'does not\n'
               '   follow explicitly documented use, ni subject to komaage '
               'without\n'
               '   warning.\n'
               '\n'
               '"__*"\n'
               '   Class-private names.  Names kwenye this category, when used '
               'within the\n'
               '   context of a kundi definition, are re-written to use a '
               'mangled form\n'
               '   to help avoid name clashes between “private” attributes of '
               'base and\n'
               '   derived classes. See section Identifiers (Names).\n',
 'identifiers': 'Identifiers na keywords\n'
                '************************\n'
                '\n'
                'Identifiers (also referred to kama *names*) are described by '
                'the\n'
                'following lexical definitions.\n'
                '\n'
                'The syntax of identifiers kwenye Python ni based on the Unicode '
                'standard\n'
                'annex UAX-31, ukijumuisha elaboration na changes kama defined below; '
                'see also\n'
                '**PEP 3131** kila further details.\n'
                '\n'
                'Within the ASCII range (U+0001..U+007F), the valid characters '
                'for\n'
                'identifiers are the same kama kwenye Python 2.x: the uppercase na '
                'lowercase\n'
                'letters "A" through "Z", the underscore "_" and, tatizo kila '
                'the first\n'
                'character, the digits "0" through "9".\n'
                '\n'
                'Python 3.0 introduces additional characters kutoka outside the '
                'ASCII\n'
                'range (see **PEP 3131**).  For these characters, the '
                'classification\n'
                'uses the version of the Unicode Character Database kama '
                'included kwenye the\n'
                '"unicodedata" module.\n'
                '\n'
                'Identifiers are unlimited kwenye length.  Case ni significant.\n'
                '\n'
                '   identifier   ::= xid_start xid_endelea*\n'
                '   id_start     ::= <all characters kwenye general categories Lu, '
                'Ll, Lt, Lm, Lo, Nl, the underscore, na characters ukijumuisha the '
                'Other_ID_Start property>\n'
                '   id_endelea  ::= <all characters kwenye id_start, plus '
                'characters kwenye the categories Mn, Mc, Nd, Pc na others ukijumuisha '
                'the Other_ID_Continue property>\n'
                '   xid_start    ::= <all characters kwenye id_start whose NFKC '
                'normalization ni kwenye "id_start xid_endelea*">\n'
                '   xid_endelea ::= <all characters kwenye id_endelea whose NFKC '
                'normalization ni kwenye "id_endelea*">\n'
                '\n'
                'The Unicode category codes mentioned above stand for:\n'
                '\n'
                '* *Lu* - uppercase letters\n'
                '\n'
                '* *Ll* - lowercase letters\n'
                '\n'
                '* *Lt* - titlecase letters\n'
                '\n'
                '* *Lm* - modifier letters\n'
                '\n'
                '* *Lo* - other letters\n'
                '\n'
                '* *Nl* - letter numbers\n'
                '\n'
                '* *Mn* - nonspacing marks\n'
                '\n'
                '* *Mc* - spacing combining marks\n'
                '\n'
                '* *Nd* - decimal numbers\n'
                '\n'
                '* *Pc* - connector punctuations\n'
                '\n'
                '* *Other_ID_Start* - explicit list of characters kwenye '
                'PropList.txt to\n'
                '  support backwards compatibility\n'
                '\n'
                '* *Other_ID_Continue* - likewise\n'
                '\n'
                'All identifiers are converted into the normal form NFKC wakati '
                'parsing;\n'
                'comparison of identifiers ni based on NFKC.\n'
                '\n'
                'A non-normative HTML file listing all valid identifier '
                'characters for\n'
                'Unicode 4.1 can be found at https://www.dcl.hpi.uni-\n'
                'potsdam.de/home/loewis/table-3131.html.\n'
                '\n'
                '\n'
                'Keywords\n'
                '========\n'
                '\n'
                'The following identifiers are used kama reserved words, ama '
                '*keywords* of\n'
                'the language, na cansio be used kama ordinary identifiers.  '
                'They must\n'
                'be spelled exactly kama written here:\n'
                '\n'
                '   Uongo      await      isipokua       agiza     pita\n'
                '   Tupu       koma      tatizo     kwenye         raise\n'
                '   Kweli       kundi      finally    ni         return\n'
                '   na        endelea   kila        lambda     try\n'
                '   kama         eleza        kutoka       nonlocal   while\n'
                '   assert     toa        global     sio        with\n'
                '   async      lasivyo       ikiwa         ama         tuma\n'
                '\n'
                '\n'
                'Reserved classes of identifiers\n'
                '===============================\n'
                '\n'
                'Certain classes of identifiers (besides keywords) have '
                'special\n'
                'meanings.  These classes are identified by the patterns of '
                'leading and\n'
                'trailing underscore characters:\n'
                '\n'
                '"_*"\n'
                '   Not imported by "kutoka module agiza *".  The special '
                'identifier "_"\n'
                '   ni used kwenye the interactive interpreter to store the result '
                'of the\n'
                '   last evaluation; it ni stored kwenye the "builtins" module.  '
                'When not\n'
                '   kwenye interactive mode, "_" has no special meaning na ni sio '
                'defined.\n'
                '   See section The agiza statement.\n'
                '\n'
                '   Note: The name "_" ni often used kwenye conjunction with\n'
                '     internationalization; refer to the documentation kila '
                'the\n'
                '     "gettext" module kila more information on this '
                'convention.\n'
                '\n'
                '"__*__"\n'
                '   System-defined names. These names are defined by the '
                'interpreter\n'
                '   na its implementation (including the standard library).  '
                'Current\n'
                '   system names are discussed kwenye the Special method names '
                'section and\n'
                '   elsewhere.  More will likely be defined kwenye future versions '
                'of\n'
                '   Python.  *Any* use of "__*__" names, kwenye any context, that '
                'does not\n'
                '   follow explicitly documented use, ni subject to komaage '
                'without\n'
                '   warning.\n'
                '\n'
                '"__*"\n'
                '   Class-private names.  Names kwenye this category, when used '
                'within the\n'
                '   context of a kundi definition, are re-written to use a '
                'mangled form\n'
                '   to help avoid name clashes between “private” attributes of '
                'base and\n'
                '   derived classes. See section Identifiers (Names).\n',
 'if': 'The "if" statement\n'
       '******************\n'
       '\n'
       'The "if" statement ni used kila conditional execution:\n'
       '\n'
       '   if_stmt ::= "if" expression ":" suite\n'
       '               ("elif" expression ":" suite)*\n'
       '               ["else" ":" suite]\n'
       '\n'
       'It selects exactly one of the suites by evaluating the expressions '
       'one\n'
       'by one until one ni found to be true (see section Boolean operations\n'
       'kila the definition of true na false); then that suite ni executed\n'
       '(and no other part of the "if" statement ni executed ama evaluated).\n'
       'If all expressions are false, the suite of the "else" clause, if\n'
       'present, ni executed.\n',
 'imaginary': 'Imaginary literals\n'
              '******************\n'
              '\n'
              'Imaginary literals are described by the following lexical '
              'definitions:\n'
              '\n'
              '   imagnumber ::= (floatnumber | digitpart) ("j" | "J")\n'
              '\n'
              'An imaginary literal tumas a complex number ukijumuisha a real part '
              'of 0.0.\n'
              'Complex numbers are represented kama a pair of floating point '
              'numbers\n'
              'and have the same restrictions on their range.  To create a '
              'complex\n'
              'number ukijumuisha a nonzero real part, add a floating point number to '
              'it,\n'
              'e.g., "(3+4j)".  Some examples of imaginary literals:\n'
              '\n'
              '   3.14j   10.j    10j     .001j   1e100j   3.14e-10j   '
              '3.14_15_93j\n',
 'import': 'The "import" statement\n'
           '**********************\n'
           '\n'
           '   import_stmt     ::= "import" module ["as" identifier] ("," '
           'module ["as" identifier])*\n'
           '                   | "from" relative_module "import" identifier '
           '["as" identifier]\n'
           '                   ("," identifier ["as" identifier])*\n'
           '                   | "from" relative_module "import" "(" '
           'identifier ["as" identifier]\n'
           '                   ("," identifier ["as" identifier])* [","] ")"\n'
           '                   | "from" module "import" "*"\n'
           '   module          ::= (identifier ".")* identifier\n'
           '   relative_module ::= "."* module | "."+\n'
           '\n'
           'The basic agiza statement (no "from" clause) ni executed kwenye two\n'
           'steps:\n'
           '\n'
           '1. find a module, loading na initializing it ikiwa necessary\n'
           '\n'
           '2. define a name ama names kwenye the local namespace kila the scope\n'
           '   where the "import" statement occurs.\n'
           '\n'
           'When the statement contains multiple clauses (separated by commas) '
           'the\n'
           'two steps are carried out separately kila each clause, just kama '
           'though\n'
           'the clauses had been separated out into individual agiza '
           'statements.\n'
           '\n'
           'The details of the first step, finding na loading modules are\n'
           'described kwenye greater detail kwenye the section on the agiza system, '
           'which\n'
           'also describes the various types of packages na modules that can '
           'be\n'
           'imported, kama well kama all the hooks that can be used to customize '
           'the\n'
           'agiza system. Note that failures kwenye this step may indicate '
           'either\n'
           'that the module could sio be located, *or* that an error occurred\n'
           'wakati initializing the module, which includes execution of the\n'
           'module’s code.\n'
           '\n'
           'If the requested module ni retrieved successfully, it will be '
           'made\n'
           'available kwenye the local namespace kwenye one of three ways:\n'
           '\n'
           '* If the module name ni followed by "as", then the name following\n'
           '  "as" ni bound directly to the imported module.\n'
           '\n'
           '* If no other name ni specified, na the module being imported ni '
           'a\n'
           '  top level module, the module’s name ni bound kwenye the local '
           'namespace\n'
           '  kama a reference to the imported module\n'
           '\n'
           '* If the module being imported ni *not* a top level module, then '
           'the\n'
           '  name of the top level package that contains the module ni bound '
           'in\n'
           '  the local namespace kama a reference to the top level package. '
           'The\n'
           '  imported module must be accessed using its full qualified name\n'
           '  rather than directly\n'
           '\n'
           'The "from" form uses a slightly more complex process:\n'
           '\n'
           '1. find the module specified kwenye the "from" clause, loading and\n'
           '   initializing it ikiwa necessary;\n'
           '\n'
           '2. kila each of the identifiers specified kwenye the "import" clauses:\n'
           '\n'
           '   1. check ikiwa the imported module has an attribute by that name\n'
           '\n'
           '   2. ikiwa not, attempt to agiza a submodule ukijumuisha that name na '
           'then\n'
           '      check the imported module again kila that attribute\n'
           '\n'
           '   3. ikiwa the attribute ni sio found, "ImportError" ni raised.\n'
           '\n'
           '   4. otherwise, a reference to that value ni stored kwenye the local\n'
           '      namespace, using the name kwenye the "as" clause ikiwa it ni '
           'present,\n'
           '      otherwise using the attribute name\n'
           '\n'
           'Examples:\n'
           '\n'
           '   agiza foo                 # foo imported na bound locally\n'
           '   agiza foo.bar.baz         # foo.bar.baz imported, foo bound '
           'locally\n'
           '   agiza foo.bar.baz kama fbb  # foo.bar.baz imported na bound kama '
           'fbb\n'
           '   kutoka foo.bar agiza baz    # foo.bar.baz imported na bound kama '
           'baz\n'
           '   kutoka foo agiza attr       # foo imported na foo.attr bound kama '
           'attr\n'
           '\n'
           'If the list of identifiers ni replaced by a star ("\'*\'"), all '
           'public\n'
           'names defined kwenye the module are bound kwenye the local namespace kila '
           'the\n'
           'scope where the "import" statement occurs.\n'
           '\n'
           'The *public names* defined by a module are determined by checking '
           'the\n'
           'module’s namespace kila a variable named "__all__"; ikiwa defined, it '
           'must\n'
           'be a sequence of strings which are names defined ama imported by '
           'that\n'
           'module.  The names given kwenye "__all__" are all considered public '
           'and\n'
           'are required to exist.  If "__all__" ni sio defined, the set of '
           'public\n'
           'names includes all names found kwenye the module’s namespace which do '
           'not\n'
           'begin ukijumuisha an underscore character ("\'_\'").  "__all__" should '
           'contain\n'
           'the entire public API. It ni intended to avoid accidentally '
           'exporting\n'
           'items that are sio part of the API (such kama library modules which '
           'were\n'
           'imported na used within the module).\n'
           '\n'
           'The wild card form of agiza — "kutoka module agiza *" — ni only\n'
           'allowed at the module level.  Attempting to use it kwenye kundi or\n'
           'function definitions will ashiria a "SyntaxError".\n'
           '\n'
           'When specifying what module to agiza you do sio have to specify '
           'the\n'
           'absolute name of the module. When a module ama package ni '
           'contained\n'
           'within another package it ni possible to make a relative agiza '
           'within\n'
           'the same top package without having to mention the package name. '
           'By\n'
           'using leading dots kwenye the specified module ama package after "from" '
           'you\n'
           'can specify how high to traverse up the current package hierarchy\n'
           'without specifying exact names. One leading dot means the current\n'
           'package where the module making the agiza exists. Two dots means '
           'up\n'
           'one package level. Three dots ni up two levels, etc. So ikiwa you '
           'execute\n'
           '"kutoka . agiza mod" kutoka a module kwenye the "pkg" package then you '
           'will\n'
           'end up importing "pkg.mod". If you execute "kutoka ..subpkg2 agiza '
           'mod"\n'
           'kutoka within "pkg.subpkg1" you will agiza "pkg.subpkg2.mod". The\n'
           'specification kila relative imports ni contained kwenye the Package\n'
           'Relative Imports section.\n'
           '\n'
           '"importlib.import_module()" ni provided to support applications '
           'that\n'
           'determine dynamically the modules to be loaded.\n'
           '\n'
           '\n'
           'Future statements\n'
           '=================\n'
           '\n'
           'A *future statement* ni a directive to the compiler that a '
           'particular\n'
           'module should be compiled using syntax ama semantics that will be\n'
           'available kwenye a specified future release of Python where the '
           'feature\n'
           'becomes standard.\n'
           '\n'
           'The future statement ni intended to ease migration to future '
           'versions\n'
           'of Python that introduce incompatible changes to the language.  '
           'It\n'
           'allows use of the new features on a per-module basis before the\n'
           'release kwenye which the feature becomes standard.\n'
           '\n'
           '   future_stmt ::= "from" "__future__" "import" feature ["as" '
           'identifier]\n'
           '                   ("," feature ["as" identifier])*\n'
           '                   | "from" "__future__" "import" "(" feature '
           '["as" identifier]\n'
           '                   ("," feature ["as" identifier])* [","] ")"\n'
           '   feature     ::= identifier\n'
           '\n'
           'A future statement must appear near the top of the module.  The '
           'only\n'
           'lines that can appear before a future statement are:\n'
           '\n'
           '* the module docstring (ikiwa any),\n'
           '\n'
           '* comments,\n'
           '\n'
           '* blank lines, and\n'
           '\n'
           '* other future statements.\n'
           '\n'
           'The only feature kwenye Python 3.7 that requires using the future\n'
           'statement ni "annotations".\n'
           '\n'
           'All historical features enabled by the future statement are still\n'
           'recognized by Python 3.  The list includes "absolute_import",\n'
           '"division", "generators", "generator_stop", "unicode_literals",\n'
           '"print_function", "nested_scopes" na "with_statement".  They are '
           'all\n'
           'redundant because they are always enabled, na only kept kila '
           'backwards\n'
           'compatibility.\n'
           '\n'
           'A future statement ni recognized na treated specially at compile\n'
           'time: Changes to the semantics of core constructs are often\n'
           'implemented by generating different code.  It may even be the '
           'case\n'
           'that a new feature introduces new incompatible syntax (such kama a '
           'new\n'
           'reserved word), kwenye which case the compiler may need to parse the\n'
           'module differently.  Such decisions cansio be pushed off until\n'
           'runtime.\n'
           '\n'
           'For any given release, the compiler knows which feature names '
           'have\n'
           'been defined, na raises a compile-time error ikiwa a future '
           'statement\n'
           'contains a feature sio known to it.\n'
           '\n'
           'The direct runtime semantics are the same kama kila any agiza '
           'statement:\n'
           'there ni a standard module "__future__", described later, na it '
           'will\n'
           'be imported kwenye the usual way at the time the future statement is\n'
           'executed.\n'
           '\n'
           'The interesting runtime semantics depend on the specific feature\n'
           'enabled by the future statement.\n'
           '\n'
           'Note that there ni nothing special about the statement:\n'
           '\n'
           '   agiza __future__ [as name]\n'
           '\n'
           'That ni sio a future statement; it’s an ordinary agiza statement '
           'with\n'
           'no special semantics ama syntax restrictions.\n'
           '\n'
           'Code compiled by calls to the built-in functions "exec()" and\n'
           '"compile()" that occur kwenye a module "M" containing a future '
           'statement\n'
           'will, by default, use the new syntax ama semantics associated ukijumuisha '
           'the\n'
           'future statement.  This can be controlled by optional arguments '
           'to\n'
           '"compile()" — see the documentation of that function kila details.\n'
           '\n'
           'A future statement typed at an interactive interpreter prompt '
           'will\n'
           'take effect kila the rest of the interpreter session.  If an\n'
           'interpreter ni started ukijumuisha the "-i" option, ni pitaed a script '
           'name\n'
           'to execute, na the script includes a future statement, it will be '
           'in\n'
           'effect kwenye the interactive session started after the script is\n'
           'executed.\n'
           '\n'
           'See also:\n'
           '\n'
           '  **PEP 236** - Back to the __future__\n'
           '     The original proposal kila the __future__ mechanism.\n',
 'in': 'Membership test operations\n'
       '**************************\n'
       '\n'
       'The operators "in" na "sio in" test kila membership.  "x kwenye s"\n'
       'evaluates to "Kweli" ikiwa *x* ni a member of *s*, na "Uongo" otherwise.\n'
       '"x haiko kwenye s" returns the negation of "x kwenye s".  All built-in '
       'sequences\n'
       'and set types support this kama well kama dictionary, kila which "in" '
       'tests\n'
       'whether the dictionary has a given key. For container types such as\n'
       'list, tuple, set, frozenset, dict, ama collections.deque, the\n'
       'expression "x kwenye y" ni equivalent to "any(x ni e ama x == e kila e in\n'
       'y)".\n'
       '\n'
       'For the string na bytes types, "x kwenye y" ni "Kweli" ikiwa na only ikiwa *x*\n'
       'is a substring of *y*.  An equivalent test ni "y.find(x) != -1".\n'
       'Empty strings are always considered to be a substring of any other\n'
       'string, so """ kwenye "abc"" will rudisha "Kweli".\n'
       '\n'
       'For user-defined classes which define the "__contains__()" method, "x\n'
       'in y" returns "Kweli" ikiwa "y.__contains__(x)" returns a true value, and\n'
       '"Uongo" otherwise.\n'
       '\n'
       'For user-defined classes which do sio define "__contains__()" but do\n'
       'define "__iter__()", "x kwenye y" ni "Kweli" ikiwa some value "z", kila which\n'
       'the expression "x ni z ama x == z" ni true, ni produced wakati '
       'iterating\n'
       'over "y". If an exception ni raised during the iteration, it ni kama if\n'
       '"in" raised that exception.\n'
       '\n'
       'Lastly, the old-style iteration protocol ni tried: ikiwa a kundi defines\n'
       '"__getitem__()", "x kwenye y" ni "Kweli" ikiwa na only ikiwa there ni a non-\n'
       'negative integer index *i* such that "x ni y[i] ama x == y[i]", na no\n'
       'lower integer index raises the "IndexError" exception.  (If any other\n'
       'exception ni raised, it ni kama ikiwa "in" raised that exception).\n'
       '\n'
       'The operator "sio in" ni defined to have the inverse truth value of\n'
       '"in".\n',
 'integers': 'Integer literals\n'
             '****************\n'
             '\n'
             'Integer literals are described by the following lexical '
             'definitions:\n'
             '\n'
             '   integer      ::= decinteger | bininteger | octinteger | '
             'hexinteger\n'
             '   decinteger   ::= nonzerodigit (["_"] digit)* | "0"+ (["_"] '
             '"0")*\n'
             '   bininteger   ::= "0" ("b" | "B") (["_"] bindigit)+\n'
             '   octinteger   ::= "0" ("o" | "O") (["_"] octdigit)+\n'
             '   hexinteger   ::= "0" ("x" | "X") (["_"] hexdigit)+\n'
             '   nonzerodigit ::= "1"..."9"\n'
             '   digit        ::= "0"..."9"\n'
             '   bindigit     ::= "0" | "1"\n'
             '   octdigit     ::= "0"..."7"\n'
             '   hexdigit     ::= digit | "a"..."f" | "A"..."F"\n'
             '\n'
             'There ni no limit kila the length of integer literals apart kutoka '
             'what\n'
             'can be stored kwenye available memory.\n'
             '\n'
             'Underscores are ignored kila determining the numeric value of '
             'the\n'
             'literal.  They can be used to group digits kila enhanced '
             'readability.\n'
             'One underscore can occur between digits, na after base '
             'specifiers\n'
             'like "0x".\n'
             '\n'
             'Note that leading zeros kwenye a non-zero decimal number are sio '
             'allowed.\n'
             'This ni kila disambiguation ukijumuisha C-style octal literals, which '
             'Python\n'
             'used before version 3.0.\n'
             '\n'
             'Some examples of integer literals:\n'
             '\n'
             '   7     2147483647                        0o177    0b100110111\n'
             '   3     79228162514264337593543950336     0o377    0xdeadbeef\n'
             '         100_000_000_000                   0b_1110_0101\n'
             '\n'
             'Changed kwenye version 3.6: Underscores are now allowed kila '
             'grouping\n'
             'purposes kwenye literals.\n',
 'lambda': 'Lambdas\n'
           '*******\n'
           '\n'
           '   lambda_expr        ::= "lambda" [parameter_list] ":" '
           'expression\n'
           '   lambda_expr_nocond ::= "lambda" [parameter_list] ":" '
           'expression_nocond\n'
           '\n'
           'Lambda expressions (sometimes called lambda forms) are used to '
           'create\n'
           'anonymous functions. The expression "lambda parameters: '
           'expression"\n'
           'tumas a function object.  The unnamed object behaves like a '
           'function\n'
           'object defined with:\n'
           '\n'
           '   eleza <lambda>(parameters):\n'
           '       rudisha expression\n'
           '\n'
           'See section Function definitions kila the syntax of parameter '
           'lists.\n'
           'Note that functions created ukijumuisha lambda expressions cansio '
           'contain\n'
           'statements ama annotations.\n',
 'lists': 'List displays\n'
          '*************\n'
          '\n'
          'A list display ni a possibly empty series of expressions enclosed '
          'in\n'
          'square brackets:\n'
          '\n'
          '   list_display ::= "[" [starred_list | comprehension] "]"\n'
          '\n'
          'A list display tumas a new list object, the contents being '
          'specified\n'
          'by either a list of expressions ama a comprehension.  When a comma-\n'
          'separated list of expressions ni supplied, its elements are '
          'evaluated\n'
          'kutoka left to right na placed into the list object kwenye that order.\n'
          'When a comprehension ni supplied, the list ni constructed kutoka the\n'
          'elements resulting kutoka the comprehension.\n',
 'naming': 'Naming na binding\n'
           '******************\n'
           '\n'
           '\n'
           'Binding of names\n'
           '================\n'
           '\n'
           '*Names* refer to objects.  Names are introduced by name binding\n'
           'operations.\n'
           '\n'
           'The following constructs bind names: formal parameters to '
           'functions,\n'
           '"import" statements, kundi na function definitions (these bind '
           'the\n'
           'kundi ama function name kwenye the defining block), na targets that '
           'are\n'
           'identifiers ikiwa occurring kwenye an assignment, "for" loop header, ama '
           'after\n'
           '"as" kwenye a "with" statement ama "except" clause. The "import" '
           'statement\n'
           'of the form "kutoka ... agiza *" binds all names defined kwenye the\n'
           'imported module, tatizo those beginning ukijumuisha an underscore.  This '
           'form\n'
           'may only be used at the module level.\n'
           '\n'
           'A target occurring kwenye a "del" statement ni also considered bound '
           'for\n'
           'this purpose (though the actual semantics are to unbind the '
           'name).\n'
           '\n'
           'Each assignment ama agiza statement occurs within a block defined '
           'by a\n'
           'kundi ama function definition ama at the module level (the '
           'top-level\n'
           'code block).\n'
           '\n'
           'If a name ni bound kwenye a block, it ni a local variable of that '
           'block,\n'
           'unless declared kama "nonlocal" ama "global".  If a name ni bound at '
           'the\n'
           'module level, it ni a global variable.  (The variables of the '
           'module\n'
           'code block are local na global.)  If a variable ni used kwenye a '
           'code\n'
           'block but sio defined there, it ni a *free variable*.\n'
           '\n'
           'Each occurrence of a name kwenye the program text refers to the '
           '*binding*\n'
           'of that name established by the following name resolution rules.\n'
           '\n'
           '\n'
           'Resolution of names\n'
           '===================\n'
           '\n'
           'A *scope* defines the visibility of a name within a block.  If a '
           'local\n'
           'variable ni defined kwenye a block, its scope includes that block.  If '
           'the\n'
           'definition occurs kwenye a function block, the scope extends to any '
           'blocks\n'
           'contained within the defining one, unless a contained block '
           'introduces\n'
           'a different binding kila the name.\n'
           '\n'
           'When a name ni used kwenye a code block, it ni resolved using the '
           'nearest\n'
           'enclosing scope.  The set of all such scopes visible to a code '
           'block\n'
           'is called the block’s *environment*.\n'
           '\n'
           'When a name ni sio found at all, a "NameError" exception ni '
           'raised. If\n'
           'the current scope ni a function scope, na the name refers to a '
           'local\n'
           'variable that has sio yet been bound to a value at the point where '
           'the\n'
           'name ni used, an "UnboundLocalError" exception ni raised.\n'
           '"UnboundLocalError" ni a subkundi of "NameError".\n'
           '\n'
           'If a name binding operation occurs anywhere within a code block, '
           'all\n'
           'uses of the name within the block are treated kama references to '
           'the\n'
           'current block.  This can lead to errors when a name ni used within '
           'a\n'
           'block before it ni bound.  This rule ni subtle.  Python lacks\n'
           'declarations na allows name binding operations to occur anywhere\n'
           'within a code block.  The local variables of a code block can be\n'
           'determined by scanning the entire text of the block kila name '
           'binding\n'
           'operations.\n'
           '\n'
           'If the "global" statement occurs within a block, all uses of the '
           'name\n'
           'specified kwenye the statement refer to the binding of that name kwenye '
           'the\n'
           'top-level namespace.  Names are resolved kwenye the top-level '
           'namespace by\n'
           'searching the global namespace, i.e. the namespace of the module\n'
           'containing the code block, na the builtins namespace, the '
           'namespace\n'
           'of the module "builtins".  The global namespace ni searched '
           'first.  If\n'
           'the name ni sio found there, the builtins namespace ni searched.  '
           'The\n'
           '"global" statement must precede all uses of the name.\n'
           '\n'
           'The "global" statement has the same scope kama a name binding '
           'operation\n'
           'in the same block.  If the nearest enclosing scope kila a free '
           'variable\n'
           'contains a global statement, the free variable ni treated kama a '
           'global.\n'
           '\n'
           'The "nonlocal" statement causes corresponding names to refer to\n'
           'previously bound variables kwenye the nearest enclosing function '
           'scope.\n'
           '"SyntaxError" ni raised at compile time ikiwa the given name does '
           'not\n'
           'exist kwenye any enclosing function scope.\n'
           '\n'
           'The namespace kila a module ni automatically created the first time '
           'a\n'
           'module ni imported.  The main module kila a script ni always '
           'called\n'
           '"__main__".\n'
           '\n'
           'Class definition blocks na arguments to "exec()" na "eval()" '
           'are\n'
           'special kwenye the context of name resolution. A kundi definition ni '
           'an\n'
           'executable statement that may use na define names. These '
           'references\n'
           'follow the normal rules kila name resolution ukijumuisha an exception '
           'that\n'
           'unbound local variables are looked up kwenye the global namespace. '
           'The\n'
           'namespace of the kundi definition becomes the attribute dictionary '
           'of\n'
           'the class. The scope of names defined kwenye a kundi block ni limited '
           'to\n'
           'the kundi block; it does sio extend to the code blocks of methods '
           '–\n'
           'this includes comprehensions na generator expressions since they '
           'are\n'
           'implemented using a function scope.  This means that the '
           'following\n'
           'will fail:\n'
           '\n'
           '   kundi A:\n'
           '       a = 42\n'
           '       b = list(a + i kila i kwenye range(10))\n'
           '\n'
           '\n'
           'Builtins na restricted execution\n'
           '=================================\n'
           '\n'
           '**CPython implementation detail:** Users should sio touch\n'
           '"__builtins__"; it ni strictly an implementation detail.  Users\n'
           'wanting to override values kwenye the builtins namespace should '
           '"import"\n'
           'the "builtins" module na modify its attributes appropriately.\n'
           '\n'
           'The builtins namespace associated ukijumuisha the execution of a code '
           'block\n'
           'is actually found by looking up the name "__builtins__" kwenye its '
           'global\n'
           'namespace; this should be a dictionary ama a module (in the latter '
           'case\n'
           'the module’s dictionary ni used).  By default, when kwenye the '
           '"__main__"\n'
           'module, "__builtins__" ni the built-in module "builtins"; when kwenye '
           'any\n'
           'other module, "__builtins__" ni an alias kila the dictionary of '
           'the\n'
           '"builtins" module itself.\n'
           '\n'
           '\n'
           'Interaction ukijumuisha dynamic features\n'
           '=================================\n'
           '\n'
           'Name resolution of free variables occurs at runtime, sio at '
           'compile\n'
           'time. This means that the following code will andika 42:\n'
           '\n'
           '   i = 10\n'
           '   eleza f():\n'
           '       andika(i)\n'
           '   i = 42\n'
           '   f()\n'
           '\n'
           'The "eval()" na "exec()" functions do sio have access to the '
           'full\n'
           'environment kila resolving names.  Names may be resolved kwenye the '
           'local\n'
           'and global namespaces of the caller.  Free variables are sio '
           'resolved\n'
           'in the nearest enclosing namespace, but kwenye the global namespace.  '
           '[1]\n'
           'The "exec()" na "eval()" functions have optional arguments to\n'
           'override the global na local namespace.  If only one namespace '
           'is\n'
           'specified, it ni used kila both.\n',
 'nonlocal': 'The "nonlocal" statement\n'
             '************************\n'
             '\n'
             '   nonlocal_stmt ::= "nonlocal" identifier ("," identifier)*\n'
             '\n'
             'The "nonlocal" statement causes the listed identifiers to refer '
             'to\n'
             'previously bound variables kwenye the nearest enclosing scope '
             'excluding\n'
             'globals. This ni important because the default behavior kila '
             'binding is\n'
             'to search the local namespace first.  The statement allows\n'
             'encapsulated code to rebind variables outside of the local '
             'scope\n'
             'besides the global (module) scope.\n'
             '\n'
             'Names listed kwenye a "nonlocal" statement, unlike those listed kwenye '
             'a\n'
             '"global" statement, must refer to pre-existing bindings kwenye an\n'
             'enclosing scope (the scope kwenye which a new binding should be '
             'created\n'
             'cansio be determined unambiguously).\n'
             '\n'
             'Names listed kwenye a "nonlocal" statement must sio collide ukijumuisha '
             'pre-\n'
             'existing bindings kwenye the local scope.\n'
             '\n'
             'See also:\n'
             '\n'
             '  **PEP 3104** - Access to Names kwenye Outer Scopes\n'
             '     The specification kila the "nonlocal" statement.\n',
 'numbers': 'Numeric literals\n'
            '****************\n'
            '\n'
            'There are three types of numeric literals: integers, floating '
            'point\n'
            'numbers, na imaginary numbers.  There are no complex literals\n'
            '(complex numbers can be formed by adding a real number na an\n'
            'imaginary number).\n'
            '\n'
            'Note that numeric literals do sio inlude a sign; a phrase like '
            '"-1"\n'
            'is actually an expression composed of the unary operator ‘"-"‘ '
            'and the\n'
            'literal "1".\n',
 'numeric-types': 'Emulating numeric types\n'
                  '***********************\n'
                  '\n'
                  'The following methods can be defined to emulate numeric '
                  'objects.\n'
                  'Methods corresponding to operations that are sio supported '
                  'by the\n'
                  'particular kind of number implemented (e.g., bitwise '
                  'operations for\n'
                  'non-integral numbers) should be left undefined.\n'
                  '\n'
                  'object.__add__(self, other)\n'
                  'object.__sub__(self, other)\n'
                  'object.__mul__(self, other)\n'
                  'object.__matmul__(self, other)\n'
                  'object.__truediv__(self, other)\n'
                  'object.__floordiv__(self, other)\n'
                  'object.__mod__(self, other)\n'
                  'object.__divmod__(self, other)\n'
                  'object.__pow__(self, other[, modulo])\n'
                  'object.__lshift__(self, other)\n'
                  'object.__rshift__(self, other)\n'
                  'object.__and__(self, other)\n'
                  'object.__xor__(self, other)\n'
                  'object.__or__(self, other)\n'
                  '\n'
                  '   These methods are called to implement the binary '
                  'arithmetic\n'
                  '   operations ("+", "-", "*", "@", "/", "//", "%", '
                  '"divmod()",\n'
                  '   "pow()", "**", "<<", ">>", "&", "^", "|").  For '
                  'instance, to\n'
                  '   evaluate the expression "x + y", where *x* ni an '
                  'instance of a\n'
                  '   kundi that has an "__add__()" method, "x.__add__(y)" ni '
                  'called.\n'
                  '   The "__divmod__()" method should be the equivalent to '
                  'using\n'
                  '   "__floordiv__()" na "__mod__()"; it should sio be '
                  'related to\n'
                  '   "__truediv__()".  Note that "__pow__()" should be '
                  'defined to accept\n'
                  '   an optional third argument ikiwa the ternary version of the '
                  'built-in\n'
                  '   "pow()" function ni to be supported.\n'
                  '\n'
                  '   If one of those methods does sio support the operation '
                  'ukijumuisha the\n'
                  '   supplied arguments, it should rudisha "NotImplemented".\n'
                  '\n'
                  'object.__radd__(self, other)\n'
                  'object.__rsub__(self, other)\n'
                  'object.__rmul__(self, other)\n'
                  'object.__rmatmul__(self, other)\n'
                  'object.__rtruediv__(self, other)\n'
                  'object.__rfloordiv__(self, other)\n'
                  'object.__rmod__(self, other)\n'
                  'object.__rdivmod__(self, other)\n'
                  'object.__rpow__(self, other)\n'
                  'object.__rlshift__(self, other)\n'
                  'object.__rrshift__(self, other)\n'
                  'object.__rand__(self, other)\n'
                  'object.__rxor__(self, other)\n'
                  'object.__ror__(self, other)\n'
                  '\n'
                  '   These methods are called to implement the binary '
                  'arithmetic\n'
                  '   operations ("+", "-", "*", "@", "/", "//", "%", '
                  '"divmod()",\n'
                  '   "pow()", "**", "<<", ">>", "&", "^", "|") ukijumuisha reflected '
                  '(swapped)\n'
                  '   operands.  These functions are only called ikiwa the left '
                  'operand does\n'
                  '   sio support the corresponding operation [3] na the '
                  'operands are of\n'
                  '   different types. [4] For instance, to evaluate the '
                  'expression "x -\n'
                  '   y", where *y* ni an instance of a kundi that has an '
                  '"__rsub__()"\n'
                  '   method, "y.__rsub__(x)" ni called ikiwa "x.__sub__(y)" '
                  'returns\n'
                  '   *NotImplemented*.\n'
                  '\n'
                  '   Note that ternary "pow()" will sio try calling '
                  '"__rpow__()" (the\n'
                  '   coercion rules would become too complicated).\n'
                  '\n'
                  '   Note: If the right operand’s type ni a subkundi of the '
                  'left\n'
                  '     operand’s type na that subkundi provides the '
                  'reflected method\n'
                  '     kila the operation, this method will be called before '
                  'the left\n'
                  '     operand’s non-reflected method.  This behavior allows '
                  'subclasses\n'
                  '     to override their ancestors’ operations.\n'
                  '\n'
                  'object.__iadd__(self, other)\n'
                  'object.__isub__(self, other)\n'
                  'object.__imul__(self, other)\n'
                  'object.__imatmul__(self, other)\n'
                  'object.__itruediv__(self, other)\n'
                  'object.__ifloordiv__(self, other)\n'
                  'object.__imod__(self, other)\n'
                  'object.__ipow__(self, other[, modulo])\n'
                  'object.__ilshift__(self, other)\n'
                  'object.__irshift__(self, other)\n'
                  'object.__iand__(self, other)\n'
                  'object.__ixor__(self, other)\n'
                  'object.__ior__(self, other)\n'
                  '\n'
                  '   These methods are called to implement the augmented '
                  'arithmetic\n'
                  '   assignments ("+=", "-=", "*=", "@=", "/=", "//=", "%=", '
                  '"**=",\n'
                  '   "<<=", ">>=", "&=", "^=", "|=").  These methods should '
                  'attempt to\n'
                  '   do the operation in-place (modifying *self*) na rudisha '
                  'the result\n'
                  '   (which could be, but does sio have to be, *self*).  If a '
                  'specific\n'
                  '   method ni sio defined, the augmented assignment falls '
                  'back to the\n'
                  '   normal methods.  For instance, ikiwa *x* ni an instance of '
                  'a class\n'
                  '   ukijumuisha an "__iadd__()" method, "x += y" ni equivalent to '
                  '"x =\n'
                  '   x.__iadd__(y)" . Otherwise, "x.__add__(y)" na '
                  '"y.__radd__(x)" are\n'
                  '   considered, kama ukijumuisha the evaluation of "x + y". In '
                  'certain\n'
                  '   situations, augmented assignment can result kwenye '
                  'unexpected errors\n'
                  '   (see Why does a_tuple[i] += [‘item’] ashiria an exception '
                  'when the\n'
                  '   addition works?), but this behavior ni kwenye fact part of '
                  'the data\n'
                  '   model.\n'
                  '\n'
                  'object.__neg__(self)\n'
                  'object.__pos__(self)\n'
                  'object.__abs__(self)\n'
                  'object.__invert__(self)\n'
                  '\n'
                  '   Called to implement the unary arithmetic operations '
                  '("-", "+",\n'
                  '   "abs()" na "~").\n'
                  '\n'
                  'object.__complex__(self)\n'
                  'object.__int__(self)\n'
                  'object.__float__(self)\n'
                  '\n'
                  '   Called to implement the built-in functions "complex()", '
                  '"int()" and\n'
                  '   "float()".  Should rudisha a value of the appropriate '
                  'type.\n'
                  '\n'
                  'object.__index__(self)\n'
                  '\n'
                  '   Called to implement "operator.index()", na whenever '
                  'Python needs\n'
                  '   to losslessly convert the numeric object to an integer '
                  'object (such\n'
                  '   kama kwenye slicing, ama kwenye the built-in "bin()", "hex()" na '
                  '"oct()"\n'
                  '   functions). Presence of this method indicates that the '
                  'numeric\n'
                  '   object ni an integer type.  Must rudisha an integer.\n'
                  '\n'
                  '   If "__int__()", "__float__()" na "__complex__()" are '
                  'sio defined\n'
                  '   then corresponding built-in functions "int()", "float()" '
                  'and\n'
                  '   "complex()" fall back to "__index__()".\n'
                  '\n'
                  'object.__round__(self[, ndigits])\n'
                  'object.__trunc__(self)\n'
                  'object.__floor__(self)\n'
                  'object.__ceil__(self)\n'
                  '\n'
                  '   Called to implement the built-in function "round()" na '
                  '"math"\n'
                  '   functions "trunc()", "floor()" na "ceil()". Unless '
                  '*ndigits* is\n'
                  '   pitaed to "__round__()" all these methods should rudisha '
                  'the value\n'
                  '   of the object truncated to an "Integral" (typically an '
                  '"int").\n'
                  '\n'
                  '   If "__int__()" ni sio defined then the built-in function '
                  '"int()"\n'
                  '   falls back to "__trunc__()".\n',
 'objects': 'Objects, values na types\n'
            '*************************\n'
            '\n'
            '*Objects* are Python’s abstraction kila data.  All data kwenye a '
            'Python\n'
            'program ni represented by objects ama by relations between '
            'objects. (In\n'
            'a sense, na kwenye conformance to Von Neumann’s motoa of a “stored\n'
            'program computer,” code ni also represented by objects.)\n'
            '\n'
            'Every object has an identity, a type na a value.  An object’s\n'
            '*identity* never changes once it has been created; you may think '
            'of it\n'
            'as the object’s address kwenye memory.  The ‘"is"’ operator compares '
            'the\n'
            'identity of two objects; the "id()" function returns an integer\n'
            'representing its identity.\n'
            '\n'
            '**CPython implementation detail:** For CPython, "id(x)" ni the '
            'memory\n'
            'address where "x" ni stored.\n'
            '\n'
            'An object’s type determines the operations that the object '
            'supports\n'
            '(e.g., “does it have a length?”) na also defines the possible '
            'values\n'
            'kila objects of that type.  The "type()" function returns an '
            'object’s\n'
            'type (which ni an object itself).  Like its identity, an '
            'object’s\n'
            '*type* ni also unchangeable. [1]\n'
            '\n'
            'The *value* of some objects can change.  Objects whose value can\n'
            'change are said to be *mutable*; objects whose value ni '
            'unchangeable\n'
            'once they are created are called *immutable*. (The value of an\n'
            'immutable container object that contains a reference to a '
            'mutable\n'
            'object can change when the latter’s value ni changed; however '
            'the\n'
            'container ni still considered immutable, because the collection '
            'of\n'
            'objects it contains cansio be changed.  So, immutability ni not\n'
            'strictly the same kama having an unchangeable value, it ni more '
            'subtle.)\n'
            'An object’s mutability ni determined by its type; kila instance,\n'
            'numbers, strings na tuples are immutable, wakati dictionaries '
            'and\n'
            'lists are mutable.\n'
            '\n'
            'Objects are never explicitly destroyed; however, when they '
            'become\n'
            'unreachable they may be garbage-collected.  An implementation is\n'
            'allowed to postpone garbage collection ama omit it altogether — it '
            'is a\n'
            'matter of implementation quality how garbage collection is\n'
            'implemented, kama long kama no objects are collected that are still\n'
            'reachable.\n'
            '\n'
            '**CPython implementation detail:** CPython currently uses a '
            'reference-\n'
            'counting scheme ukijumuisha (optional) delayed detection of cyclically '
            'linked\n'
            'garbage, which collects most objects kama soon kama they become\n'
            'unreachable, but ni sio guaranteed to collect garbage containing\n'
            'circular references.  See the documentation of the "gc" module '
            'for\n'
            'information on controlling the collection of cyclic garbage. '
            'Other\n'
            'implementations act differently na CPython may change. Do sio '
            'depend\n'
            'on immediate finalization of objects when they become unreachable '
            '(so\n'
            'you should always close files explicitly).\n'
            '\n'
            'Note that the use of the implementation’s tracing ama debugging\n'
            'facilities may keep objects alive that would normally be '
            'collectable.\n'
            'Also note that catching an exception ukijumuisha a ‘"try"…"except"’ '
            'statement\n'
            'may keep objects alive.\n'
            '\n'
            'Some objects contain references to “external” resources such kama '
            'open\n'
            'files ama windows.  It ni understood that these resources are '
            'freed\n'
            'when the object ni garbage-collected, but since garbage '
            'collection is\n'
            'sio guaranteed to happen, such objects also provide an explicit '
            'way to\n'
            'release the external resource, usually a "close()" method. '
            'Programs\n'
            'are strongly recommended to explicitly close such objects.  The\n'
            '‘"try"…"finally"’ statement na the ‘"with"’ statement provide\n'
            'convenient ways to do this.\n'
            '\n'
            'Some objects contain references to other objects; these are '
            'called\n'
            '*containers*. Examples of containers are tuples, lists and\n'
            'dictionaries.  The references are part of a container’s value.  '
            'In\n'
            'most cases, when we talk about the value of a container, we imply '
            'the\n'
            'values, sio the identities of the contained objects; however, '
            'when we\n'
            'talk about the mutability of a container, only the identities of '
            'the\n'
            'immediately contained objects are implied.  So, ikiwa an immutable\n'
            'container (like a tuple) contains a reference to a mutable '
            'object, its\n'
            'value changes ikiwa that mutable object ni changed.\n'
            '\n'
            'Types affect almost all aspects of object behavior.  Even the\n'
            'importance of object identity ni affected kwenye some sense: kila '
            'immutable\n'
            'types, operations that compute new values may actually rudisha a\n'
            'reference to any existing object ukijumuisha the same type na value, '
            'while\n'
            'kila mutable objects this ni sio allowed.  E.g., after "a = 1; b = '
            '1",\n'
            '"a" na "b" may ama may sio refer to the same object ukijumuisha the '
            'value\n'
            'one, depending on the implementation, but after "c = []; d = []", '
            '"c"\n'
            'and "d" are guaranteed to refer to two different, unique, newly\n'
            'created empty lists. (Note that "c = d = []" assigns the same '
            'object\n'
            'to both "c" na "d".)\n',
 'operator-summary': 'Operator precedence\n'
                     '*******************\n'
                     '\n'
                     'The following table summarizes the operator precedence '
                     'in Python, from\n'
                     'lowest precedence (least binding) to highest precedence '
                     '(most\n'
                     'binding).  Operators kwenye the same box have the same '
                     'precedence.  Unless\n'
                     'the syntax ni explicitly given, operators are binary.  '
                     'Operators in\n'
                     'the same box group left to right (tatizo kila '
                     'exponentiation, which\n'
                     'groups kutoka right to left).\n'
                     '\n'
                     'Note that comparisons, membership tests, na identity '
                     'tests, all have\n'
                     'the same precedence na have a left-to-right chaining '
                     'feature as\n'
                     'described kwenye the Comparisons section.\n'
                     '\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| Operator                                        | '
                     'Description                           |\n'
                     '|=================================================|=======================================|\n'
                     '| ":="                                            | '
                     'Assignment expression                 |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "lambda"                                        | '
                     'Lambda expression                     |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "if" – "else"                                   | '
                     'Conditional expression                |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "or"                                            | '
                     'Boolean OR                            |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "and"                                           | '
                     'Boolean AND                           |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "not" "x"                                       | '
                     'Boolean NOT                           |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "in", "sio in", "is", "is not", "<", "<=", ">", | '
                     'Comparisons, including membership     |\n'
                     '| ">=", "!=", "=="                                | '
                     'tests na identity tests              |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "|"                                             | '
                     'Bitwise OR                            |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "^"                                             | '
                     'Bitwise XOR                           |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "&"                                             | '
                     'Bitwise AND                           |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "<<", ">>"                                      | '
                     'Shifts                                |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "+", "-"                                        | '
                     'Addition na subtraction              |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "*", "@", "/", "//", "%"                        | '
                     'Multiplication, matrix                |\n'
                     '|                                                 | '
                     'multiplication, division, floor       |\n'
                     '|                                                 | '
                     'division, remainder [5]               |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "+x", "-x", "~x"                                | '
                     'Positive, negative, bitwise NOT       |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "**"                                            | '
                     'Exponentiation [6]                    |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "await" "x"                                     | '
                     'Await expression                      |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "x[index]", "x[index:index]",                   | '
                     'Subscription, slicing, call,          |\n'
                     '| "x(arguments...)", "x.attribute"                | '
                     'attribute reference                   |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "(expressions...)",  "[expressions...]", "{key: | '
                     'Binding ama parenthesized expression,  |\n'
                     '| value...}", "{expressions...}"                  | list '
                     'display, dictionary display, set |\n'
                     '|                                                 | '
                     'display                               |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '\n'
                     '-[ Footnotes ]-\n'
                     '\n'
                     '[1] While "abs(x%y) < abs(y)" ni true mathematically, '
                     'kila floats\n'
                     '    it may sio be true numerically due to roundoff.  For '
                     'example, and\n'
                     '    assuming a platform on which a Python float ni an '
                     'IEEE 754 double-\n'
                     '    precision number, kwenye order that "-1e-100 % 1e100" '
                     'have the same\n'
                     '    sign kama "1e100", the computed result ni "-1e-100 + '
                     '1e100", which\n'
                     '    ni numerically exactly equal to "1e100".  The '
                     'function\n'
                     '    "math.fmod()" returns a result whose sign matches '
                     'the sign of the\n'
                     '    first argument instead, na so returns "-1e-100" kwenye '
                     'this case.\n'
                     '    Which approach ni more appropriate depends on the '
                     'application.\n'
                     '\n'
                     '[2] If x ni very close to an exact integer multiple of '
                     'y, it’s\n'
                     '    possible kila "x//y" to be one larger than '
                     '"(x-x%y)//y" due to\n'
                     '    rounding.  In such cases, Python returns the latter '
                     'result, in\n'
                     '    order to preserve that "divmod(x,y)[0] * y + x % y" '
                     'be very close\n'
                     '    to "x".\n'
                     '\n'
                     '[3] The Unicode standard distinguishes between *code '
                     'points* (e.g.\n'
                     '    U+0041) na *abstract characters* (e.g. “LATIN '
                     'CAPITAL LETTER A”).\n'
                     '    While most abstract characters kwenye Unicode are only '
                     'represented\n'
                     '    using one code point, there ni a number of abstract '
                     'characters\n'
                     '    that can kwenye addition be represented using a sequence '
                     'of more than\n'
                     '    one code point.  For example, the abstract character '
                     '“LATIN\n'
                     '    CAPITAL LETTER C WITH CEDILLA” can be represented kama '
                     'a single\n'
                     '    *precomposed character* at code position U+00C7, ama '
                     'as a sequence\n'
                     '    of a *base character* at code position U+0043 (LATIN '
                     'CAPITAL\n'
                     '    LETTER C), followed by a *combining character* at '
                     'code position\n'
                     '    U+0327 (COMBINING CEDILLA).\n'
                     '\n'
                     '    The comparison operators on strings compare at the '
                     'level of\n'
                     '    Unicode code points. This may be counter-intuitive '
                     'to humans.  For\n'
                     '    example, ""\\u00C7" == "\\u0043\\u0327"" ni "Uongo", '
                     'even though both\n'
                     '    strings represent the same abstract character “LATIN '
                     'CAPITAL\n'
                     '    LETTER C WITH CEDILLA”.\n'
                     '\n'
                     '    To compare strings at the level of abstract '
                     'characters (that is,\n'
                     '    kwenye a way intuitive to humans), use '
                     '"unicodedata.normalize()".\n'
                     '\n'
                     '[4] Due to automatic garbage-collection, free lists, na '
                     'the\n'
                     '    dynamic nature of descriptors, you may notice '
                     'seemingly unusual\n'
                     '    behaviour kwenye certain uses of the "is" operator, like '
                     'those\n'
                     '    involving comparisons between instance methods, ama '
                     'constants.\n'
                     '    Check their documentation kila more info.\n'
                     '\n'
                     '[5] The "%" operator ni also used kila string formatting; '
                     'the same\n'
                     '    precedence applies.\n'
                     '\n'
                     '[6] The power operator "**" binds less tightly than an '
                     'arithmetic\n'
                     '    ama bitwise unary operator on its right, that is, '
                     '"2**-1" ni "0.5".\n',
 'pita': 'The "pita" statement\n'
         '********************\n'
         '\n'
         '   pita_stmt ::= "pita"\n'
         '\n'
         '"pita" ni a null operation — when it ni executed, nothing happens. '
         'It\n'
         'is useful kama a placeholder when a statement ni required '
         'syntactically,\n'
         'but no code needs to be executed, kila example:\n'
         '\n'
         '   eleza f(arg): pita    # a function that does nothing (yet)\n'
         '\n'
         '   kundi C: pita       # a kundi ukijumuisha no methods (yet)\n',
 'power': 'The power operator\n'
          '******************\n'
          '\n'
          'The power operator binds more tightly than unary operators on its\n'
          'left; it binds less tightly than unary operators on its right.  '
          'The\n'
          'syntax is:\n'
          '\n'
          '   power ::= (await_expr | primary) ["**" u_expr]\n'
          '\n'
          'Thus, kwenye an unparenthesized sequence of power na unary operators, '
          'the\n'
          'operators are evaluated kutoka right to left (this does sio '
          'constrain\n'
          'the evaluation order kila the operands): "-1**2" results kwenye "-1".\n'
          '\n'
          'The power operator has the same semantics kama the built-in "pow()"\n'
          'function, when called ukijumuisha two arguments: it tumas its left '
          'argument\n'
          'raised to the power of its right argument.  The numeric arguments '
          'are\n'
          'first converted to a common type, na the result ni of that type.\n'
          '\n'
          'For int operands, the result has the same type kama the operands '
          'unless\n'
          'the second argument ni negative; kwenye that case, all arguments are\n'
          'converted to float na a float result ni delivered. For example,\n'
          '"10**2" returns "100", but "10**-2" returns "0.01".\n'
          '\n'
          'Raising "0.0" to a negative power results kwenye a '
          '"ZeroDivisionError".\n'
          'Raising a negative number to a fractional power results kwenye a '
          '"complex"\n'
          'number. (In earlier versions it raised a "ValueError".)\n',
 'raise': 'The "raise" statement\n'
          '*********************\n'
          '\n'
          '   raise_stmt ::= "raise" [expression ["from" expression]]\n'
          '\n'
          'If no expressions are present, "raise" re-raises the last '
          'exception\n'
          'that was active kwenye the current scope.  If no exception ni active '
          'in\n'
          'the current scope, a "RuntimeError" exception ni raised indicating\n'
          'that this ni an error.\n'
          '\n'
          'Otherwise, "raise" evaluates the first expression kama the exception\n'
          'object.  It must be either a subkundi ama an instance of\n'
          '"BaseException". If it ni a class, the exception instance will be\n'
          'obtained when needed by instantiating the kundi ukijumuisha no arguments.\n'
          '\n'
          'The *type* of the exception ni the exception instance’s class, the\n'
          '*value* ni the instance itself.\n'
          '\n'
          'A traceback object ni normally created automatically when an '
          'exception\n'
          'is raised na attached to it kama the "__traceback__" attribute, '
          'which\n'
          'is writable. You can create an exception na set your own traceback '
          'in\n'
          'one step using the "with_traceback()" exception method (which '
          'returns\n'
          'the same exception instance, ukijumuisha its traceback set to its '
          'argument),\n'
          'like so:\n'
          '\n'
          '   ashiria Exception("foo occurred").with_traceback(tracebackobj)\n'
          '\n'
          'The "from" clause ni used kila exception chaining: ikiwa given, the '
          'second\n'
          '*expression* must be another exception kundi ama instance, which '
          'will\n'
          'then be attached to the raised exception kama the "__cause__" '
          'attribute\n'
          '(which ni writable).  If the raised exception ni sio handled, both\n'
          'exceptions will be printed:\n'
          '\n'
          '   >>> jaribu:\n'
          '   ...     andika(1 / 0)\n'
          '   ... tatizo Exception kama exc:\n'
          '   ...     ashiria RuntimeError("Something bad happened") kutoka exc\n'
          '   ...\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 2, kwenye <module>\n'
          '   ZeroDivisionError: division by zero\n'
          '\n'
          '   The above exception was the direct cause of the following '
          'exception:\n'
          '\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 4, kwenye <module>\n'
          '   RuntimeError: Something bad happened\n'
          '\n'
          'A similar mechanism works implicitly ikiwa an exception ni raised '
          'inside\n'
          'an exception handler ama a "finally" clause: the previous exception '
          'is\n'
          'then attached kama the new exception’s "__context__" attribute:\n'
          '\n'
          '   >>> jaribu:\n'
          '   ...     andika(1 / 0)\n'
          '   ... tatizo:\n'
          '   ...     ashiria RuntimeError("Something bad happened")\n'
          '   ...\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 2, kwenye <module>\n'
          '   ZeroDivisionError: division by zero\n'
          '\n'
          '   During handling of the above exception, another exception '
          'occurred:\n'
          '\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 4, kwenye <module>\n'
          '   RuntimeError: Something bad happened\n'
          '\n'
          'Exception chaining can be explicitly suppressed by specifying '
          '"Tupu"\n'
          'in the "from" clause:\n'
          '\n'
          '   >>> jaribu:\n'
          '   ...     andika(1 / 0)\n'
          '   ... tatizo:\n'
          '   ...     ashiria RuntimeError("Something bad happened") kutoka Tupu\n'
          '   ...\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 4, kwenye <module>\n'
          '   RuntimeError: Something bad happened\n'
          '\n'
          'Additional information on exceptions can be found kwenye section\n'
          'Exceptions, na information about handling exceptions ni kwenye '
          'section\n'
          'The try statement.\n'
          '\n'
          'Changed kwenye version 3.3: "Tupu" ni now permitted kama "Y" kwenye "ashiria X\n'
          'kutoka Y".\n'
          '\n'
          'New kwenye version 3.3: The "__suppress_context__" attribute to '
          'suppress\n'
          'automatic display of the exception context.\n',
 'return': 'The "return" statement\n'
           '**********************\n'
           '\n'
           '   return_stmt ::= "return" [expression_list]\n'
           '\n'
           '"return" may only occur syntactically nested kwenye a function '
           'definition,\n'
           'sio within a nested kundi definition.\n'
           '\n'
           'If an expression list ni present, it ni evaluated, isipokua "Tupu" is\n'
           'substituted.\n'
           '\n'
           '"return" leaves the current function call ukijumuisha the expression list '
           '(or\n'
           '"Tupu") kama rudisha value.\n'
           '\n'
           'When "return" pitaes control out of a "try" statement ukijumuisha a '
           '"finally"\n'
           'clause, that "finally" clause ni executed before really leaving '
           'the\n'
           'function.\n'
           '\n'
           'In a generator function, the "return" statement indicates that '
           'the\n'
           'generator ni done na will cause "StopIteration" to be raised. '
           'The\n'
           'returned value (ikiwa any) ni used kama an argument to construct\n'
           '"StopIteration" na becomes the "StopIteration.value" attribute.\n'
           '\n'
           'In an asynchronous generator function, an empty "return" '
           'statement\n'
           'indicates that the asynchronous generator ni done na will cause\n'
           '"StopAsyncIteration" to be raised.  A non-empty "return" statement '
           'is\n'
           'a syntax error kwenye an asynchronous generator function.\n',
 'sequence-types': 'Emulating container types\n'
                   '*************************\n'
                   '\n'
                   'The following methods can be defined to implement '
                   'container objects.\n'
                   'Containers usually are sequences (such kama lists ama tuples) '
                   'or mappings\n'
                   '(like dictionaries), but can represent other containers kama '
                   'well.  The\n'
                   'first set of methods ni used either to emulate a sequence '
                   'or to\n'
                   'emulate a mapping; the difference ni that kila a sequence, '
                   'the\n'
                   'allowable keys should be the integers *k* kila which "0 <= '
                   'k < N" where\n'
                   '*N* ni the length of the sequence, ama slice objects, which '
                   'define a\n'
                   'range of items.  It ni also recommended that mappings '
                   'provide the\n'
                   'methods "keys()", "values()", "items()", "get()", '
                   '"clear()",\n'
                   '"setdefault()", "pop()", "popitem()", "copy()", na '
                   '"update()"\n'
                   'behaving similar to those kila Python’s standard dictionary '
                   'objects.\n'
                   'The "collections.abc" module provides a "MutableMapping" '
                   'abstract base\n'
                   'kundi to help create those methods kutoka a base set of '
                   '"__getitem__()",\n'
                   '"__setitem__()", "__delitem__()", na "keys()". Mutable '
                   'sequences\n'
                   'should provide methods "append()", "count()", "index()", '
                   '"extend()",\n'
                   '"insert()", "pop()", "remove()", "reverse()" na "sort()", '
                   'like Python\n'
                   'standard list objects.  Finally, sequence types should '
                   'implement\n'
                   'addition (meaning concatenation) na multiplication '
                   '(meaning\n'
                   'repetition) by defining the methods "__add__()", '
                   '"__radd__()",\n'
                   '"__iadd__()", "__mul__()", "__rmul__()" na "__imul__()" '
                   'described\n'
                   'below; they should sio define other numerical operators.  '
                   'It is\n'
                   'recommended that both mappings na sequences implement '
                   'the\n'
                   '"__contains__()" method to allow efficient use of the "in" '
                   'operator;\n'
                   'kila mappings, "in" should search the mapping’s keys; kila '
                   'sequences, it\n'
                   'should search through the values.  It ni further '
                   'recommended that both\n'
                   'mappings na sequences implement the "__iter__()" method '
                   'to allow\n'
                   'efficient iteration through the container; kila mappings, '
                   '"__iter__()"\n'
                   'should be the same kama "keys()"; kila sequences, it should '
                   'iterate\n'
                   'through the values.\n'
                   '\n'
                   'object.__len__(self)\n'
                   '\n'
                   '   Called to implement the built-in function "len()".  '
                   'Should return\n'
                   '   the length of the object, an integer ">=" 0.  Also, an '
                   'object that\n'
                   '   doesn’t define a "__bool__()" method na whose '
                   '"__len__()" method\n'
                   '   returns zero ni considered to be false kwenye a Boolean '
                   'context.\n'
                   '\n'
                   '   **CPython implementation detail:** In CPython, the '
                   'length is\n'
                   '   required to be at most "sys.maxsize". If the length ni '
                   'larger than\n'
                   '   "sys.maxsize" some features (such kama "len()") may '
                   'raise\n'
                   '   "OverflowError".  To prevent raising "OverflowError" by '
                   'truth value\n'
                   '   testing, an object must define a "__bool__()" method.\n'
                   '\n'
                   'object.__length_hint__(self)\n'
                   '\n'
                   '   Called to implement "operator.length_hint()". Should '
                   'rudisha an\n'
                   '   estimated length kila the object (which may be greater '
                   'or less than\n'
                   '   the actual length). The length must be an integer ">=" '
                   '0. The\n'
                   '   rudisha value may also be "NotImplemented", which ni '
                   'treated the\n'
                   '   same kama ikiwa the "__length_hint__" method didn’t exist at '
                   'all. This\n'
                   '   method ni purely an optimization na ni never required '
                   'for\n'
                   '   correctness.\n'
                   '\n'
                   '   New kwenye version 3.4.\n'
                   '\n'
                   'Note: Slicing ni done exclusively ukijumuisha the following three '
                   'methods.\n'
                   '  A call like\n'
                   '\n'
                   '     a[1:2] = b\n'
                   '\n'
                   '  ni translated to\n'
                   '\n'
                   '     a[slice(1, 2, Tupu)] = b\n'
                   '\n'
                   '  na so forth.  Missing slice items are always filled kwenye '
                   'ukijumuisha "Tupu".\n'
                   '\n'
                   'object.__getitem__(self, key)\n'
                   '\n'
                   '   Called to implement evaluation of "self[key]". For '
                   'sequence types,\n'
                   '   the accepted keys should be integers na slice '
                   'objects.  Note that\n'
                   '   the special interpretation of negative indexes (ikiwa the '
                   'kundi wishes\n'
                   '   to emulate a sequence type) ni up to the '
                   '"__getitem__()" method. If\n'
                   '   *key* ni of an inappropriate type, "TypeError" may be '
                   'raised; ikiwa of\n'
                   '   a value outside the set of indexes kila the sequence '
                   '(after any\n'
                   '   special interpretation of negative values), '
                   '"IndexError" should be\n'
                   '   raised. For mapping types, ikiwa *key* ni missing (haiko kwenye '
                   'the\n'
                   '   container), "KeyError" should be raised.\n'
                   '\n'
                   '   Note: "for" loops expect that an "IndexError" will be '
                   'raised for\n'
                   '     illegal indexes to allow proper detection of the end '
                   'of the\n'
                   '     sequence.\n'
                   '\n'
                   'object.__setitem__(self, key, value)\n'
                   '\n'
                   '   Called to implement assignment to "self[key]".  Same '
                   'note kama for\n'
                   '   "__getitem__()".  This should only be implemented kila '
                   'mappings if\n'
                   '   the objects support changes to the values kila keys, ama '
                   'ikiwa new keys\n'
                   '   can be added, ama kila sequences ikiwa elements can be '
                   'replaced.  The\n'
                   '   same exceptions should be raised kila improper *key* '
                   'values kama for\n'
                   '   the "__getitem__()" method.\n'
                   '\n'
                   'object.__delitem__(self, key)\n'
                   '\n'
                   '   Called to implement deletion of "self[key]".  Same note '
                   'as for\n'
                   '   "__getitem__()".  This should only be implemented kila '
                   'mappings if\n'
                   '   the objects support removal of keys, ama kila sequences '
                   'ikiwa elements\n'
                   '   can be removed kutoka the sequence.  The same exceptions '
                   'should be\n'
                   '   raised kila improper *key* values kama kila the '
                   '"__getitem__()" method.\n'
                   '\n'
                   'object.__missing__(self, key)\n'
                   '\n'
                   '   Called by "dict"."__getitem__()" to implement '
                   '"self[key]" kila dict\n'
                   '   subclasses when key ni haiko kwenye the dictionary.\n'
                   '\n'
                   'object.__iter__(self)\n'
                   '\n'
                   '   This method ni called when an iterator ni required kila '
                   'a container.\n'
                   '   This method should rudisha a new iterator object that '
                   'can iterate\n'
                   '   over all the objects kwenye the container.  For mappings, '
                   'it should\n'
                   '   iterate over the keys of the container.\n'
                   '\n'
                   '   Iterator objects also need to implement this method; '
                   'they are\n'
                   '   required to rudisha themselves.  For more information on '
                   'iterator\n'
                   '   objects, see Iterator Types.\n'
                   '\n'
                   'object.__reversed__(self)\n'
                   '\n'
                   '   Called (ikiwa present) by the "reversed()" built-in to '
                   'implement\n'
                   '   reverse iteration.  It should rudisha a new iterator '
                   'object that\n'
                   '   iterates over all the objects kwenye the container kwenye '
                   'reverse order.\n'
                   '\n'
                   '   If the "__reversed__()" method ni sio provided, the '
                   '"reversed()"\n'
                   '   built-in will fall back to using the sequence protocol '
                   '("__len__()"\n'
                   '   na "__getitem__()").  Objects that support the '
                   'sequence protocol\n'
                   '   should only provide "__reversed__()" ikiwa they can '
                   'provide an\n'
                   '   implementation that ni more efficient than the one '
                   'provided by\n'
                   '   "reversed()".\n'
                   '\n'
                   'The membership test operators ("in" na "sio in") are '
                   'normally\n'
                   'implemented kama an iteration through a sequence.  However, '
                   'container\n'
                   'objects can supply the following special method ukijumuisha a '
                   'more efficient\n'
                   'implementation, which also does sio require the object be '
                   'a sequence.\n'
                   '\n'
                   'object.__contains__(self, item)\n'
                   '\n'
                   '   Called to implement membership test operators.  Should '
                   'rudisha true\n'
                   '   ikiwa *item* ni kwenye *self*, false otherwise.  For mapping '
                   'objects, this\n'
                   '   should consider the keys of the mapping rather than the '
                   'values or\n'
                   '   the key-item pairs.\n'
                   '\n'
                   '   For objects that don’t define "__contains__()", the '
                   'membership test\n'
                   '   first tries iteration via "__iter__()", then the old '
                   'sequence\n'
                   '   iteration protocol via "__getitem__()", see this '
                   'section kwenye the\n'
                   '   language reference.\n',
 'shifting': 'Shifting operations\n'
             '*******************\n'
             '\n'
             'The shifting operations have lower priority than the arithmetic\n'
             'operations:\n'
             '\n'
             '   shift_expr ::= a_expr | shift_expr ("<<" | ">>") a_expr\n'
             '\n'
             'These operators accept integers kama arguments.  They shift the '
             'first\n'
             'argument to the left ama right by the number of bits given by '
             'the\n'
             'second argument.\n'
             '\n'
             'A right shift by *n* bits ni defined kama floor division by '
             '"pow(2,n)".\n'
             'A left shift by *n* bits ni defined kama multiplication ukijumuisha '
             '"pow(2,n)".\n',
 'slicings': 'Slicings\n'
             '********\n'
             '\n'
             'A slicing selects a range of items kwenye a sequence object (e.g., '
             'a\n'
             'string, tuple ama list).  Slicings may be used kama expressions ama '
             'as\n'
             'targets kwenye assignment ama "del" statements.  The syntax kila a '
             'slicing:\n'
             '\n'
             '   slicing      ::= primary "[" slice_list "]"\n'
             '   slice_list   ::= slice_item ("," slice_item)* [","]\n'
             '   slice_item   ::= expression | proper_slice\n'
             '   proper_slice ::= [lower_bound] ":" [upper_bound] [ ":" '
             '[stride] ]\n'
             '   lower_bound  ::= expression\n'
             '   upper_bound  ::= expression\n'
             '   stride       ::= expression\n'
             '\n'
             'There ni ambiguity kwenye the formal syntax here: anything that '
             'looks like\n'
             'an expression list also looks like a slice list, so any '
             'subscription\n'
             'can be interpreted kama a slicing.  Rather than further '
             'complicating the\n'
             'syntax, this ni disambiguated by defining that kwenye this case the\n'
             'interpretation kama a subscription takes priority over the\n'
             'interpretation kama a slicing (this ni the case ikiwa the slice list\n'
             'contains no proper slice).\n'
             '\n'
             'The semantics kila a slicing are kama follows.  The primary ni '
             'indexed\n'
             '(using the same "__getitem__()" method kama normal subscription) '
             'ukijumuisha a\n'
             'key that ni constructed kutoka the slice list, kama follows.  If the '
             'slice\n'
             'list contains at least one comma, the key ni a tuple containing '
             'the\n'
             'conversion of the slice items; otherwise, the conversion of the '
             'lone\n'
             'slice item ni the key.  The conversion of a slice item that ni '
             'an\n'
             'expression ni that expression.  The conversion of a proper slice '
             'is a\n'
             'slice object (see section The standard type hierarchy) whose '
             '"start",\n'
             '"stop" na "step" attributes are the values of the expressions '
             'given\n'
             'as lower bound, upper bound na stride, respectively, '
             'substituting\n'
             '"Tupu" kila missing expressions.\n',
 'specialattrs': 'Special Attributes\n'
                 '******************\n'
                 '\n'
                 'The implementation adds a few special read-only attributes '
                 'to several\n'
                 'object types, where they are relevant.  Some of these are '
                 'sio reported\n'
                 'by the "dir()" built-in function.\n'
                 '\n'
                 'object.__dict__\n'
                 '\n'
                 '   A dictionary ama other mapping object used to store an '
                 'object’s\n'
                 '   (writable) attributes.\n'
                 '\n'
                 'instance.__class__\n'
                 '\n'
                 '   The kundi to which a kundi instance belongs.\n'
                 '\n'
                 'class.__bases__\n'
                 '\n'
                 '   The tuple of base classes of a kundi object.\n'
                 '\n'
                 'definition.__name__\n'
                 '\n'
                 '   The name of the class, function, method, descriptor, ama '
                 'generator\n'
                 '   instance.\n'
                 '\n'
                 'definition.__qualname__\n'
                 '\n'
                 '   The *qualified name* of the class, function, method, '
                 'descriptor, or\n'
                 '   generator instance.\n'
                 '\n'
                 '   New kwenye version 3.3.\n'
                 '\n'
                 'class.__mro__\n'
                 '\n'
                 '   This attribute ni a tuple of classes that are considered '
                 'when\n'
                 '   looking kila base classes during method resolution.\n'
                 '\n'
                 'class.mro()\n'
                 '\n'
                 '   This method can be overridden by a metakundi to customize '
                 'the\n'
                 '   method resolution order kila its instances.  It ni called '
                 'at class\n'
                 '   instantiation, na its result ni stored kwenye "__mro__".\n'
                 '\n'
                 'class.__subclasses__()\n'
                 '\n'
                 '   Each kundi keeps a list of weak references to its '
                 'immediate\n'
                 '   subclasses.  This method returns a list of all those '
                 'references\n'
                 '   still alive. Example:\n'
                 '\n'
                 '      >>> int.__subclasses__()\n'
                 "      [<kundi 'bool'>]\n"
                 '\n'
                 '-[ Footnotes ]-\n'
                 '\n'
                 '[1] Additional information on these special methods may be '
                 'found\n'
                 '    kwenye the Python Reference Manual (Basic customization).\n'
                 '\n'
                 '[2] As a consequence, the list "[1, 2]" ni considered equal '
                 'to\n'
                 '    "[1.0, 2.0]", na similarly kila tuples.\n'
                 '\n'
                 '[3] They must have since the parser can’t tell the type of '
                 'the\n'
                 '    operands.\n'
                 '\n'
                 '[4] Cased characters are those ukijumuisha general category '
                 'property\n'
                 '    being one of “Lu” (Letter, uppercase), “Ll” (Letter, '
                 'lowercase),\n'
                 '    ama “Lt” (Letter, titlecase).\n'
                 '\n'
                 '[5] To format only a tuple you should therefore provide a\n'
                 '    singleton tuple whose only element ni the tuple to be '
                 'formatted.\n',
 'specialnames': 'Special method names\n'
                 '********************\n'
                 '\n'
                 'A kundi can implement certain operations that are invoked by '
                 'special\n'
                 'syntax (such kama arithmetic operations ama subscripting na '
                 'slicing) by\n'
                 'defining methods ukijumuisha special names. This ni Python’s '
                 'approach to\n'
                 '*operator overloading*, allowing classes to define their own '
                 'behavior\n'
                 'ukijumuisha respect to language operators.  For instance, ikiwa a '
                 'kundi defines\n'
                 'a method named "__getitem__()", na "x" ni an instance of '
                 'this class,\n'
                 'then "x[i]" ni roughly equivalent to "type(x).__getitem__(x, '
                 'i)".\n'
                 'Except where mentioned, attempts to execute an operation '
                 'ashiria an\n'
                 'exception when no appropriate method ni defined (typically\n'
                 '"AttributeError" ama "TypeError").\n'
                 '\n'
                 'Setting a special method to "Tupu" indicates that the '
                 'corresponding\n'
                 'operation ni sio available.  For example, ikiwa a kundi sets '
                 '"__iter__()"\n'
                 'to "Tupu", the kundi ni sio iterable, so calling "iter()" on '
                 'its\n'
                 'instances will ashiria a "TypeError" (without falling back to\n'
                 '"__getitem__()"). [2]\n'
                 '\n'
                 'When implementing a kundi that emulates any built-in type, '
                 'it is\n'
                 'important that the emulation only be implemented to the '
                 'degree that it\n'
                 'makes sense kila the object being modelled.  For example, '
                 'some\n'
                 'sequences may work well ukijumuisha retrieval of individual '
                 'elements, but\n'
                 'extracting a slice may sio make sense.  (One example of this '
                 'is the\n'
                 '"NodeList" interface kwenye the W3C’s Document Object Model.)\n'
                 '\n'
                 '\n'
                 'Basic customization\n'
                 '===================\n'
                 '\n'
                 'object.__new__(cls[, ...])\n'
                 '\n'
                 '   Called to create a new instance of kundi *cls*.  '
                 '"__new__()" ni a\n'
                 '   static method (special-cased so you need sio declare it '
                 'as such)\n'
                 '   that takes the kundi of which an instance was requested '
                 'as its\n'
                 '   first argument.  The remaining arguments are those pitaed '
                 'to the\n'
                 '   object constructor expression (the call to the class).  '
                 'The return\n'
                 '   value of "__new__()" should be the new object instance '
                 '(usually an\n'
                 '   instance of *cls*).\n'
                 '\n'
                 '   Typical implementations create a new instance of the '
                 'kundi by\n'
                 '   invoking the superclass’s "__new__()" method using\n'
                 '   "super().__new__(cls[, ...])" ukijumuisha appropriate arguments '
                 'and then\n'
                 '   modifying the newly-created instance kama necessary before '
                 'returning\n'
                 '   it.\n'
                 '\n'
                 '   If "__new__()" ni invoked during object construction na '
                 'it returns\n'
                 '   an instance ama subkundi of *cls*, then the new '
                 'instance’s\n'
                 '   "__init__()" method will be invoked like "__init__(self[, '
                 '...])",\n'
                 '   where *self* ni the new instance na the remaining '
                 'arguments are\n'
                 '   the same kama were pitaed to the object constructor.\n'
                 '\n'
                 '   If "__new__()" does sio rudisha an instance of *cls*, then '
                 'the new\n'
                 '   instance’s "__init__()" method will sio be invoked.\n'
                 '\n'
                 '   "__new__()" ni intended mainly to allow subclasses of '
                 'immutable\n'
                 '   types (like int, str, ama tuple) to customize instance '
                 'creation.  It\n'
                 '   ni also commonly overridden kwenye custom metaclasses kwenye '
                 'order to\n'
                 '   customize kundi creation.\n'
                 '\n'
                 'object.__init__(self[, ...])\n'
                 '\n'
                 '   Called after the instance has been created (by '
                 '"__new__()"), but\n'
                 '   before it ni returned to the caller.  The arguments are '
                 'those\n'
                 '   pitaed to the kundi constructor expression.  If a base '
                 'kundi has an\n'
                 '   "__init__()" method, the derived class’s "__init__()" '
                 'method, if\n'
                 '   any, must explicitly call it to ensure proper '
                 'initialization of the\n'
                 '   base kundi part of the instance; kila example:\n'
                 '   "super().__init__([args...])".\n'
                 '\n'
                 '   Because "__new__()" na "__init__()" work together kwenye '
                 'constructing\n'
                 '   objects ("__new__()" to create it, na "__init__()" to '
                 'customize\n'
                 '   it), no non-"Tupu" value may be returned by "__init__()"; '
                 'doing so\n'
                 '   will cause a "TypeError" to be raised at runtime.\n'
                 '\n'
                 'object.__del__(self)\n'
                 '\n'
                 '   Called when the instance ni about to be destroyed.  This '
                 'is also\n'
                 '   called a finalizer ama (improperly) a destructor.  If a '
                 'base class\n'
                 '   has a "__del__()" method, the derived class’s "__del__()" '
                 'method,\n'
                 '   ikiwa any, must explicitly call it to ensure proper deletion '
                 'of the\n'
                 '   base kundi part of the instance.\n'
                 '\n'
                 '   It ni possible (though sio recommended!) kila the '
                 '"__del__()" method\n'
                 '   to postpone destruction of the instance by creating a new '
                 'reference\n'
                 '   to it.  This ni called object *resurrection*.  It is\n'
                 '   implementation-dependent whether "__del__()" ni called a '
                 'second\n'
                 '   time when a resurrected object ni about to be destroyed; '
                 'the\n'
                 '   current *CPython* implementation only calls it once.\n'
                 '\n'
                 '   It ni sio guaranteed that "__del__()" methods are called '
                 'for\n'
                 '   objects that still exist when the interpreter exits.\n'
                 '\n'
                 '   Note: "toa x" doesn’t directly call "x.__del__()" — the '
                 'former\n'
                 '     decrements the reference count kila "x" by one, na the '
                 'latter is\n'
                 '     only called when "x"’s reference count reaches zero.\n'
                 '\n'
                 '   **CPython implementation detail:** It ni possible kila a '
                 'reference\n'
                 '   cycle to prevent the reference count of an object kutoka '
                 'going to\n'
                 '   zero.  In this case, the cycle will be later detected na '
                 'deleted\n'
                 '   by the *cyclic garbage collector*.  A common cause of '
                 'reference\n'
                 '   cycles ni when an exception has been caught kwenye a local '
                 'variable.\n'
                 '   The frame’s locals then reference the exception, which '
                 'references\n'
                 '   its own traceback, which references the locals of all '
                 'frames caught\n'
                 '   kwenye the traceback.\n'
                 '\n'
                 '   See also: Documentation kila the "gc" module.\n'
                 '\n'
                 '   Warning: Due to the precarious circumstances under which\n'
                 '     "__del__()" methods are invoked, exceptions that occur '
                 'during\n'
                 '     their execution are ignored, na a warning ni printed '
                 'to\n'
                 '     "sys.stderr" instead. In particular:\n'
                 '\n'
                 '     * "__del__()" can be invoked when arbitrary code ni '
                 'being\n'
                 '       executed, including kutoka any arbitrary thread.  If '
                 '"__del__()"\n'
                 '       needs to take a lock ama invoke any other blocking '
                 'resource, it\n'
                 '       may deadlock kama the resource may already be taken by '
                 'the code\n'
                 '       that gets interrupted to execute "__del__()".\n'
                 '\n'
                 '     * "__del__()" can be executed during interpreter '
                 'shutdown.  As\n'
                 '       a consequence, the global variables it needs to '
                 'access\n'
                 '       (including other modules) may already have been '
                 'deleted ama set\n'
                 '       to "Tupu". Python guarantees that globals whose name '
                 'begins\n'
                 '       ukijumuisha a single underscore are deleted kutoka their '
                 'module before\n'
                 '       other globals are deleted; ikiwa no other references to '
                 'such\n'
                 '       globals exist, this may help kwenye assuring that '
                 'imported modules\n'
                 '       are still available at the time when the "__del__()" '
                 'method is\n'
                 '       called.\n'
                 '\n'
                 'object.__repr__(self)\n'
                 '\n'
                 '   Called by the "repr()" built-in function to compute the '
                 '“official”\n'
                 '   string representation of an object.  If at all possible, '
                 'this\n'
                 '   should look like a valid Python expression that could be '
                 'used to\n'
                 '   recreate an object ukijumuisha the same value (given an '
                 'appropriate\n'
                 '   environment).  If this ni sio possible, a string of the '
                 'form\n'
                 '   "<...some useful description...>" should be returned. The '
                 'return\n'
                 '   value must be a string object. If a kundi defines '
                 '"__repr__()" but\n'
                 '   sio "__str__()", then "__repr__()" ni also used when an '
                 '“informal”\n'
                 '   string representation of instances of that kundi ni '
                 'required.\n'
                 '\n'
                 '   This ni typically used kila debugging, so it ni important '
                 'that the\n'
                 '   representation ni information-rich na unambiguous.\n'
                 '\n'
                 'object.__str__(self)\n'
                 '\n'
                 '   Called by "str(object)" na the built-in functions '
                 '"format()" and\n'
                 '   "andika()" to compute the “informal” ama nicely printable '
                 'string\n'
                 '   representation of an object.  The rudisha value must be a '
                 'string\n'
                 '   object.\n'
                 '\n'
                 '   This method differs kutoka "object.__repr__()" kwenye that '
                 'there ni no\n'
                 '   expectation that "__str__()" rudisha a valid Python '
                 'expression: a\n'
                 '   more convenient ama concise representation can be used.\n'
                 '\n'
                 '   The default implementation defined by the built-in type '
                 '"object"\n'
                 '   calls "object.__repr__()".\n'
                 '\n'
                 'object.__bytes__(self)\n'
                 '\n'
                 '   Called by bytes to compute a byte-string representation '
                 'of an\n'
                 '   object. This should rudisha a "bytes" object.\n'
                 '\n'
                 'object.__format__(self, format_spec)\n'
                 '\n'
                 '   Called by the "format()" built-in function, na by '
                 'extension,\n'
                 '   evaluation of formatted string literals na the '
                 '"str.format()"\n'
                 '   method, to produce a “formatted” string representation of '
                 'an\n'
                 '   object. The *format_spec* argument ni a string that '
                 'contains a\n'
                 '   description of the formatting options desired. The '
                 'interpretation\n'
                 '   of the *format_spec* argument ni up to the type '
                 'implementing\n'
                 '   "__format__()", however most classes will either '
                 'delegate\n'
                 '   formatting to one of the built-in types, ama use a '
                 'similar\n'
                 '   formatting option syntax.\n'
                 '\n'
                 '   See Format Specification Mini-Language kila a description '
                 'of the\n'
                 '   standard formatting syntax.\n'
                 '\n'
                 '   The rudisha value must be a string object.\n'
                 '\n'
                 '   Changed kwenye version 3.4: The __format__ method of "object" '
                 'itself\n'
                 '   raises a "TypeError" ikiwa pitaed any non-empty string.\n'
                 '\n'
                 '   Changed kwenye version 3.7: "object.__format__(x, \'\')" ni '
                 'now\n'
                 '   equivalent to "str(x)" rather than "format(str(self), '
                 '\'\')".\n'
                 '\n'
                 'object.__lt__(self, other)\n'
                 'object.__le__(self, other)\n'
                 'object.__eq__(self, other)\n'
                 'object.__ne__(self, other)\n'
                 'object.__gt__(self, other)\n'
                 'object.__ge__(self, other)\n'
                 '\n'
                 '   These are the so-called “rich comparison” methods. The\n'
                 '   correspondence between operator symbols na method names '
                 'is as\n'
                 '   follows: "x<y" calls "x.__lt__(y)", "x<=y" calls '
                 '"x.__le__(y)",\n'
                 '   "x==y" calls "x.__eq__(y)", "x!=y" calls "x.__ne__(y)", '
                 '"x>y" calls\n'
                 '   "x.__gt__(y)", na "x>=y" calls "x.__ge__(y)".\n'
                 '\n'
                 '   A rich comparison method may rudisha the singleton '
                 '"NotImplemented"\n'
                 '   ikiwa it does sio implement the operation kila a given pair '
                 'of\n'
                 '   arguments. By convention, "Uongo" na "Kweli" are returned '
                 'kila a\n'
                 '   successful comparison. However, these methods can rudisha '
                 'any value,\n'
                 '   so ikiwa the comparison operator ni used kwenye a Boolean '
                 'context (e.g.,\n'
                 '   kwenye the condition of an "if" statement), Python will call '
                 '"bool()"\n'
                 '   on the value to determine ikiwa the result ni true ama '
                 'false.\n'
                 '\n'
                 '   By default, "__ne__()" delegates to "__eq__()" na '
                 'inverts the\n'
                 '   result unless it ni "NotImplemented".  There are no other '
                 'implied\n'
                 '   relationships among the comparison operators, kila '
                 'example, the\n'
                 '   truth of "(x<y ama x==y)" does sio imply "x<=y". To '
                 'automatically\n'
                 '   generate ordering operations kutoka a single root '
                 'operation, see\n'
                 '   "functools.total_ordering()".\n'
                 '\n'
                 '   See the paragraph on "__hash__()" kila some important '
                 'notes on\n'
                 '   creating *hashable* objects which support custom '
                 'comparison\n'
                 '   operations na are usable kama dictionary keys.\n'
                 '\n'
                 '   There are no swapped-argument versions of these methods '
                 '(to be used\n'
                 '   when the left argument does sio support the operation but '
                 'the right\n'
                 '   argument does); rather, "__lt__()" na "__gt__()" are '
                 'each other’s\n'
                 '   reflection, "__le__()" na "__ge__()" are each other’s '
                 'reflection,\n'
                 '   na "__eq__()" na "__ne__()" are their own reflection. '
                 'If the\n'
                 '   operands are of different types, na right operand’s type '
                 'is a\n'
                 '   direct ama indirect subkundi of the left operand’s type, '
                 'the\n'
                 '   reflected method of the right operand has priority, '
                 'otherwise the\n'
                 '   left operand’s method has priority.  Virtual subclassing '
                 'is not\n'
                 '   considered.\n'
                 '\n'
                 'object.__hash__(self)\n'
                 '\n'
                 '   Called by built-in function "hash()" na kila operations '
                 'on members\n'
                 '   of hashed collections including "set", "frozenset", na '
                 '"dict".\n'
                 '   "__hash__()" should rudisha an integer. The only required '
                 'property\n'
                 '   ni that objects which compare equal have the same hash '
                 'value; it is\n'
                 '   advised to mix together the hash values of the components '
                 'of the\n'
                 '   object that also play a part kwenye comparison of objects by '
                 'packing\n'
                 '   them into a tuple na hashing the tuple. Example:\n'
                 '\n'
                 '      eleza __hash__(self):\n'
                 '          rudisha hash((self.name, self.nick, self.color))\n'
                 '\n'
                 '   Note: "hash()" truncates the value returned kutoka an '
                 'object’s\n'
                 '     custom "__hash__()" method to the size of a '
                 '"Py_ssize_t".  This\n'
                 '     ni typically 8 bytes on 64-bit builds na 4 bytes on '
                 '32-bit\n'
                 '     builds. If an object’s   "__hash__()" must interoperate '
                 'on builds\n'
                 '     of different bit sizes, be sure to check the width on '
                 'all\n'
                 '     supported builds.  An easy way to do this ni ukijumuisha '
                 '"python -c\n'
                 '     "agiza sys; andika(sys.hash_info.width)"".\n'
                 '\n'
                 '   If a kundi does sio define an "__eq__()" method it should '
                 'not\n'
                 '   define a "__hash__()" operation either; ikiwa it defines '
                 '"__eq__()"\n'
                 '   but sio "__hash__()", its instances will sio be usable kama '
                 'items in\n'
                 '   hashable collections.  If a kundi defines mutable objects '
                 'and\n'
                 '   implements an "__eq__()" method, it should sio implement\n'
                 '   "__hash__()", since the implementation of hashable '
                 'collections\n'
                 '   requires that a key’s hash value ni immutable (ikiwa the '
                 'object’s hash\n'
                 '   value changes, it will be kwenye the wrong hash bucket).\n'
                 '\n'
                 '   User-defined classes have "__eq__()" na "__hash__()" '
                 'methods by\n'
                 '   default; ukijumuisha them, all objects compare unequal (tatizo '
                 'with\n'
                 '   themselves) na "x.__hash__()" returns an appropriate '
                 'value such\n'
                 '   that "x == y" implies both that "x ni y" na "hash(x) == '
                 'hash(y)".\n'
                 '\n'
                 '   A kundi that overrides "__eq__()" na does sio define '
                 '"__hash__()"\n'
                 '   will have its "__hash__()" implicitly set to "Tupu".  '
                 'When the\n'
                 '   "__hash__()" method of a kundi ni "Tupu", instances of '
                 'the class\n'
                 '   will ashiria an appropriate "TypeError" when a program '
                 'attempts to\n'
                 '   retrieve their hash value, na will also be correctly '
                 'identified as\n'
                 '   unhashable when checking "isinstance(obj,\n'
                 '   collections.abc.Hashable)".\n'
                 '\n'
                 '   If a kundi that overrides "__eq__()" needs to retain the\n'
                 '   implementation of "__hash__()" kutoka a parent class, the '
                 'interpreter\n'
                 '   must be told this explicitly by setting "__hash__ =\n'
                 '   <ParentClass>.__hash__".\n'
                 '\n'
                 '   If a kundi that does sio override "__eq__()" wishes to '
                 'suppress\n'
                 '   hash support, it should include "__hash__ = Tupu" kwenye the '
                 'class\n'
                 '   definition. A kundi which defines its own "__hash__()" '
                 'that\n'
                 '   explicitly raises a "TypeError" would be incorrectly '
                 'identified as\n'
                 '   hashable by an "isinstance(obj, '
                 'collections.abc.Hashable)" call.\n'
                 '\n'
                 '   Note: By default, the "__hash__()" values of str na '
                 'bytes\n'
                 '     objects are “salted” ukijumuisha an unpredictable random '
                 'value.\n'
                 '     Although they remain constant within an individual '
                 'Python\n'
                 '     process, they are sio predictable between repeated '
                 'invocations of\n'
                 '     Python.This ni intended to provide protection against a '
                 'denial-\n'
                 '     of-service caused by carefully-chosen inputs that '
                 'exploit the\n'
                 '     worst case performance of a dict insertion, O(n^2) '
                 'complexity.\n'
                 '     See http://www.ocert.org/advisories/ocert-2011-003.html '
                 'for\n'
                 '     details.Changing hash values affects the iteration '
                 'order of sets.\n'
                 '     Python has never made guarantees about this ordering '
                 '(and it\n'
                 '     typically varies between 32-bit na 64-bit builds).See '
                 'also\n'
                 '     "PYTHONHASHSEED".\n'
                 '\n'
                 '   Changed kwenye version 3.3: Hash randomization ni enabled by '
                 'default.\n'
                 '\n'
                 'object.__bool__(self)\n'
                 '\n'
                 '   Called to implement truth value testing na the built-in '
                 'operation\n'
                 '   "bool()"; should rudisha "Uongo" ama "Kweli".  When this '
                 'method ni not\n'
                 '   defined, "__len__()" ni called, ikiwa it ni defined, na the '
                 'object is\n'
                 '   considered true ikiwa its result ni nonzero.  If a kundi '
                 'defines\n'
                 '   neither "__len__()" nor "__bool__()", all its instances '
                 'are\n'
                 '   considered true.\n'
                 '\n'
                 '\n'
                 'Customizing attribute access\n'
                 '============================\n'
                 '\n'
                 'The following methods can be defined to customize the '
                 'meaning of\n'
                 'attribute access (use of, assignment to, ama deletion of '
                 '"x.name") for\n'
                 'kundi instances.\n'
                 '\n'
                 'object.__getattr__(self, name)\n'
                 '\n'
                 '   Called when the default attribute access fails ukijumuisha an\n'
                 '   "AttributeError" (either "__getattribute__()" raises an\n'
                 '   "AttributeError" because *name* ni sio an instance '
                 'attribute ama an\n'
                 '   attribute kwenye the kundi tree kila "self"; ama "__get__()" of '
                 'a *name*\n'
                 '   property raises "AttributeError").  This method should '
                 'either\n'
                 '   rudisha the (computed) attribute value ama ashiria an '
                 '"AttributeError"\n'
                 '   exception.\n'
                 '\n'
                 '   Note that ikiwa the attribute ni found through the normal '
                 'mechanism,\n'
                 '   "__getattr__()" ni sio called.  (This ni an intentional '
                 'asymmetry\n'
                 '   between "__getattr__()" na "__setattr__()".) This ni '
                 'done both for\n'
                 '   efficiency reasons na because otherwise "__getattr__()" '
                 'would have\n'
                 '   no way to access other attributes of the instance.  Note '
                 'that at\n'
                 '   least kila instance variables, you can fake total control '
                 'by not\n'
                 '   inserting any values kwenye the instance attribute dictionary '
                 '(but\n'
                 '   instead inserting them kwenye another object).  See the\n'
                 '   "__getattribute__()" method below kila a way to actually '
                 'get total\n'
                 '   control over attribute access.\n'
                 '\n'
                 'object.__getattribute__(self, name)\n'
                 '\n'
                 '   Called unconditionally to implement attribute accesses '
                 'for\n'
                 '   instances of the class. If the kundi also defines '
                 '"__getattr__()",\n'
                 '   the latter will sio be called unless "__getattribute__()" '
                 'either\n'
                 '   calls it explicitly ama raises an "AttributeError". This '
                 'method\n'
                 '   should rudisha the (computed) attribute value ama ashiria an\n'
                 '   "AttributeError" exception. In order to avoid infinite '
                 'recursion in\n'
                 '   this method, its implementation should always call the '
                 'base class\n'
                 '   method ukijumuisha the same name to access any attributes it '
                 'needs, for\n'
                 '   example, "object.__getattribute__(self, name)".\n'
                 '\n'
                 '   Note: This method may still be bypitaed when looking up '
                 'special\n'
                 '     methods kama the result of implicit invocation via '
                 'language syntax\n'
                 '     ama built-in functions. See Special method lookup.\n'
                 '\n'
                 'object.__setattr__(self, name, value)\n'
                 '\n'
                 '   Called when an attribute assignment ni attempted.  This '
                 'is called\n'
                 '   instead of the normal mechanism (i.e. store the value kwenye '
                 'the\n'
                 '   instance dictionary). *name* ni the attribute name, '
                 '*value* ni the\n'
                 '   value to be assigned to it.\n'
                 '\n'
                 '   If "__setattr__()" wants to assign to an instance '
                 'attribute, it\n'
                 '   should call the base kundi method ukijumuisha the same name, kila '
                 'example,\n'
                 '   "object.__setattr__(self, name, value)".\n'
                 '\n'
                 'object.__delattr__(self, name)\n'
                 '\n'
                 '   Like "__setattr__()" but kila attribute deletion instead '
                 'of\n'
                 '   assignment.  This should only be implemented ikiwa "toa '
                 'obj.name" is\n'
                 '   meaningful kila the object.\n'
                 '\n'
                 'object.__dir__(self)\n'
                 '\n'
                 '   Called when "dir()" ni called on the object. A sequence '
                 'must be\n'
                 '   returned. "dir()" converts the returned sequence to a '
                 'list and\n'
                 '   sorts it.\n'
                 '\n'
                 '\n'
                 'Customizing module attribute access\n'
                 '-----------------------------------\n'
                 '\n'
                 'Special names "__getattr__" na "__dir__" can be also used '
                 'to\n'
                 'customize access to module attributes. The "__getattr__" '
                 'function at\n'
                 'the module level should accept one argument which ni the '
                 'name of an\n'
                 'attribute na rudisha the computed value ama ashiria an '
                 '"AttributeError".\n'
                 'If an attribute ni sio found on a module object through the '
                 'normal\n'
                 'lookup, i.e. "object.__getattribute__()", then "__getattr__" '
                 'is\n'
                 'searched kwenye the module "__dict__" before raising an '
                 '"AttributeError".\n'
                 'If found, it ni called ukijumuisha the attribute name na the '
                 'result is\n'
                 'returned.\n'
                 '\n'
                 'The "__dir__" function should accept no arguments, na '
                 'rudisha a list\n'
                 'of strings that represents the names accessible on module. '
                 'If present,\n'
                 'this function overrides the standard "dir()" search on a '
                 'module.\n'
                 '\n'
                 'For a more fine grained customization of the module behavior '
                 '(setting\n'
                 'attributes, properties, etc.), one can set the "__class__" '
                 'attribute\n'
                 'of a module object to a subkundi of "types.ModuleType". For '
                 'example:\n'
                 '\n'
                 '   agiza sys\n'
                 '   kutoka types agiza ModuleType\n'
                 '\n'
                 '   kundi VerboseModule(ModuleType):\n'
                 '       eleza __repr__(self):\n'
                 "           rudisha f'Verbose {self.__name__}'\n"
                 '\n'
                 '       eleza __setattr__(self, attr, value):\n'
                 "           andika(f'Setting {attr}...')\n"
                 '           super().__setattr__(attr, value)\n'
                 '\n'
                 '   sys.modules[__name__].__class__ = VerboseModule\n'
                 '\n'
                 'Note: Defining module "__getattr__" na setting module '
                 '"__class__"\n'
                 '  only affect lookups made using the attribute access syntax '
                 '–\n'
                 '  directly accessing the module globals (whether by code '
                 'within the\n'
                 '  module, ama via a reference to the module’s globals '
                 'dictionary) is\n'
                 '  unaffected.\n'
                 '\n'
                 'Changed kwenye version 3.5: "__class__" module attribute ni now '
                 'writable.\n'
                 '\n'
                 'New kwenye version 3.7: "__getattr__" na "__dir__" module '
                 'attributes.\n'
                 '\n'
                 'See also:\n'
                 '\n'
                 '  **PEP 562** - Module __getattr__ na __dir__\n'
                 '     Describes the "__getattr__" na "__dir__" functions on '
                 'modules.\n'
                 '\n'
                 '\n'
                 'Implementing Descriptors\n'
                 '------------------------\n'
                 '\n'
                 'The following methods only apply when an instance of the '
                 'class\n'
                 'containing the method (a so-called *descriptor* class) '
                 'appears kwenye an\n'
                 '*owner* kundi (the descriptor must be kwenye either the owner’s '
                 'class\n'
                 'dictionary ama kwenye the kundi dictionary kila one of its '
                 'parents).  In the\n'
                 'examples below, “the attribute” refers to the attribute '
                 'whose name is\n'
                 'the key of the property kwenye the owner class’ "__dict__".\n'
                 '\n'
                 'object.__get__(self, instance, owner=Tupu)\n'
                 '\n'
                 '   Called to get the attribute of the owner kundi (kundi '
                 'attribute\n'
                 '   access) ama of an instance of that kundi (instance '
                 'attribute\n'
                 '   access). The optional *owner* argument ni the owner '
                 'class, while\n'
                 '   *instance* ni the instance that the attribute was '
                 'accessed through,\n'
                 '   ama "Tupu" when the attribute ni accessed through the '
                 '*owner*.\n'
                 '\n'
                 '   This method should rudisha the computed attribute value ama '
                 'ashiria an\n'
                 '   "AttributeError" exception.\n'
                 '\n'
                 '   **PEP 252** specifies that "__get__()" ni callable ukijumuisha '
                 'one ama two\n'
                 '   arguments.  Python’s own built-in descriptors support '
                 'this\n'
                 '   specification; however, it ni likely that some '
                 'third-party tools\n'
                 '   have descriptors that require both arguments.  Python’s '
                 'own\n'
                 '   "__getattribute__()" implementation always pitaes kwenye both '
                 'arguments\n'
                 '   whether they are required ama not.\n'
                 '\n'
                 'object.__set__(self, instance, value)\n'
                 '\n'
                 '   Called to set the attribute on an instance *instance* of '
                 'the owner\n'
                 '   kundi to a new value, *value*.\n'
                 '\n'
                 '   Note, adding "__set__()" ama "__delete__()" changes the '
                 'kind of\n'
                 '   descriptor to a “data descriptor”.  See Invoking '
                 'Descriptors for\n'
                 '   more details.\n'
                 '\n'
                 'object.__delete__(self, instance)\n'
                 '\n'
                 '   Called to delete the attribute on an instance *instance* '
                 'of the\n'
                 '   owner class.\n'
                 '\n'
                 'object.__set_name__(self, owner, name)\n'
                 '\n'
                 '   Called at the time the owning kundi *owner* ni created. '
                 'The\n'
                 '   descriptor has been assigned to *name*.\n'
                 '\n'
                 '   New kwenye version 3.6.\n'
                 '\n'
                 'The attribute "__objclass__" ni interpreted by the "inspect" '
                 'module as\n'
                 'specifying the kundi where this object was defined (setting '
                 'this\n'
                 'appropriately can assist kwenye runtime introspection of dynamic '
                 'class\n'
                 'attributes). For callables, it may indicate that an instance '
                 'of the\n'
                 'given type (or a subclass) ni expected ama required kama the '
                 'first\n'
                 'positional argument (kila example, CPython sets this '
                 'attribute for\n'
                 'unbound methods that are implemented kwenye C).\n'
                 '\n'
                 '\n'
                 'Invoking Descriptors\n'
                 '--------------------\n'
                 '\n'
                 'In general, a descriptor ni an object attribute ukijumuisha '
                 '“binding\n'
                 'behavior”, one whose attribute access has been overridden by '
                 'methods\n'
                 'in the descriptor protocol:  "__get__()", "__set__()", and\n'
                 '"__delete__()". If any of those methods are defined kila an '
                 'object, it\n'
                 'is said to be a descriptor.\n'
                 '\n'
                 'The default behavior kila attribute access ni to get, set, ama '
                 'delete\n'
                 'the attribute kutoka an object’s dictionary. For instance, '
                 '"a.x" has a\n'
                 'lookup chain starting ukijumuisha "a.__dict__[\'x\']", then\n'
                 '"type(a).__dict__[\'x\']", na continuing through the base '
                 'classes of\n'
                 '"type(a)" excluding metaclasses.\n'
                 '\n'
                 'However, ikiwa the looked-up value ni an object defining one of '
                 'the\n'
                 'descriptor methods, then Python may override the default '
                 'behavior and\n'
                 'invoke the descriptor method instead.  Where this occurs kwenye '
                 'the\n'
                 'precedence chain depends on which descriptor methods were '
                 'defined and\n'
                 'how they were called.\n'
                 '\n'
                 'The starting point kila descriptor invocation ni a binding, '
                 '"a.x". How\n'
                 'the arguments are assembled depends on "a":\n'
                 '\n'
                 'Direct Call\n'
                 '   The simplest na least common call ni when user code '
                 'directly\n'
                 '   invokes a descriptor method:    "x.__get__(a)".\n'
                 '\n'
                 'Instance Binding\n'
                 '   If binding to an object instance, "a.x" ni transformed '
                 'into the\n'
                 '   call: "type(a).__dict__[\'x\'].__get__(a, type(a))".\n'
                 '\n'
                 'Class Binding\n'
                 '   If binding to a class, "A.x" ni transformed into the '
                 'call:\n'
                 '   "A.__dict__[\'x\'].__get__(Tupu, A)".\n'
                 '\n'
                 'Super Binding\n'
                 '   If "a" ni an instance of "super", then the binding '
                 '"super(B,\n'
                 '   obj).m()" searches "obj.__class__.__mro__" kila the base '
                 'kundi "A"\n'
                 '   immediately preceding "B" na then invokes the descriptor '
                 'ukijumuisha the\n'
                 '   call: "A.__dict__[\'m\'].__get__(obj, obj.__class__)".\n'
                 '\n'
                 'For instance bindings, the precedence of descriptor '
                 'invocation depends\n'
                 'on the which descriptor methods are defined.  A descriptor '
                 'can define\n'
                 'any combination of "__get__()", "__set__()" na '
                 '"__delete__()".  If it\n'
                 'does sio define "__get__()", then accessing the attribute '
                 'will return\n'
                 'the descriptor object itself unless there ni a value kwenye the '
                 'object’s\n'
                 'instance dictionary.  If the descriptor defines "__set__()" '
                 'and/or\n'
                 '"__delete__()", it ni a data descriptor; ikiwa it defines '
                 'neither, it is\n'
                 'a non-data descriptor.  Normally, data descriptors define '
                 'both\n'
                 '"__get__()" na "__set__()", wakati non-data descriptors have '
                 'just the\n'
                 '"__get__()" method.  Data descriptors ukijumuisha "__set__()" na '
                 '"__get__()"\n'
                 'defined always override a redefinition kwenye an instance '
                 'dictionary.  In\n'
                 'contrast, non-data descriptors can be overridden by '
                 'instances.\n'
                 '\n'
                 'Python methods (including "staticmethod()" na '
                 '"classmethod()") are\n'
                 'implemented kama non-data descriptors.  Accordingly, instances '
                 'can\n'
                 'redefine na override methods.  This allows individual '
                 'instances to\n'
                 'acquire behaviors that differ kutoka other instances of the '
                 'same class.\n'
                 '\n'
                 'The "property()" function ni implemented kama a data '
                 'descriptor.\n'
                 'Accordingly, instances cansio override the behavior of a '
                 'property.\n'
                 '\n'
                 '\n'
                 '__slots__\n'
                 '---------\n'
                 '\n'
                 '*__slots__* allow us to explicitly declare data members '
                 '(like\n'
                 'properties) na deny the creation of *__dict__* na '
                 '*__weakref__*\n'
                 '(unless explicitly declared kwenye *__slots__* ama available kwenye a '
                 'parent.)\n'
                 '\n'
                 'The space saved over using *__dict__* can be significant. '
                 'Attribute\n'
                 'lookup speed can be significantly improved kama well.\n'
                 '\n'
                 'object.__slots__\n'
                 '\n'
                 '   This kundi variable can be assigned a string, iterable, '
                 'or sequence\n'
                 '   of strings ukijumuisha variable names used by instances.  '
                 '*__slots__*\n'
                 '   reserves space kila the declared variables na prevents '
                 'the\n'
                 '   automatic creation of *__dict__* na *__weakref__* kila '
                 'each\n'
                 '   instance.\n'
                 '\n'
                 '\n'
                 'Notes on using *__slots__*\n'
                 '~~~~~~~~~~~~~~~~~~~~~~~~~~\n'
                 '\n'
                 '* When inheriting kutoka a kundi without *__slots__*, the '
                 '*__dict__*\n'
                 '  na *__weakref__* attribute of the instances will always '
                 'be\n'
                 '  accessible.\n'
                 '\n'
                 '* Without a *__dict__* variable, instances cansio be '
                 'assigned new\n'
                 '  variables sio listed kwenye the *__slots__* definition.  '
                 'Attempts to\n'
                 '  assign to an unlisted variable name raises '
                 '"AttributeError". If\n'
                 '  dynamic assignment of new variables ni desired, then add\n'
                 '  "\'__dict__\'" to the sequence of strings kwenye the '
                 '*__slots__*\n'
                 '  declaration.\n'
                 '\n'
                 '* Without a *__weakref__* variable kila each instance, '
                 'classes\n'
                 '  defining *__slots__* do sio support weak references to '
                 'its\n'
                 '  instances. If weak reference support ni needed, then add\n'
                 '  "\'__weakref__\'" to the sequence of strings kwenye the '
                 '*__slots__*\n'
                 '  declaration.\n'
                 '\n'
                 '* *__slots__* are implemented at the kundi level by '
                 'creating\n'
                 '  descriptors (Implementing Descriptors) kila each variable '
                 'name.  As a\n'
                 '  result, kundi attributes cansio be used to set default '
                 'values for\n'
                 '  instance variables defined by *__slots__*; otherwise, the '
                 'class\n'
                 '  attribute would overwrite the descriptor assignment.\n'
                 '\n'
                 '* The action of a *__slots__* declaration ni sio limited to '
                 'the\n'
                 '  kundi where it ni defined.  *__slots__* declared kwenye '
                 'parents are\n'
                 '  available kwenye child classes. However, child subclasses will '
                 'get a\n'
                 '  *__dict__* na *__weakref__* unless they also define '
                 '*__slots__*\n'
                 '  (which should only contain names of any *additional* '
                 'slots).\n'
                 '\n'
                 '* If a kundi defines a slot also defined kwenye a base class, '
                 'the\n'
                 '  instance variable defined by the base kundi slot ni '
                 'inaccessible\n'
                 '  (tatizo by retrieving its descriptor directly kutoka the '
                 'base class).\n'
                 '  This renders the meaning of the program undefined.  In the '
                 'future, a\n'
                 '  check may be added to prevent this.\n'
                 '\n'
                 '* Tupumpty *__slots__* does sio work kila classes derived '
                 'from\n'
                 '  “variable-length” built-in types such kama "int", "bytes" '
                 'and "tuple".\n'
                 '\n'
                 '* Any non-string iterable may be assigned to *__slots__*. '
                 'Mappings\n'
                 '  may also be used; however, kwenye the future, special meaning '
                 'may be\n'
                 '  assigned to the values corresponding to each key.\n'
                 '\n'
                 '* *__class__* assignment works only ikiwa both classes have the '
                 'same\n'
                 '  *__slots__*.\n'
                 '\n'
                 '* Multiple inheritance ukijumuisha multiple slotted parent classes '
                 'can be\n'
                 '  used, but only one parent ni allowed to have attributes '
                 'created by\n'
                 '  slots (the other bases must have empty slot layouts) - '
                 'violations\n'
                 '  ashiria "TypeError".\n'
                 '\n'
                 '\n'
                 'Customizing kundi creation\n'
                 '==========================\n'
                 '\n'
                 'Whenever a kundi inherits kutoka another class, '
                 '*__init_subclass__* is\n'
                 'called on that class. This way, it ni possible to write '
                 'classes which\n'
                 'change the behavior of subclasses. This ni closely related '
                 'to class\n'
                 'decorators, but where kundi decorators only affect the '
                 'specific class\n'
                 'they’re applied to, "__init_subclass__" solely applies to '
                 'future\n'
                 'subclasses of the kundi defining the method.\n'
                 '\n'
                 'classmethod object.__init_subclass__(cls)\n'
                 '\n'
                 '   This method ni called whenever the containing kundi ni '
                 'subclassed.\n'
                 '   *cls* ni then the new subclass. If defined kama a normal '
                 'instance\n'
                 '   method, this method ni implicitly converted to a kundi '
                 'method.\n'
                 '\n'
                 '   Keyword arguments which are given to a new kundi are '
                 'pitaed to the\n'
                 '   parent’s kundi "__init_subclass__". For compatibility '
                 'ukijumuisha other\n'
                 '   classes using "__init_subclass__", one should take out '
                 'the needed\n'
                 '   keyword arguments na pita the others over to the base '
                 'class, as\n'
                 '   in:\n'
                 '\n'
                 '      kundi Philosopher:\n'
                 '          eleza __init_subclass__(cls, /, default_name, '
                 '**kwargs):\n'
                 '              super().__init_subclass__(**kwargs)\n'
                 '              cls.default_name = default_name\n'
                 '\n'
                 '      kundi AustralianPhilosopher(Philosopher, '
                 'default_name="Bruce"):\n'
                 '          pita\n'
                 '\n'
                 '   The default implementation "object.__init_subclass__" '
                 'does nothing,\n'
                 '   but raises an error ikiwa it ni called ukijumuisha any arguments.\n'
                 '\n'
                 '   Note: The metakundi hint "metaclass" ni consumed by the '
                 'rest of\n'
                 '     the type machinery, na ni never pitaed to '
                 '"__init_subclass__"\n'
                 '     implementations. The actual metakundi (rather than the '
                 'explicit\n'
                 '     hint) can be accessed kama "type(cls)".\n'
                 '\n'
                 '   New kwenye version 3.6.\n'
                 '\n'
                 '\n'
                 'Metaclasses\n'
                 '-----------\n'
                 '\n'
                 'By default, classes are constructed using "type()". The '
                 'kundi body is\n'
                 'executed kwenye a new namespace na the kundi name ni bound '
                 'locally to the\n'
                 'result of "type(name, bases, namespace)".\n'
                 '\n'
                 'The kundi creation process can be customized by pitaing the\n'
                 '"metaclass" keyword argument kwenye the kundi definition line, '
                 'or by\n'
                 'inheriting kutoka an existing kundi that included such an '
                 'argument. In\n'
                 'the following example, both "MyClass" na "MySubclass" are '
                 'instances\n'
                 'of "Meta":\n'
                 '\n'
                 '   kundi Meta(type):\n'
                 '       pita\n'
                 '\n'
                 '   kundi MyClass(metaclass=Meta):\n'
                 '       pita\n'
                 '\n'
                 '   kundi MySubclass(MyClass):\n'
                 '       pita\n'
                 '\n'
                 'Any other keyword arguments that are specified kwenye the kundi '
                 'definition\n'
                 'are pitaed through to all metakundi operations described '
                 'below.\n'
                 '\n'
                 'When a kundi definition ni executed, the following steps '
                 'occur:\n'
                 '\n'
                 '* MRO entries are resolved;\n'
                 '\n'
                 '* the appropriate metakundi ni determined;\n'
                 '\n'
                 '* the kundi namespace ni prepared;\n'
                 '\n'
                 '* the kundi body ni executed;\n'
                 '\n'
                 '* the kundi object ni created.\n'
                 '\n'
                 '\n'
                 'Resolving MRO entries\n'
                 '---------------------\n'
                 '\n'
                 'If a base that appears kwenye kundi definition ni sio an '
                 'instance of\n'
                 '"type", then an "__mro_entries__" method ni searched on it. '
                 'If found,\n'
                 'it ni called ukijumuisha the original bases tuple. This method must '
                 'rudisha a\n'
                 'tuple of classes that will be used instead of this base. The '
                 'tuple may\n'
                 'be empty, kwenye such case the original base ni ignored.\n'
                 '\n'
                 'See also: **PEP 560** - Core support kila typing module na '
                 'generic\n'
                 '  types\n'
                 '\n'
                 '\n'
                 'Determining the appropriate metaclass\n'
                 '-------------------------------------\n'
                 '\n'
                 'The appropriate metakundi kila a kundi definition ni '
                 'determined as\n'
                 'follows:\n'
                 '\n'
                 '* ikiwa no bases na no explicit metakundi are given, then '
                 '"type()" is\n'
                 '  used;\n'
                 '\n'
                 '* ikiwa an explicit metakundi ni given na it ni *not* an '
                 'instance of\n'
                 '  "type()", then it ni used directly kama the metaclass;\n'
                 '\n'
                 '* ikiwa an instance of "type()" ni given kama the explicit '
                 'metaclass, or\n'
                 '  bases are defined, then the most derived metakundi ni '
                 'used.\n'
                 '\n'
                 'The most derived metakundi ni selected kutoka the explicitly '
                 'specified\n'
                 'metakundi (ikiwa any) na the metaclasses (i.e. "type(cls)") of '
                 'all\n'
                 'specified base classes. The most derived metakundi ni one '
                 'which ni a\n'
                 'subtype of *all* of these candidate metaclasses. If none of '
                 'the\n'
                 'candidate metaclasses meets that criterion, then the kundi '
                 'definition\n'
                 'will fail ukijumuisha "TypeError".\n'
                 '\n'
                 '\n'
                 'Preparing the kundi namespace\n'
                 '-----------------------------\n'
                 '\n'
                 'Once the appropriate metakundi has been identified, then the '
                 'class\n'
                 'namespace ni prepared. If the metakundi has a "__prepare__" '
                 'attribute,\n'
                 'it ni called kama "namespace = metaclass.__prepare__(name, '
                 'bases,\n'
                 '**kwds)" (where the additional keyword arguments, ikiwa any, '
                 'come from\n'
                 'the kundi definition).\n'
                 '\n'
                 'If the metakundi has no "__prepare__" attribute, then the '
                 'class\n'
                 'namespace ni initialised kama an empty ordered mapping.\n'
                 '\n'
                 'See also:\n'
                 '\n'
                 '  **PEP 3115** - Metaclasses kwenye Python 3000\n'
                 '     Introduced the "__prepare__" namespace hook\n'
                 '\n'
                 '\n'
                 'Executing the kundi body\n'
                 '------------------------\n'
                 '\n'
                 'The kundi body ni executed (approximately) kama "exec(body, '
                 'globals(),\n'
                 'namespace)". The key difference kutoka a normal call to '
                 '"exec()" ni that\n'
                 'lexical scoping allows the kundi body (including any '
                 'methods) to\n'
                 'reference names kutoka the current na outer scopes when the '
                 'class\n'
                 'definition occurs inside a function.\n'
                 '\n'
                 'However, even when the kundi definition occurs inside the '
                 'function,\n'
                 'methods defined inside the kundi still cansio see names '
                 'defined at the\n'
                 'kundi scope. Class variables must be accessed through the '
                 'first\n'
                 'parameter of instance ama kundi methods, ama through the '
                 'implicit\n'
                 'lexically scoped "__class__" reference described kwenye the next '
                 'section.\n'
                 '\n'
                 '\n'
                 'Creating the kundi object\n'
                 '-------------------------\n'
                 '\n'
                 'Once the kundi namespace has been populated by executing the '
                 'class\n'
                 'body, the kundi object ni created by calling '
                 '"metaclass(name, bases,\n'
                 'namespace, **kwds)" (the additional keywords pitaed here are '
                 'the same\n'
                 'as those pitaed to "__prepare__").\n'
                 '\n'
                 'This kundi object ni the one that will be referenced by the '
                 'zero-\n'
                 'argument form of "super()". "__class__" ni an implicit '
                 'closure\n'
                 'reference created by the compiler ikiwa any methods kwenye a kundi '
                 'body refer\n'
                 'to either "__class__" ama "super". This allows the zero '
                 'argument form\n'
                 'of "super()" to correctly identify the kundi being defined '
                 'based on\n'
                 'lexical scoping, wakati the kundi ama instance that was used '
                 'to make the\n'
                 'current call ni identified based on the first argument '
                 'pitaed to the\n'
                 'method.\n'
                 '\n'
                 '**CPython implementation detail:** In CPython 3.6 na later, '
                 'the\n'
                 '"__class__" cell ni pitaed to the metakundi kama a '
                 '"__classcell__" entry\n'
                 'in the kundi namespace. If present, this must be propagated '
                 'up to the\n'
                 '"type.__new__" call kwenye order kila the kundi to be '
                 'initialised\n'
                 'correctly. Failing to do so will result kwenye a "RuntimeError" '
                 'in Python\n'
                 '3.8.\n'
                 '\n'
                 'When using the default metakundi "type", ama any metakundi '
                 'that\n'
                 'ultimately calls "type.__new__", the following additional\n'
                 'customisation steps are invoked after creating the kundi '
                 'object:\n'
                 '\n'
                 '* first, "type.__new__" collects all of the descriptors kwenye '
                 'the class\n'
                 '  namespace that define a "__set_name__()" method;\n'
                 '\n'
                 '* second, all of these "__set_name__" methods are called '
                 'ukijumuisha the\n'
                 '  kundi being defined na the assigned name of that '
                 'particular\n'
                 '  descriptor;\n'
                 '\n'
                 '* finally, the "__init_subclass__()" hook ni called on the '
                 'immediate\n'
                 '  parent of the new kundi kwenye its method resolution order.\n'
                 '\n'
                 'After the kundi object ni created, it ni pitaed to the '
                 'class\n'
                 'decorators included kwenye the kundi definition (ikiwa any) na the '
                 'resulting\n'
                 'object ni bound kwenye the local namespace kama the defined '
                 'class.\n'
                 '\n'
                 'When a new kundi ni created by "type.__new__", the object '
                 'provided as\n'
                 'the namespace parameter ni copied to a new ordered mapping '
                 'and the\n'
                 'original object ni discarded. The new copy ni wrapped kwenye a '
                 'read-only\n'
                 'proxy, which becomes the "__dict__" attribute of the kundi '
                 'object.\n'
                 '\n'
                 'See also:\n'
                 '\n'
                 '  **PEP 3135** - New super\n'
                 '     Describes the implicit "__class__" closure reference\n'
                 '\n'
                 '\n'
                 'Uses kila metaclasses\n'
                 '--------------------\n'
                 '\n'
                 'The potential uses kila metaclasses are boundless. Some ideas '
                 'that have\n'
                 'been explored include enum, logging, interface checking, '
                 'automatic\n'
                 'delegation, automatic property creation, proxies, '
                 'frameworks, and\n'
                 'automatic resource locking/synchronization.\n'
                 '\n'
                 '\n'
                 'Customizing instance na subkundi checks\n'
                 '========================================\n'
                 '\n'
                 'The following methods are used to override the default '
                 'behavior of the\n'
                 '"isinstance()" na "issubclass()" built-in functions.\n'
                 '\n'
                 'In particular, the metakundi "abc.ABCMeta" implements these '
                 'methods in\n'
                 'order to allow the addition of Abstract Base Classes (ABCs) '
                 'as\n'
                 '“virtual base classes” to any kundi ama type (including '
                 'built-in\n'
                 'types), including other ABCs.\n'
                 '\n'
                 'class.__instancecheck__(self, instance)\n'
                 '\n'
                 '   Return true ikiwa *instance* should be considered a (direct '
                 'or\n'
                 '   indirect) instance of *class*. If defined, called to '
                 'implement\n'
                 '   "isinstance(instance, class)".\n'
                 '\n'
                 'class.__subclasscheck__(self, subclass)\n'
                 '\n'
                 '   Return true ikiwa *subclass* should be considered a (direct '
                 'or\n'
                 '   indirect) subkundi of *class*.  If defined, called to '
                 'implement\n'
                 '   "issubclass(subclass, class)".\n'
                 '\n'
                 'Note that these methods are looked up on the type '
                 '(metaclass) of a\n'
                 'class.  They cansio be defined kama kundi methods kwenye the '
                 'actual class.\n'
                 'This ni consistent ukijumuisha the lookup of special methods that '
                 'are called\n'
                 'on instances, only kwenye this case the instance ni itself a '
                 'class.\n'
                 '\n'
                 'See also:\n'
                 '\n'
                 '  **PEP 3119** - Introducing Abstract Base Classes\n'
                 '     Includes the specification kila customizing '
                 '"isinstance()" and\n'
                 '     "issubclass()" behavior through "__instancecheck__()" '
                 'and\n'
                 '     "__subclasscheck__()", ukijumuisha motivation kila this '
                 'functionality in\n'
                 '     the context of adding Abstract Base Classes (see the '
                 '"abc"\n'
                 '     module) to the language.\n'
                 '\n'
                 '\n'
                 'Emulating generic types\n'
                 '=======================\n'
                 '\n'
                 'One can implement the generic kundi syntax kama specified by '
                 '**PEP 484**\n'
                 '(kila example "List[int]") by defining a special method:\n'
                 '\n'
                 'classmethod object.__class_getitem__(cls, key)\n'
                 '\n'
                 '   Return an object representing the specialization of a '
                 'generic class\n'
                 '   by type arguments found kwenye *key*.\n'
                 '\n'
                 'This method ni looked up on the kundi object itself, na '
                 'when defined\n'
                 'in the kundi body, this method ni implicitly a kundi '
                 'method.  Note,\n'
                 'this mechanism ni primarily reserved kila use ukijumuisha static '
                 'type hints,\n'
                 'other usage ni discouraged.\n'
                 '\n'
                 'See also: **PEP 560** - Core support kila typing module na '
                 'generic\n'
                 '  types\n'
                 '\n'
                 '\n'
                 'Emulating callable objects\n'
                 '==========================\n'
                 '\n'
                 'object.__call__(self[, args...])\n'
                 '\n'
                 '   Called when the instance ni “called” kama a function; ikiwa '
                 'this method\n'
                 '   ni defined, "x(arg1, arg2, ...)" ni a shorthand for\n'
                 '   "x.__call__(arg1, arg2, ...)".\n'
                 '\n'
                 '\n'
                 'Emulating container types\n'
                 '=========================\n'
                 '\n'
                 'The following methods can be defined to implement container '
                 'objects.\n'
                 'Containers usually are sequences (such kama lists ama tuples) '
                 'or mappings\n'
                 '(like dictionaries), but can represent other containers kama '
                 'well.  The\n'
                 'first set of methods ni used either to emulate a sequence ama '
                 'to\n'
                 'emulate a mapping; the difference ni that kila a sequence, '
                 'the\n'
                 'allowable keys should be the integers *k* kila which "0 <= k '
                 '< N" where\n'
                 '*N* ni the length of the sequence, ama slice objects, which '
                 'define a\n'
                 'range of items.  It ni also recommended that mappings '
                 'provide the\n'
                 'methods "keys()", "values()", "items()", "get()", '
                 '"clear()",\n'
                 '"setdefault()", "pop()", "popitem()", "copy()", na '
                 '"update()"\n'
                 'behaving similar to those kila Python’s standard dictionary '
                 'objects.\n'
                 'The "collections.abc" module provides a "MutableMapping" '
                 'abstract base\n'
                 'kundi to help create those methods kutoka a base set of '
                 '"__getitem__()",\n'
                 '"__setitem__()", "__delitem__()", na "keys()". Mutable '
                 'sequences\n'
                 'should provide methods "append()", "count()", "index()", '
                 '"extend()",\n'
                 '"insert()", "pop()", "remove()", "reverse()" na "sort()", '
                 'like Python\n'
                 'standard list objects.  Finally, sequence types should '
                 'implement\n'
                 'addition (meaning concatenation) na multiplication '
                 '(meaning\n'
                 'repetition) by defining the methods "__add__()", '
                 '"__radd__()",\n'
                 '"__iadd__()", "__mul__()", "__rmul__()" na "__imul__()" '
                 'described\n'
                 'below; they should sio define other numerical operators.  It '
                 'is\n'
                 'recommended that both mappings na sequences implement the\n'
                 '"__contains__()" method to allow efficient use of the "in" '
                 'operator;\n'
                 'kila mappings, "in" should search the mapping’s keys; kila '
                 'sequences, it\n'
                 'should search through the values.  It ni further recommended '
                 'that both\n'
                 'mappings na sequences implement the "__iter__()" method to '
                 'allow\n'
                 'efficient iteration through the container; kila mappings, '
                 '"__iter__()"\n'
                 'should be the same kama "keys()"; kila sequences, it should '
                 'iterate\n'
                 'through the values.\n'
                 '\n'
                 'object.__len__(self)\n'
                 '\n'
                 '   Called to implement the built-in function "len()".  '
                 'Should return\n'
                 '   the length of the object, an integer ">=" 0.  Also, an '
                 'object that\n'
                 '   doesn’t define a "__bool__()" method na whose '
                 '"__len__()" method\n'
                 '   returns zero ni considered to be false kwenye a Boolean '
                 'context.\n'
                 '\n'
                 '   **CPython implementation detail:** In CPython, the length '
                 'is\n'
                 '   required to be at most "sys.maxsize". If the length ni '
                 'larger than\n'
                 '   "sys.maxsize" some features (such kama "len()") may raise\n'
                 '   "OverflowError".  To prevent raising "OverflowError" by '
                 'truth value\n'
                 '   testing, an object must define a "__bool__()" method.\n'
                 '\n'
                 'object.__length_hint__(self)\n'
                 '\n'
                 '   Called to implement "operator.length_hint()". Should '
                 'rudisha an\n'
                 '   estimated length kila the object (which may be greater ama '
                 'less than\n'
                 '   the actual length). The length must be an integer ">=" 0. '
                 'The\n'
                 '   rudisha value may also be "NotImplemented", which ni '
                 'treated the\n'
                 '   same kama ikiwa the "__length_hint__" method didn’t exist at '
                 'all. This\n'
                 '   method ni purely an optimization na ni never required '
                 'for\n'
                 '   correctness.\n'
                 '\n'
                 '   New kwenye version 3.4.\n'
                 '\n'
                 'Note: Slicing ni done exclusively ukijumuisha the following three '
                 'methods.\n'
                 '  A call like\n'
                 '\n'
                 '     a[1:2] = b\n'
                 '\n'
                 '  ni translated to\n'
                 '\n'
                 '     a[slice(1, 2, Tupu)] = b\n'
                 '\n'
                 '  na so forth.  Missing slice items are always filled kwenye '
                 'ukijumuisha "Tupu".\n'
                 '\n'
                 'object.__getitem__(self, key)\n'
                 '\n'
                 '   Called to implement evaluation of "self[key]". For '
                 'sequence types,\n'
                 '   the accepted keys should be integers na slice objects.  '
                 'Note that\n'
                 '   the special interpretation of negative indexes (ikiwa the '
                 'kundi wishes\n'
                 '   to emulate a sequence type) ni up to the "__getitem__()" '
                 'method. If\n'
                 '   *key* ni of an inappropriate type, "TypeError" may be '
                 'raised; ikiwa of\n'
                 '   a value outside the set of indexes kila the sequence '
                 '(after any\n'
                 '   special interpretation of negative values), "IndexError" '
                 'should be\n'
                 '   raised. For mapping types, ikiwa *key* ni missing (haiko kwenye '
                 'the\n'
                 '   container), "KeyError" should be raised.\n'
                 '\n'
                 '   Note: "for" loops expect that an "IndexError" will be '
                 'raised for\n'
                 '     illegal indexes to allow proper detection of the end of '
                 'the\n'
                 '     sequence.\n'
                 '\n'
                 'object.__setitem__(self, key, value)\n'
                 '\n'
                 '   Called to implement assignment to "self[key]".  Same note '
                 'as for\n'
                 '   "__getitem__()".  This should only be implemented kila '
                 'mappings if\n'
                 '   the objects support changes to the values kila keys, ama ikiwa '
                 'new keys\n'
                 '   can be added, ama kila sequences ikiwa elements can be '
                 'replaced.  The\n'
                 '   same exceptions should be raised kila improper *key* '
                 'values kama for\n'
                 '   the "__getitem__()" method.\n'
                 '\n'
                 'object.__delitem__(self, key)\n'
                 '\n'
                 '   Called to implement deletion of "self[key]".  Same note '
                 'as for\n'
                 '   "__getitem__()".  This should only be implemented kila '
                 'mappings if\n'
                 '   the objects support removal of keys, ama kila sequences ikiwa '
                 'elements\n'
                 '   can be removed kutoka the sequence.  The same exceptions '
                 'should be\n'
                 '   raised kila improper *key* values kama kila the '
                 '"__getitem__()" method.\n'
                 '\n'
                 'object.__missing__(self, key)\n'
                 '\n'
                 '   Called by "dict"."__getitem__()" to implement "self[key]" '
                 'kila dict\n'
                 '   subclasses when key ni haiko kwenye the dictionary.\n'
                 '\n'
                 'object.__iter__(self)\n'
                 '\n'
                 '   This method ni called when an iterator ni required kila a '
                 'container.\n'
                 '   This method should rudisha a new iterator object that can '
                 'iterate\n'
                 '   over all the objects kwenye the container.  For mappings, it '
                 'should\n'
                 '   iterate over the keys of the container.\n'
                 '\n'
                 '   Iterator objects also need to implement this method; they '
                 'are\n'
                 '   required to rudisha themselves.  For more information on '
                 'iterator\n'
                 '   objects, see Iterator Types.\n'
                 '\n'
                 'object.__reversed__(self)\n'
                 '\n'
                 '   Called (ikiwa present) by the "reversed()" built-in to '
                 'implement\n'
                 '   reverse iteration.  It should rudisha a new iterator '
                 'object that\n'
                 '   iterates over all the objects kwenye the container kwenye reverse '
                 'order.\n'
                 '\n'
                 '   If the "__reversed__()" method ni sio provided, the '
                 '"reversed()"\n'
                 '   built-in will fall back to using the sequence protocol '
                 '("__len__()"\n'
                 '   na "__getitem__()").  Objects that support the sequence '
                 'protocol\n'
                 '   should only provide "__reversed__()" ikiwa they can provide '
                 'an\n'
                 '   implementation that ni more efficient than the one '
                 'provided by\n'
                 '   "reversed()".\n'
                 '\n'
                 'The membership test operators ("in" na "sio in") are '
                 'normally\n'
                 'implemented kama an iteration through a sequence.  However, '
                 'container\n'
                 'objects can supply the following special method ukijumuisha a more '
                 'efficient\n'
                 'implementation, which also does sio require the object be a '
                 'sequence.\n'
                 '\n'
                 'object.__contains__(self, item)\n'
                 '\n'
                 '   Called to implement membership test operators.  Should '
                 'rudisha true\n'
                 '   ikiwa *item* ni kwenye *self*, false otherwise.  For mapping '
                 'objects, this\n'
                 '   should consider the keys of the mapping rather than the '
                 'values or\n'
                 '   the key-item pairs.\n'
                 '\n'
                 '   For objects that don’t define "__contains__()", the '
                 'membership test\n'
                 '   first tries iteration via "__iter__()", then the old '
                 'sequence\n'
                 '   iteration protocol via "__getitem__()", see this section '
                 'in the\n'
                 '   language reference.\n'
                 '\n'
                 '\n'
                 'Emulating numeric types\n'
                 '=======================\n'
                 '\n'
                 'The following methods can be defined to emulate numeric '
                 'objects.\n'
                 'Methods corresponding to operations that are sio supported '
                 'by the\n'
                 'particular kind of number implemented (e.g., bitwise '
                 'operations for\n'
                 'non-integral numbers) should be left undefined.\n'
                 '\n'
                 'object.__add__(self, other)\n'
                 'object.__sub__(self, other)\n'
                 'object.__mul__(self, other)\n'
                 'object.__matmul__(self, other)\n'
                 'object.__truediv__(self, other)\n'
                 'object.__floordiv__(self, other)\n'
                 'object.__mod__(self, other)\n'
                 'object.__divmod__(self, other)\n'
                 'object.__pow__(self, other[, modulo])\n'
                 'object.__lshift__(self, other)\n'
                 'object.__rshift__(self, other)\n'
                 'object.__and__(self, other)\n'
                 'object.__xor__(self, other)\n'
                 'object.__or__(self, other)\n'
                 '\n'
                 '   These methods are called to implement the binary '
                 'arithmetic\n'
                 '   operations ("+", "-", "*", "@", "/", "//", "%", '
                 '"divmod()",\n'
                 '   "pow()", "**", "<<", ">>", "&", "^", "|").  For instance, '
                 'to\n'
                 '   evaluate the expression "x + y", where *x* ni an instance '
                 'of a\n'
                 '   kundi that has an "__add__()" method, "x.__add__(y)" ni '
                 'called.\n'
                 '   The "__divmod__()" method should be the equivalent to '
                 'using\n'
                 '   "__floordiv__()" na "__mod__()"; it should sio be '
                 'related to\n'
                 '   "__truediv__()".  Note that "__pow__()" should be defined '
                 'to accept\n'
                 '   an optional third argument ikiwa the ternary version of the '
                 'built-in\n'
                 '   "pow()" function ni to be supported.\n'
                 '\n'
                 '   If one of those methods does sio support the operation '
                 'ukijumuisha the\n'
                 '   supplied arguments, it should rudisha "NotImplemented".\n'
                 '\n'
                 'object.__radd__(self, other)\n'
                 'object.__rsub__(self, other)\n'
                 'object.__rmul__(self, other)\n'
                 'object.__rmatmul__(self, other)\n'
                 'object.__rtruediv__(self, other)\n'
                 'object.__rfloordiv__(self, other)\n'
                 'object.__rmod__(self, other)\n'
                 'object.__rdivmod__(self, other)\n'
                 'object.__rpow__(self, other)\n'
                 'object.__rlshift__(self, other)\n'
                 'object.__rrshift__(self, other)\n'
                 'object.__rand__(self, other)\n'
                 'object.__rxor__(self, other)\n'
                 'object.__ror__(self, other)\n'
                 '\n'
                 '   These methods are called to implement the binary '
                 'arithmetic\n'
                 '   operations ("+", "-", "*", "@", "/", "//", "%", '
                 '"divmod()",\n'
                 '   "pow()", "**", "<<", ">>", "&", "^", "|") ukijumuisha reflected '
                 '(swapped)\n'
                 '   operands.  These functions are only called ikiwa the left '
                 'operand does\n'
                 '   sio support the corresponding operation [3] na the '
                 'operands are of\n'
                 '   different types. [4] For instance, to evaluate the '
                 'expression "x -\n'
                 '   y", where *y* ni an instance of a kundi that has an '
                 '"__rsub__()"\n'
                 '   method, "y.__rsub__(x)" ni called ikiwa "x.__sub__(y)" '
                 'returns\n'
                 '   *NotImplemented*.\n'
                 '\n'
                 '   Note that ternary "pow()" will sio try calling '
                 '"__rpow__()" (the\n'
                 '   coercion rules would become too complicated).\n'
                 '\n'
                 '   Note: If the right operand’s type ni a subkundi of the '
                 'left\n'
                 '     operand’s type na that subkundi provides the reflected '
                 'method\n'
                 '     kila the operation, this method will be called before '
                 'the left\n'
                 '     operand’s non-reflected method.  This behavior allows '
                 'subclasses\n'
                 '     to override their ancestors’ operations.\n'
                 '\n'
                 'object.__iadd__(self, other)\n'
                 'object.__isub__(self, other)\n'
                 'object.__imul__(self, other)\n'
                 'object.__imatmul__(self, other)\n'
                 'object.__itruediv__(self, other)\n'
                 'object.__ifloordiv__(self, other)\n'
                 'object.__imod__(self, other)\n'
                 'object.__ipow__(self, other[, modulo])\n'
                 'object.__ilshift__(self, other)\n'
                 'object.__irshift__(self, other)\n'
                 'object.__iand__(self, other)\n'
                 'object.__ixor__(self, other)\n'
                 'object.__ior__(self, other)\n'
                 '\n'
                 '   These methods are called to implement the augmented '
                 'arithmetic\n'
                 '   assignments ("+=", "-=", "*=", "@=", "/=", "//=", "%=", '
                 '"**=",\n'
                 '   "<<=", ">>=", "&=", "^=", "|=").  These methods should '
                 'attempt to\n'
                 '   do the operation in-place (modifying *self*) na rudisha '
                 'the result\n'
                 '   (which could be, but does sio have to be, *self*).  If a '
                 'specific\n'
                 '   method ni sio defined, the augmented assignment falls '
                 'back to the\n'
                 '   normal methods.  For instance, ikiwa *x* ni an instance of a '
                 'class\n'
                 '   ukijumuisha an "__iadd__()" method, "x += y" ni equivalent to "x '
                 '=\n'
                 '   x.__iadd__(y)" . Otherwise, "x.__add__(y)" na '
                 '"y.__radd__(x)" are\n'
                 '   considered, kama ukijumuisha the evaluation of "x + y". In '
                 'certain\n'
                 '   situations, augmented assignment can result kwenye unexpected '
                 'errors\n'
                 '   (see Why does a_tuple[i] += [‘item’] ashiria an exception '
                 'when the\n'
                 '   addition works?), but this behavior ni kwenye fact part of '
                 'the data\n'
                 '   model.\n'
                 '\n'
                 'object.__neg__(self)\n'
                 'object.__pos__(self)\n'
                 'object.__abs__(self)\n'
                 'object.__invert__(self)\n'
                 '\n'
                 '   Called to implement the unary arithmetic operations ("-", '
                 '"+",\n'
                 '   "abs()" na "~").\n'
                 '\n'
                 'object.__complex__(self)\n'
                 'object.__int__(self)\n'
                 'object.__float__(self)\n'
                 '\n'
                 '   Called to implement the built-in functions "complex()", '
                 '"int()" and\n'
                 '   "float()".  Should rudisha a value of the appropriate '
                 'type.\n'
                 '\n'
                 'object.__index__(self)\n'
                 '\n'
                 '   Called to implement "operator.index()", na whenever '
                 'Python needs\n'
                 '   to losslessly convert the numeric object to an integer '
                 'object (such\n'
                 '   kama kwenye slicing, ama kwenye the built-in "bin()", "hex()" na '
                 '"oct()"\n'
                 '   functions). Presence of this method indicates that the '
                 'numeric\n'
                 '   object ni an integer type.  Must rudisha an integer.\n'
                 '\n'
                 '   If "__int__()", "__float__()" na "__complex__()" are sio '
                 'defined\n'
                 '   then corresponding built-in functions "int()", "float()" '
                 'and\n'
                 '   "complex()" fall back to "__index__()".\n'
                 '\n'
                 'object.__round__(self[, ndigits])\n'
                 'object.__trunc__(self)\n'
                 'object.__floor__(self)\n'
                 'object.__ceil__(self)\n'
                 '\n'
                 '   Called to implement the built-in function "round()" na '
                 '"math"\n'
                 '   functions "trunc()", "floor()" na "ceil()". Unless '
                 '*ndigits* is\n'
                 '   pitaed to "__round__()" all these methods should rudisha '
                 'the value\n'
                 '   of the object truncated to an "Integral" (typically an '
                 '"int").\n'
                 '\n'
                 '   If "__int__()" ni sio defined then the built-in function '
                 '"int()"\n'
                 '   falls back to "__trunc__()".\n'
                 '\n'
                 '\n'
                 'With Statement Context Managers\n'
                 '===============================\n'
                 '\n'
                 'A *context manager* ni an object that defines the runtime '
                 'context to\n'
                 'be established when executing a "with" statement. The '
                 'context manager\n'
                 'handles the entry into, na the exit from, the desired '
                 'runtime context\n'
                 'kila the execution of the block of code.  Context managers '
                 'are normally\n'
                 'invoked using the "with" statement (described kwenye section The '
                 'with\n'
                 'statement), but can also be used by directly invoking their '
                 'methods.\n'
                 '\n'
                 'Typical uses of context managers include saving na '
                 'restoring various\n'
                 'kinds of global state, locking na unlocking resources, '
                 'closing opened\n'
                 'files, etc.\n'
                 '\n'
                 'For more information on context managers, see Context '
                 'Manager Types.\n'
                 '\n'
                 'object.__enter__(self)\n'
                 '\n'
                 '   Enter the runtime context related to this object. The '
                 '"with"\n'
                 '   statement will bind this method’s rudisha value to the '
                 'target(s)\n'
                 '   specified kwenye the "as" clause of the statement, ikiwa any.\n'
                 '\n'
                 'object.__exit__(self, exc_type, exc_value, traceback)\n'
                 '\n'
                 '   Exit the runtime context related to this object. The '
                 'parameters\n'
                 '   describe the exception that caused the context to be '
                 'exited. If the\n'
                 '   context was exited without an exception, all three '
                 'arguments will\n'
                 '   be "Tupu".\n'
                 '\n'
                 '   If an exception ni supplied, na the method wishes to '
                 'suppress the\n'
                 '   exception (i.e., prevent it kutoka being propagated), it '
                 'should\n'
                 '   rudisha a true value. Otherwise, the exception will be '
                 'processed\n'
                 '   normally upon exit kutoka this method.\n'
                 '\n'
                 '   Note that "__exit__()" methods should sio reashiria the '
                 'pitaed-in\n'
                 '   exception; this ni the caller’s responsibility.\n'
                 '\n'
                 'See also:\n'
                 '\n'
                 '  **PEP 343** - The “with” statement\n'
                 '     The specification, background, na examples kila the '
                 'Python "with"\n'
                 '     statement.\n'
                 '\n'
                 '\n'
                 'Special method lookup\n'
                 '=====================\n'
                 '\n'
                 'For custom classes, implicit invocations of special methods '
                 'are only\n'
                 'guaranteed to work correctly ikiwa defined on an object’s type, '
                 'sio in\n'
                 'the object’s instance dictionary.  That behaviour ni the '
                 'reason why\n'
                 'the following code raises an exception:\n'
                 '\n'
                 '   >>> kundi C:\n'
                 '   ...     pita\n'
                 '   ...\n'
                 '   >>> c = C()\n'
                 '   >>> c.__len__ = lambda: 5\n'
                 '   >>> len(c)\n'
                 '   Traceback (most recent call last):\n'
                 '     File "<stdin>", line 1, kwenye <module>\n'
                 "   TypeError: object of type 'C' has no len()\n"
                 '\n'
                 'The rationale behind this behaviour lies ukijumuisha a number of '
                 'special\n'
                 'methods such kama "__hash__()" na "__repr__()" that are '
                 'implemented by\n'
                 'all objects, including type objects. If the implicit lookup '
                 'of these\n'
                 'methods used the conventional lookup process, they would '
                 'fail when\n'
                 'invoked on the type object itself:\n'
                 '\n'
                 '   >>> 1 .__hash__() == hash(1)\n'
                 '   Kweli\n'
                 '   >>> int.__hash__() == hash(int)\n'
                 '   Traceback (most recent call last):\n'
                 '     File "<stdin>", line 1, kwenye <module>\n'
                 "   TypeError: descriptor '__hash__' of 'int' object needs an "
                 'argument\n'
                 '\n'
                 'Incorrectly attempting to invoke an unbound method of a '
                 'kundi kwenye this\n'
                 'way ni sometimes referred to kama ‘metakundi confusion’, na '
                 'is avoided\n'
                 'by bypitaing the instance when looking up special methods:\n'
                 '\n'
                 '   >>> type(1).__hash__(1) == hash(1)\n'
                 '   Kweli\n'
                 '   >>> type(int).__hash__(int) == hash(int)\n'
                 '   Kweli\n'
                 '\n'
                 'In addition to bypitaing any instance attributes kwenye the '
                 'interest of\n'
                 'correctness, implicit special method lookup generally also '
                 'bypitaes\n'
                 'the "__getattribute__()" method even of the object’s '
                 'metaclass:\n'
                 '\n'
                 '   >>> kundi Meta(type):\n'
                 '   ...     eleza __getattribute__(*args):\n'
                 '   ...         andika("Metakundi getattribute invoked")\n'
                 '   ...         rudisha type.__getattribute__(*args)\n'
                 '   ...\n'
                 '   >>> kundi C(object, metaclass=Meta):\n'
                 '   ...     eleza __len__(self):\n'
                 '   ...         rudisha 10\n'
                 '   ...     eleza __getattribute__(*args):\n'
                 '   ...         andika("Class getattribute invoked")\n'
                 '   ...         rudisha object.__getattribute__(*args)\n'
                 '   ...\n'
                 '   >>> c = C()\n'
                 '   >>> c.__len__()                 # Explicit lookup via '
                 'instance\n'
                 '   Class getattribute invoked\n'
                 '   10\n'
                 '   >>> type(c).__len__(c)          # Explicit lookup via '
                 'type\n'
                 '   Metakundi getattribute invoked\n'
                 '   10\n'
                 '   >>> len(c)                      # Implicit lookup\n'
                 '   10\n'
                 '\n'
                 'Bypitaing the "__getattribute__()" machinery kwenye this fashion '
                 'provides\n'
                 'significant scope kila speed optimisations within the '
                 'interpreter, at\n'
                 'the cost of some flexibility kwenye the handling of special '
                 'methods (the\n'
                 'special method *must* be set on the kundi object itself kwenye '
                 'order to be\n'
                 'consistently invoked by the interpreter).\n',
 'string-methods': 'String Methods\n'
                   '**************\n'
                   '\n'
                   'Strings implement all of the common sequence operations, '
                   'along with\n'
                   'the additional methods described below.\n'
                   '\n'
                   'Strings also support two styles of string formatting, one '
                   'providing a\n'
                   'large degree of flexibility na customization (see '
                   '"str.format()",\n'
                   'Format String Syntax na Custom String Formatting) na the '
                   'other based\n'
                   'on C "printf" style formatting that handles a narrower '
                   'range of types\n'
                   'and ni slightly harder to use correctly, but ni often '
                   'faster kila the\n'
                   'cases it can handle (printf-style String Formatting).\n'
                   '\n'
                   'The Text Processing Services section of the standard '
                   'library covers a\n'
                   'number of other modules that provide various text related '
                   'utilities\n'
                   '(including regular expression support kwenye the "re" '
                   'module).\n'
                   '\n'
                   'str.capitalize()\n'
                   '\n'
                   '   Return a copy of the string ukijumuisha its first character '
                   'capitalized\n'
                   '   na the rest lowercased.\n'
                   '\n'
                   '   Changed kwenye version 3.8: The first character ni now put '
                   'into\n'
                   '   titlecase rather than uppercase. This means that '
                   'characters like\n'
                   '   digraphs will only have their first letter capitalized, '
                   'instead of\n'
                   '   the full character.\n'
                   '\n'
                   'str.casefold()\n'
                   '\n'
                   '   Return a casefolded copy of the string. Casefolded '
                   'strings may be\n'
                   '   used kila caseless matching.\n'
                   '\n'
                   '   Casefolding ni similar to lowercasing but more '
                   'aggressive because\n'
                   '   it ni intended to remove all case distinctions kwenye a '
                   'string. For\n'
                   '   example, the German lowercase letter "\'ß\'" ni '
                   'equivalent to ""ss"".\n'
                   '   Since it ni already lowercase, "lower()" would do '
                   'nothing to "\'ß\'";\n'
                   '   "casefold()" converts it to ""ss"".\n'
                   '\n'
                   '   The casefolding algorithm ni described kwenye section 3.13 '
                   'of the\n'
                   '   Unicode Standard.\n'
                   '\n'
                   '   New kwenye version 3.3.\n'
                   '\n'
                   'str.center(width[, fillchar])\n'
                   '\n'
                   '   Return centered kwenye a string of length *width*. Padding '
                   'is done\n'
                   '   using the specified *fillchar* (default ni an ASCII '
                   'space). The\n'
                   '   original string ni returned ikiwa *width* ni less than ama '
                   'equal to\n'
                   '   "len(s)".\n'
                   '\n'
                   'str.count(sub[, start[, end]])\n'
                   '\n'
                   '   Return the number of non-overlapping occurrences of '
                   'substring *sub*\n'
                   '   kwenye the range [*start*, *end*].  Optional arguments '
                   '*start* and\n'
                   '   *end* are interpreted kama kwenye slice notation.\n'
                   '\n'
                   'str.encode(encoding="utf-8", errors="strict")\n'
                   '\n'
                   '   Return an encoded version of the string kama a bytes '
                   'object. Default\n'
                   '   encoding ni "\'utf-8\'". *errors* may be given to set a '
                   'different\n'
                   '   error handling scheme. The default kila *errors* ni '
                   '"\'strict\'",\n'
                   '   meaning that encoding errors ashiria a "UnicodeError". '
                   'Other possible\n'
                   '   values are "\'ignore\'", "\'replace\'", '
                   '"\'xmlcharrefreplace\'",\n'
                   '   "\'backslashreplace\'" na any other name registered '
                   'via\n'
                   '   "codecs.register_error()", see section Error Handlers. '
                   'For a list\n'
                   '   of possible encodings, see section Standard Encodings.\n'
                   '\n'
                   '   Changed kwenye version 3.1: Support kila keyword arguments '
                   'added.\n'
                   '\n'
                   'str.endswith(suffix[, start[, end]])\n'
                   '\n'
                   '   Return "Kweli" ikiwa the string ends ukijumuisha the specified '
                   '*suffix*,\n'
                   '   otherwise rudisha "Uongo".  *suffix* can also be a tuple '
                   'of suffixes\n'
                   '   to look for.  With optional *start*, test beginning at '
                   'that\n'
                   '   position.  With optional *end*, stop comparing at that '
                   'position.\n'
                   '\n'
                   'str.expandtabs(tabsize=8)\n'
                   '\n'
                   '   Return a copy of the string where all tab characters '
                   'are replaced\n'
                   '   by one ama more spaces, depending on the current column '
                   'and the\n'
                   '   given tab size.  Tab positions occur every *tabsize* '
                   'characters\n'
                   '   (default ni 8, giving tab positions at columns 0, 8, 16 '
                   'and so on).\n'
                   '   To expand the string, the current column ni set to zero '
                   'and the\n'
                   '   string ni examined character by character.  If the '
                   'character ni a\n'
                   '   tab ("\\t"), one ama more space characters are inserted '
                   'in the result\n'
                   '   until the current column ni equal to the next tab '
                   'position. (The\n'
                   '   tab character itself ni sio copied.)  If the character '
                   'is a newline\n'
                   '   ("\\n") ama rudisha ("\\r"), it ni copied na the current '
                   'column is\n'
                   '   reset to zero.  Any other character ni copied unchanged '
                   'and the\n'
                   '   current column ni incremented by one regardless of how '
                   'the\n'
                   '   character ni represented when printed.\n'
                   '\n'
                   "   >>> '01\\t012\\t0123\\t01234'.expandtabs()\n"
                   "   '01      012     0123    01234'\n"
                   "   >>> '01\\t012\\t0123\\t01234'.expandtabs(4)\n"
                   "   '01  012 0123    01234'\n"
                   '\n'
                   'str.find(sub[, start[, end]])\n'
                   '\n'
                   '   Return the lowest index kwenye the string where substring '
                   '*sub* is\n'
                   '   found within the slice "s[start:end]".  Optional '
                   'arguments *start*\n'
                   '   na *end* are interpreted kama kwenye slice notation.  Return '
                   '"-1" if\n'
                   '   *sub* ni sio found.\n'
                   '\n'
                   '   Note: The "find()" method should be used only ikiwa you '
                   'need to know\n'
                   '     the position of *sub*.  To check ikiwa *sub* ni a '
                   'substring ama not,\n'
                   '     use the "in" operator:\n'
                   '\n'
                   "        >>> 'Py' kwenye 'Python'\n"
                   '        Kweli\n'
                   '\n'
                   'str.format(*args, **kwargs)\n'
                   '\n'
                   '   Perform a string formatting operation.  The string on '
                   'which this\n'
                   '   method ni called can contain literal text ama '
                   'replacement fields\n'
                   '   delimited by braces "{}".  Each replacement field '
                   'contains either\n'
                   '   the numeric index of a positional argument, ama the name '
                   'of a\n'
                   '   keyword argument.  Returns a copy of the string where '
                   'each\n'
                   '   replacement field ni replaced ukijumuisha the string value of '
                   'the\n'
                   '   corresponding argument.\n'
                   '\n'
                   '   >>> "The sum of 1 + 2 ni {0}".format(1+2)\n'
                   "   'The sum of 1 + 2 ni 3'\n"
                   '\n'
                   '   See Format String Syntax kila a description of the '
                   'various\n'
                   '   formatting options that can be specified kwenye format '
                   'strings.\n'
                   '\n'
                   '   Note: When formatting a number ("int", "float", '
                   '"complex",\n'
                   '     "decimal.Decimal" na subclasses) ukijumuisha the "n" type '
                   '(ex:\n'
                   '     "\'{:n}\'.format(1234)"), the function temporarily '
                   'sets the\n'
                   '     "LC_CTYPE" locale to the "LC_NUMERIC" locale to '
                   'decode\n'
                   '     "decimal_point" na "thousands_sep" fields of '
                   '"localeconv()" if\n'
                   '     they are non-ASCII ama longer than 1 byte, na the '
                   '"LC_NUMERIC"\n'
                   '     locale ni different than the "LC_CTYPE" locale.  This '
                   'temporary\n'
                   '     change affects other threads.\n'
                   '\n'
                   '   Changed kwenye version 3.7: When formatting a number ukijumuisha '
                   'the "n" type,\n'
                   '   the function sets temporarily the "LC_CTYPE" locale to '
                   'the\n'
                   '   "LC_NUMERIC" locale kwenye some cases.\n'
                   '\n'
                   'str.format_map(mapping)\n'
                   '\n'
                   '   Similar to "str.format(**mapping)", tatizo that '
                   '"mapping" ni used\n'
                   '   directly na sio copied to a "dict".  This ni useful ikiwa '
                   'kila example\n'
                   '   "mapping" ni a dict subclass:\n'
                   '\n'
                   '   >>> kundi Default(dict):\n'
                   '   ...     eleza __missing__(self, key):\n'
                   '   ...         rudisha key\n'
                   '   ...\n'
                   "   >>> '{name} was born kwenye "
                   "{country}'.format_map(Default(name='Guido'))\n"
                   "   'Guido was born kwenye country'\n"
                   '\n'
                   '   New kwenye version 3.2.\n'
                   '\n'
                   'str.index(sub[, start[, end]])\n'
                   '\n'
                   '   Like "find()", but ashiria "ValueError" when the '
                   'substring ni not\n'
                   '   found.\n'
                   '\n'
                   'str.isalnum()\n'
                   '\n'
                   '   Return true ikiwa all characters kwenye the string are '
                   'alphanumeric and\n'
                   '   there ni at least one character, false otherwise.  A '
                   'character "c"\n'
                   '   ni alphanumeric ikiwa one of the following returns '
                   '"Kweli":\n'
                   '   "c.isalpha()", "c.isdecimal()", "c.isdigit()", ama '
                   '"c.isnumeric()".\n'
                   '\n'
                   'str.isalpha()\n'
                   '\n'
                   '   Return true ikiwa all characters kwenye the string are '
                   'alphabetic and\n'
                   '   there ni at least one character, false otherwise.  '
                   'Alphabetic\n'
                   '   characters are those characters defined kwenye the Unicode '
                   'character\n'
                   '   database kama “Letter”, i.e., those ukijumuisha general category '
                   'property\n'
                   '   being one of “Lm”, “Lt”, “Lu”, “Ll”, ama “Lo”.  Note '
                   'that this is\n'
                   '   different kutoka the “Alphabetic” property defined kwenye the '
                   'Unicode\n'
                   '   Standard.\n'
                   '\n'
                   'str.isascii()\n'
                   '\n'
                   '   Return true ikiwa the string ni empty ama all characters kwenye '
                   'the string\n'
                   '   are ASCII, false otherwise. ASCII characters have code '
                   'points in\n'
                   '   the range U+0000-U+007F.\n'
                   '\n'
                   '   New kwenye version 3.7.\n'
                   '\n'
                   'str.isdecimal()\n'
                   '\n'
                   '   Return true ikiwa all characters kwenye the string are decimal '
                   'characters\n'
                   '   na there ni at least one character, false otherwise. '
                   'Decimal\n'
                   '   characters are those that can be used to form numbers '
                   'in base 10,\n'
                   '   e.g. U+0660, ARABIC-INDIC DIGIT ZERO.  Formally a '
                   'decimal character\n'
                   '   ni a character kwenye the Unicode General Category “Nd”.\n'
                   '\n'
                   'str.isdigit()\n'
                   '\n'
                   '   Return true ikiwa all characters kwenye the string are digits '
                   'and there is\n'
                   '   at least one character, false otherwise.  Digits '
                   'include decimal\n'
                   '   characters na digits that need special handling, such '
                   'as the\n'
                   '   compatibility superscript digits. This covers digits '
                   'which cannot\n'
                   '   be used to form numbers kwenye base 10, like the Kharosthi '
                   'numbers.\n'
                   '   Formally, a digit ni a character that has the property '
                   'value\n'
                   '   Numeric_Type=Digit ama Numeric_Type=Decimal.\n'
                   '\n'
                   'str.isidentifier()\n'
                   '\n'
                   '   Return true ikiwa the string ni a valid identifier '
                   'according to the\n'
                   '   language definition, section Identifiers na keywords.\n'
                   '\n'
                   '   Call "keyword.iskeyword()" to test whether string "s" '
                   'is a reserved\n'
                   '   identifier, such kama "def" na "class".\n'
                   '\n'
                   '   Example:\n'
                   '\n'
                   '      >>> kutoka keyword agiza iskeyword\n'
                   '\n'
                   "      >>> 'hello'.isidentifier(), iskeyword('hello')\n"
                   '      Kweli, Uongo\n'
                   "      >>> 'def'.isidentifier(), iskeyword('def')\n"
                   '      Kweli, Kweli\n'
                   '\n'
                   'str.islower()\n'
                   '\n'
                   '   Return true ikiwa all cased characters [4] kwenye the string '
                   'are lowercase\n'
                   '   na there ni at least one cased character, false '
                   'otherwise.\n'
                   '\n'
                   'str.isnumeric()\n'
                   '\n'
                   '   Return true ikiwa all characters kwenye the string are numeric '
                   'characters,\n'
                   '   na there ni at least one character, false otherwise. '
                   'Numeric\n'
                   '   characters include digit characters, na all characters '
                   'that have\n'
                   '   the Unicode numeric value property, e.g. U+2155, VULGAR '
                   'FRACTION\n'
                   '   ONE FIFTH.  Formally, numeric characters are those ukijumuisha '
                   'the\n'
                   '   property value Numeric_Type=Digit, Numeric_Type=Decimal '
                   'or\n'
                   '   Numeric_Type=Numeric.\n'
                   '\n'
                   'str.isprintable()\n'
                   '\n'
                   '   Return true ikiwa all characters kwenye the string are '
                   'printable ama the\n'
                   '   string ni empty, false otherwise.  Nonprintable '
                   'characters are\n'
                   '   those characters defined kwenye the Unicode character '
                   'database as\n'
                   '   “Other” ama “Separator”, excepting the ASCII space '
                   '(0x20) which is\n'
                   '   considered printable.  (Note that printable characters '
                   'in this\n'
                   '   context are those which should sio be escaped when '
                   '"repr()" is\n'
                   '   invoked on a string.  It has no bearing on the handling '
                   'of strings\n'
                   '   written to "sys.stdout" ama "sys.stderr".)\n'
                   '\n'
                   'str.isspace()\n'
                   '\n'
                   '   Return true ikiwa there are only whitespace characters kwenye '
                   'the string\n'
                   '   na there ni at least one character, false otherwise.\n'
                   '\n'
                   '   A character ni *whitespace* ikiwa kwenye the Unicode character '
                   'database\n'
                   '   (see "unicodedata"), either its general category ni '
                   '"Zs"\n'
                   '   (“Separator, space”), ama its bidirectional kundi ni one '
                   'of "WS",\n'
                   '   "B", ama "S".\n'
                   '\n'
                   'str.istitle()\n'
                   '\n'
                   '   Return true ikiwa the string ni a titlecased string na '
                   'there ni at\n'
                   '   least one character, kila example uppercase characters '
                   'may only\n'
                   '   follow uncased characters na lowercase characters only '
                   'cased ones.\n'
                   '   Return false otherwise.\n'
                   '\n'
                   'str.isupper()\n'
                   '\n'
                   '   Return true ikiwa all cased characters [4] kwenye the string '
                   'are uppercase\n'
                   '   na there ni at least one cased character, false '
                   'otherwise.\n'
                   '\n'
                   'str.join(iterable)\n'
                   '\n'
                   '   Return a string which ni the concatenation of the '
                   'strings in\n'
                   '   *iterable*. A "TypeError" will be raised ikiwa there are '
                   'any non-\n'
                   '   string values kwenye *iterable*, including "bytes" '
                   'objects.  The\n'
                   '   separator between elements ni the string providing this '
                   'method.\n'
                   '\n'
                   'str.ljust(width[, fillchar])\n'
                   '\n'
                   '   Return the string left justified kwenye a string of length '
                   '*width*.\n'
                   '   Padding ni done using the specified *fillchar* (default '
                   'is an ASCII\n'
                   '   space). The original string ni returned ikiwa *width* ni '
                   'less than or\n'
                   '   equal to "len(s)".\n'
                   '\n'
                   'str.lower()\n'
                   '\n'
                   '   Return a copy of the string ukijumuisha all the cased '
                   'characters [4]\n'
                   '   converted to lowercase.\n'
                   '\n'
                   '   The lowercasing algorithm used ni described kwenye section '
                   '3.13 of the\n'
                   '   Unicode Standard.\n'
                   '\n'
                   'str.lstrip([chars])\n'
                   '\n'
                   '   Return a copy of the string ukijumuisha leading characters '
                   'removed.  The\n'
                   '   *chars* argument ni a string specifying the set of '
                   'characters to be\n'
                   '   removed.  If omitted ama "Tupu", the *chars* argument '
                   'defaults to\n'
                   '   removing whitespace.  The *chars* argument ni sio a '
                   'prefix; rather,\n'
                   '   all combinations of its values are stripped:\n'
                   '\n'
                   "      >>> '   spacious   '.lstrip()\n"
                   "      'spacious   '\n"
                   "      >>> 'www.example.com'.lstrip('cmowz.')\n"
                   "      'example.com'\n"
                   '\n'
                   'static str.maketrans(x[, y[, z]])\n'
                   '\n'
                   '   This static method returns a translation table usable '
                   'for\n'
                   '   "str.translate()".\n'
                   '\n'
                   '   If there ni only one argument, it must be a dictionary '
                   'mapping\n'
                   '   Unicode ordinals (integers) ama characters (strings of '
                   'length 1) to\n'
                   '   Unicode ordinals, strings (of arbitrary lengths) ama '
                   '"Tupu".\n'
                   '   Character keys will then be converted to ordinals.\n'
                   '\n'
                   '   If there are two arguments, they must be strings of '
                   'equal length,\n'
                   '   na kwenye the resulting dictionary, each character kwenye x '
                   'will be mapped\n'
                   '   to the character at the same position kwenye y.  If there '
                   'is a third\n'
                   '   argument, it must be a string, whose characters will be '
                   'mapped to\n'
                   '   "Tupu" kwenye the result.\n'
                   '\n'
                   'str.partition(sep)\n'
                   '\n'
                   '   Split the string at the first occurrence of *sep*, na '
                   'rudisha a\n'
                   '   3-tuple containing the part before the separator, the '
                   'separator\n'
                   '   itself, na the part after the separator.  If the '
                   'separator ni not\n'
                   '   found, rudisha a 3-tuple containing the string itself, '
                   'followed by\n'
                   '   two empty strings.\n'
                   '\n'
                   'str.replace(old, new[, count])\n'
                   '\n'
                   '   Return a copy of the string ukijumuisha all occurrences of '
                   'substring *old*\n'
                   '   replaced by *new*.  If the optional argument *count* ni '
                   'given, only\n'
                   '   the first *count* occurrences are replaced.\n'
                   '\n'
                   'str.rfind(sub[, start[, end]])\n'
                   '\n'
                   '   Return the highest index kwenye the string where substring '
                   '*sub* is\n'
                   '   found, such that *sub* ni contained within '
                   '"s[start:end]".\n'
                   '   Optional arguments *start* na *end* are interpreted kama '
                   'in slice\n'
                   '   notation.  Return "-1" on failure.\n'
                   '\n'
                   'str.rindex(sub[, start[, end]])\n'
                   '\n'
                   '   Like "rfind()" but raises "ValueError" when the '
                   'substring *sub* is\n'
                   '   sio found.\n'
                   '\n'
                   'str.rjust(width[, fillchar])\n'
                   '\n'
                   '   Return the string right justified kwenye a string of length '
                   '*width*.\n'
                   '   Padding ni done using the specified *fillchar* (default '
                   'is an ASCII\n'
                   '   space). The original string ni returned ikiwa *width* ni '
                   'less than or\n'
                   '   equal to "len(s)".\n'
                   '\n'
                   'str.rpartition(sep)\n'
                   '\n'
                   '   Split the string at the last occurrence of *sep*, na '
                   'rudisha a\n'
                   '   3-tuple containing the part before the separator, the '
                   'separator\n'
                   '   itself, na the part after the separator.  If the '
                   'separator ni not\n'
                   '   found, rudisha a 3-tuple containing two empty strings, '
                   'followed by\n'
                   '   the string itself.\n'
                   '\n'
                   'str.rsplit(sep=Tupu, maxsplit=-1)\n'
                   '\n'
                   '   Return a list of the words kwenye the string, using *sep* '
                   'as the\n'
                   '   delimiter string. If *maxsplit* ni given, at most '
                   '*maxsplit* splits\n'
                   '   are done, the *rightmost* ones.  If *sep* ni sio '
                   'specified or\n'
                   '   "Tupu", any whitespace string ni a separator.  Except '
                   'kila splitting\n'
                   '   kutoka the right, "rsplit()" behaves like "split()" which '
                   'is\n'
                   '   described kwenye detail below.\n'
                   '\n'
                   'str.rstrip([chars])\n'
                   '\n'
                   '   Return a copy of the string ukijumuisha trailing characters '
                   'removed.  The\n'
                   '   *chars* argument ni a string specifying the set of '
                   'characters to be\n'
                   '   removed.  If omitted ama "Tupu", the *chars* argument '
                   'defaults to\n'
                   '   removing whitespace.  The *chars* argument ni sio a '
                   'suffix; rather,\n'
                   '   all combinations of its values are stripped:\n'
                   '\n'
                   "      >>> '   spacious   '.rstrip()\n"
                   "      '   spacious'\n"
                   "      >>> 'mississippi'.rstrip('ipz')\n"
                   "      'mississ'\n"
                   '\n'
                   'str.split(sep=Tupu, maxsplit=-1)\n'
                   '\n'
                   '   Return a list of the words kwenye the string, using *sep* '
                   'as the\n'
                   '   delimiter string.  If *maxsplit* ni given, at most '
                   '*maxsplit*\n'
                   '   splits are done (thus, the list will have at most '
                   '"maxsplit+1"\n'
                   '   elements).  If *maxsplit* ni sio specified ama "-1", '
                   'then there is\n'
                   '   no limit on the number of splits (all possible splits '
                   'are made).\n'
                   '\n'
                   '   If *sep* ni given, consecutive delimiters are sio '
                   'grouped together\n'
                   '   na are deemed to delimit empty strings (kila example,\n'
                   '   "\'1,,2\'.split(\',\')" returns "[\'1\', \'\', '
                   '\'2\']").  The *sep* argument\n'
                   '   may consist of multiple characters (kila example,\n'
                   '   "\'1<>2<>3\'.split(\'<>\')" returns "[\'1\', \'2\', '
                   '\'3\']"). Splitting an\n'
                   '   empty string ukijumuisha a specified separator returns '
                   '"[\'\']".\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   "      >>> '1,2,3'.split(',')\n"
                   "      ['1', '2', '3']\n"
                   "      >>> '1,2,3'.split(',', maxsplit=1)\n"
                   "      ['1', '2,3']\n"
                   "      >>> '1,2,,3,'.split(',')\n"
                   "      ['1', '2', '', '3', '']\n"
                   '\n'
                   '   If *sep* ni sio specified ama ni "Tupu", a different '
                   'splitting\n'
                   '   algorithm ni applied: runs of consecutive whitespace '
                   'are regarded\n'
                   '   kama a single separator, na the result will contain no '
                   'empty strings\n'
                   '   at the start ama end ikiwa the string has leading ama '
                   'trailing\n'
                   '   whitespace.  Consequently, splitting an empty string ama '
                   'a string\n'
                   '   consisting of just whitespace ukijumuisha a "Tupu" separator '
                   'returns "[]".\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   "      >>> '1 2 3'.split()\n"
                   "      ['1', '2', '3']\n"
                   "      >>> '1 2 3'.split(maxsplit=1)\n"
                   "      ['1', '2 3']\n"
                   "      >>> '   1   2   3   '.split()\n"
                   "      ['1', '2', '3']\n"
                   '\n'
                   'str.splitlines([keepends])\n'
                   '\n'
                   '   Return a list of the lines kwenye the string, komaing at '
                   'line\n'
                   '   boundaries.  Line komas are sio inluded kwenye the '
                   'resulting list\n'
                   '   unless *keepends* ni given na true.\n'
                   '\n'
                   '   This method splits on the following line boundaries.  '
                   'In\n'
                   '   particular, the boundaries are a superset of *universal '
                   'newlines*.\n'
                   '\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | Representation          | '
                   'Description                   |\n'
                   '   '
                   '|=========================|===============================|\n'
                   '   | "\\n"                    | Line '
                   'Feed                     |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\r"                    | Carriage '
                   'Return               |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\r\\n"                  | Carriage Return + Line '
                   'Feed   |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\v" ama "\\x0b"          | Line '
                   'Tabulation               |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\f" ama "\\x0c"          | Form '
                   'Feed                     |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\x1c"                  | File '
                   'Separator                |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\x1d"                  | Group '
                   'Separator               |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\x1e"                  | Record '
                   'Separator              |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\x85"                  | Next Line (C1 Control '
                   'Code)   |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\u2028"                | Line '
                   'Separator                |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\u2029"                | Paragraph '
                   'Separator           |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '\n'
                   '   Changed kwenye version 3.2: "\\v" na "\\f" added to list '
                   'of line\n'
                   '   boundaries.\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   "      >>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n"
                   "      ['ab c', '', 'de fg', 'kl']\n"
                   "      >>> 'ab c\\n\\nde "
                   "fg\\rkl\\r\\n'.splitlines(keepends=Kweli)\n"
                   "      ['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']\n"
                   '\n'
                   '   Unlike "split()" when a delimiter string *sep* ni '
                   'given, this\n'
                   '   method returns an empty list kila the empty string, na '
                   'a terminal\n'
                   '   line koma does sio result kwenye an extra line:\n'
                   '\n'
                   '      >>> "".splitlines()\n'
                   '      []\n'
                   '      >>> "One line\\n".splitlines()\n'
                   "      ['One line']\n"
                   '\n'
                   '   For comparison, "split(\'\\n\')" gives:\n'
                   '\n'
                   "      >>> ''.split('\\n')\n"
                   "      ['']\n"
                   "      >>> 'Two lines\\n'.split('\\n')\n"
                   "      ['Two lines', '']\n"
                   '\n'
                   'str.startswith(prefix[, start[, end]])\n'
                   '\n'
                   '   Return "Kweli" ikiwa string starts ukijumuisha the *prefix*, '
                   'otherwise return\n'
                   '   "Uongo". *prefix* can also be a tuple of prefixes to '
                   'look for.\n'
                   '   With optional *start*, test string beginning at that '
                   'position.\n'
                   '   With optional *end*, stop comparing string at that '
                   'position.\n'
                   '\n'
                   'str.strip([chars])\n'
                   '\n'
                   '   Return a copy of the string ukijumuisha the leading na '
                   'trailing\n'
                   '   characters removed. The *chars* argument ni a string '
                   'specifying the\n'
                   '   set of characters to be removed. If omitted ama "Tupu", '
                   'the *chars*\n'
                   '   argument defaults to removing whitespace. The *chars* '
                   'argument is\n'
                   '   sio a prefix ama suffix; rather, all combinations of its '
                   'values are\n'
                   '   stripped:\n'
                   '\n'
                   "      >>> '   spacious   '.strip()\n"
                   "      'spacious'\n"
                   "      >>> 'www.example.com'.strip('cmowz.')\n"
                   "      'example'\n"
                   '\n'
                   '   The outermost leading na trailing *chars* argument '
                   'values are\n'
                   '   stripped kutoka the string. Characters are removed kutoka '
                   'the leading\n'
                   '   end until reaching a string character that ni sio '
                   'contained kwenye the\n'
                   '   set of characters kwenye *chars*. A similar action takes '
                   'place on the\n'
                   '   trailing end. For example:\n'
                   '\n'
                   "      >>> comment_string = '#....... Section 3.2.1 Issue "
                   "#32 .......'\n"
                   "      >>> comment_string.strip('.#! ')\n"
                   "      'Section 3.2.1 Issue #32'\n"
                   '\n'
                   'str.swapcase()\n'
                   '\n'
                   '   Return a copy of the string ukijumuisha uppercase characters '
                   'converted to\n'
                   '   lowercase na vice versa. Note that it ni sio '
                   'necessarily true that\n'
                   '   "s.swapcase().swapcase() == s".\n'
                   '\n'
                   'str.title()\n'
                   '\n'
                   '   Return a titlecased version of the string where words '
                   'start ukijumuisha an\n'
                   '   uppercase character na the remaining characters are '
                   'lowercase.\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   "      >>> 'Hello world'.title()\n"
                   "      'Hello World'\n"
                   '\n'
                   '   The algorithm uses a simple language-independent '
                   'definition of a\n'
                   '   word kama groups of consecutive letters.  The definition '
                   'works in\n'
                   '   many contexts but it means that apostrophes kwenye '
                   'contractions and\n'
                   '   possessives form word boundaries, which may sio be the '
                   'desired\n'
                   '   result:\n'
                   '\n'
                   '      >>> "they\'re bill\'s friends kutoka the UK".title()\n'
                   '      "They\'Re Bill\'S Friends From The Uk"\n'
                   '\n'
                   '   A workaround kila apostrophes can be constructed using '
                   'regular\n'
                   '   expressions:\n'
                   '\n'
                   '      >>> agiza re\n'
                   '      >>> eleza titlecase(s):\n'
                   '      ...     rudisha re.sub(r"[A-Za-z]+(\'[A-Za-z]+)?",\n'
                   '      ...                   lambda mo: '
                   'mo.group(0).capitalize(),\n'
                   '      ...                   s)\n'
                   '      ...\n'
                   '      >>> titlecase("they\'re bill\'s friends.")\n'
                   '      "They\'re Bill\'s Friends."\n'
                   '\n'
                   'str.translate(table)\n'
                   '\n'
                   '   Return a copy of the string kwenye which each character has '
                   'been mapped\n'
                   '   through the given translation table.  The table must be '
                   'an object\n'
                   '   that implements indexing via "__getitem__()", typically '
                   'a *mapping*\n'
                   '   ama *sequence*.  When indexed by a Unicode ordinal (an '
                   'integer), the\n'
                   '   table object can do any of the following: rudisha a '
                   'Unicode ordinal\n'
                   '   ama a string, to map the character to one ama more other '
                   'characters;\n'
                   '   rudisha "Tupu", to delete the character kutoka the rudisha '
                   'string; or\n'
                   '   ashiria a "LookupError" exception, to map the character '
                   'to itself.\n'
                   '\n'
                   '   You can use "str.maketrans()" to create a translation '
                   'map from\n'
                   '   character-to-character mappings kwenye different formats.\n'
                   '\n'
                   '   See also the "codecs" module kila a more flexible '
                   'approach to custom\n'
                   '   character mappings.\n'
                   '\n'
                   'str.upper()\n'
                   '\n'
                   '   Return a copy of the string ukijumuisha all the cased '
                   'characters [4]\n'
                   '   converted to uppercase.  Note that '
                   '"s.upper().isupper()" might be\n'
                   '   "Uongo" ikiwa "s" contains uncased characters ama ikiwa the '
                   'Unicode\n'
                   '   category of the resulting character(s) ni sio “Lu” '
                   '(Letter,\n'
                   '   uppercase), but e.g. “Lt” (Letter, titlecase).\n'
                   '\n'
                   '   The uppercasing algorithm used ni described kwenye section '
                   '3.13 of the\n'
                   '   Unicode Standard.\n'
                   '\n'
                   'str.zfill(width)\n'
                   '\n'
                   '   Return a copy of the string left filled ukijumuisha ASCII '
                   '"\'0\'" digits to\n'
                   '   make a string of length *width*. A leading sign prefix\n'
                   '   ("\'+\'"/"\'-\'") ni handled by inserting the padding '
                   '*after* the sign\n'
                   '   character rather than before. The original string ni '
                   'returned if\n'
                   '   *width* ni less than ama equal to "len(s)".\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   '      >>> "42".zfill(5)\n'
                   "      '00042'\n"
                   '      >>> "-42".zfill(5)\n'
                   "      '-0042'\n",
 'strings': 'String na Bytes literals\n'
            '*************************\n'
            '\n'
            'String literals are described by the following lexical '
            'definitions:\n'
            '\n'
            '   stringliteral   ::= [stringprefix](shortstring | longstring)\n'
            '   stringprefix    ::= "r" | "u" | "R" | "U" | "f" | "F"\n'
            '                    | "fr" | "Fr" | "fR" | "FR" | "rf" | "rF" | '
            '"Rf" | "RF"\n'
            '   shortstring     ::= "\'" shortstringitem* "\'" | \'"\' '
            'shortstringitem* \'"\'\n'
            '   longstring      ::= "\'\'\'" longstringitem* "\'\'\'" | '
            '\'"""\' longstringitem* \'"""\'\n'
            '   shortstringitem ::= shortstringchar | stringescapeseq\n'
            '   longstringitem  ::= longstringchar | stringescapeseq\n'
            '   shortstringchar ::= <any source character tatizo "\\" ama '
            'newline ama the quote>\n'
            '   longstringchar  ::= <any source character tatizo "\\">\n'
            '   stringescapeseq ::= "\\" <any source character>\n'
            '\n'
            '   bytesliteral   ::= bytesprefix(shortbytes | longbytes)\n'
            '   bytesprefix    ::= "b" | "B" | "br" | "Br" | "bR" | "BR" | '
            '"rb" | "rB" | "Rb" | "RB"\n'
            '   shortbytes     ::= "\'" shortbytesitem* "\'" | \'"\' '
            'shortbytesitem* \'"\'\n'
            '   longbytes      ::= "\'\'\'" longbytesitem* "\'\'\'" | \'"""\' '
            'longbytesitem* \'"""\'\n'
            '   shortbytesitem ::= shortbyteschar | bytesescapeseq\n'
            '   longbytesitem  ::= longbyteschar | bytesescapeseq\n'
            '   shortbyteschar ::= <any ASCII character tatizo "\\" ama newline '
            'or the quote>\n'
            '   longbyteschar  ::= <any ASCII character tatizo "\\">\n'
            '   bytesescapeseq ::= "\\" <any ASCII character>\n'
            '\n'
            'One syntactic restriction sio inicated by these productions ni '
            'that\n'
            'whitespace ni sio allowed between the "stringprefix" ama '
            '"bytesprefix"\n'
            'and the rest of the literal. The source character set ni defined '
            'by\n'
            'the encoding declaration; it ni UTF-8 ikiwa no encoding declaration '
            'is\n'
            'given kwenye the source file; see section Encoding declarations.\n'
            '\n'
            'In plain English: Both types of literals can be enclosed kwenye '
            'matching\n'
            'single quotes ("\'") ama double quotes (""").  They can also be '
            'enclosed\n'
            'in matching groups of three single ama double quotes (these are\n'
            'generally referred to kama *triple-quoted strings*).  The '
            'backslash\n'
            '("\\") character ni used to escape characters that otherwise have '
            'a\n'
            'special meaning, such kama newline, backslash itself, ama the quote\n'
            'character.\n'
            '\n'
            'Bytes literals are always prefixed ukijumuisha "\'b\'" ama "\'B\'"; they '
            'produce\n'
            'an instance of the "bytes" type instead of the "str" type.  They '
            'may\n'
            'only contain ASCII characters; bytes ukijumuisha a numeric value of 128 '
            'or\n'
            'greater must be expressed ukijumuisha escapes.\n'
            '\n'
            'Both string na bytes literals may optionally be prefixed ukijumuisha a\n'
            'letter "\'r\'" ama "\'R\'"; such strings are called *raw strings* '
            'and treat\n'
            'backslashes kama literal characters.  As a result, kwenye string '
            'literals,\n'
            '"\'\\U\'" na "\'\\u\'" escapes kwenye raw strings are sio treated '
            'specially.\n'
            'Given that Python 2.x’s raw unicode literals behave differently '
            'than\n'
            'Python 3.x’s the "\'ur\'" syntax ni sio supported.\n'
            '\n'
            'New kwenye version 3.3: The "\'rb\'" prefix of raw bytes literals has '
            'been\n'
            'added kama a synonym of "\'br\'".\n'
            '\n'
            'New kwenye version 3.3: Support kila the unicode legacy literal\n'
            '("u\'value\'") was reintroduced to simplify the maintenance of '
            'dual\n'
            'Python 2.x na 3.x codebases. See **PEP 414** kila more '
            'information.\n'
            '\n'
            'A string literal ukijumuisha "\'f\'" ama "\'F\'" kwenye its prefix ni a '
            '*formatted\n'
            'string literal*; see Formatted string literals.  The "\'f\'" may '
            'be\n'
            'combined ukijumuisha "\'r\'", but sio ukijumuisha "\'b\'" ama "\'u\'", therefore '
            'raw\n'
            'formatted strings are possible, but formatted bytes literals are '
            'not.\n'
            '\n'
            'In triple-quoted literals, unescaped newlines na quotes are '
            'allowed\n'
            '(and are retained), tatizo that three unescaped quotes kwenye a row\n'
            'terminate the literal.  (A “quote” ni the character used to open '
            'the\n'
            'literal, i.e. either "\'" ama """.)\n'
            '\n'
            'Unless an "\'r\'" ama "\'R\'" prefix ni present, escape sequences '
            'in string\n'
            'and bytes literals are interpreted according to rules similar to '
            'those\n'
            'used by Standard C.  The recognized escape sequences are:\n'
            '\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| Escape Sequence   | Meaning                           | Notes   '
            '|\n'
            '|===================|===================================|=========|\n'
            '| "\\newline"        | Backslash na newline ignored     '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\\\"              | Backslash ("\\")                   '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\\'"              | Single quote ("\'")                '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\""              | Double quote (""")                '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\a"              | ASCII Bell (BEL)                  '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\b"              | ASCII Backspace (BS)              '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\f"              | ASCII Formfeed (FF)               '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\n"              | ASCII Linefeed (LF)               '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\r"              | ASCII Carriage Return (CR)        '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\t"              | ASCII Horizontal Tab (TAB)        '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\v"              | ASCII Vertical Tab (VT)           '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\ooo"            | Character ukijumuisha octal value *ooo*  | '
            '(1,3)   |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\xhh"            | Character ukijumuisha hex value *hh*     | '
            '(2,3)   |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '\n'
            'Escape sequences only recognized kwenye string literals are:\n'
            '\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| Escape Sequence   | Meaning                           | Notes   '
            '|\n'
            '|===================|===================================|=========|\n'
            '| "\\N{name}"        | Character named *name* kwenye the     | '
            '(4)     |\n'
            '|                   | Unicode database                  |         '
            '|\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\uxxxx"          | Character ukijumuisha 16-bit hex value   | '
            '(5)     |\n'
            '|                   | *xxxx*                            |         '
            '|\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\Uxxxxxxxx"      | Character ukijumuisha 32-bit hex value   | '
            '(6)     |\n'
            '|                   | *xxxxxxxx*                        |         '
            '|\n'
            '+-------------------+-----------------------------------+---------+\n'
            '\n'
            'Notes:\n'
            '\n'
            '1. As kwenye Standard C, up to three octal digits are accepted.\n'
            '\n'
            '2. Unlike kwenye Standard C, exactly two hex digits are required.\n'
            '\n'
            '3. In a bytes literal, hexadecimal na octal escapes denote the\n'
            '   byte ukijumuisha the given value. In a string literal, these escapes\n'
            '   denote a Unicode character ukijumuisha the given value.\n'
            '\n'
            '4. Changed kwenye version 3.3: Support kila name aliases [1] has been\n'
            '   added.\n'
            '\n'
            '5. Exactly four hex digits are required.\n'
            '\n'
            '6. Any Unicode character can be encoded this way.  Exactly eight\n'
            '   hex digits are required.\n'
            '\n'
            'Unlike Standard C, all unrecognized escape sequences are left kwenye '
            'the\n'
            'string unchanged, i.e., *the backslash ni left kwenye the result*.  '
            '(This\n'
            'behavior ni useful when debugging: ikiwa an escape sequence ni '
            'mistyped,\n'
            'the resulting output ni more easily recognized kama broken.)  It ni '
            'also\n'
            'important to note that the escape sequences only recognized kwenye '
            'string\n'
            'literals fall into the category of unrecognized escapes kila '
            'bytes\n'
            'literals.\n'
            '\n'
            '   Changed kwenye version 3.6: Unrecognized escape sequences produce '
            'a\n'
            '   "DeprecationWarning".  In a future Python version they will be '
            'a\n'
            '   "SyntaxWarning" na eventually a "SyntaxError".\n'
            '\n'
            'Even kwenye a raw literal, quotes can be escaped ukijumuisha a backslash, '
            'but the\n'
            'backslash remains kwenye the result; kila example, "r"\\""" ni a '
            'valid\n'
            'string literal consisting of two characters: a backslash na a '
            'double\n'
            'quote; "r"\\"" ni sio a valid string literal (even a raw string '
            'cannot\n'
            'end kwenye an odd number of backslashes).  Specifically, *a raw '
            'literal\n'
            'cansio end kwenye a single backslash* (since the backslash would '
            'escape\n'
            'the following quote character).  Note also that a single '
            'backslash\n'
            'followed by a newline ni interpreted kama those two characters kama '
            'part\n'
            'of the literal, *not* kama a line continuation.\n',
 'subscriptions': 'Subscriptions\n'
                  '*************\n'
                  '\n'
                  'A subscription selects an item of a sequence (string, tuple '
                  'or list)\n'
                  'or mapping (dictionary) object:\n'
                  '\n'
                  '   subscription ::= primary "[" expression_list "]"\n'
                  '\n'
                  'The primary must evaluate to an object that supports '
                  'subscription\n'
                  '(lists ama dictionaries kila example).  User-defined objects '
                  'can support\n'
                  'subscription by defining a "__getitem__()" method.\n'
                  '\n'
                  'For built-in objects, there are two types of objects that '
                  'support\n'
                  'subscription:\n'
                  '\n'
                  'If the primary ni a mapping, the expression list must '
                  'evaluate to an\n'
                  'object whose value ni one of the keys of the mapping, na '
                  'the\n'
                  'subscription selects the value kwenye the mapping that '
                  'corresponds to that\n'
                  'key.  (The expression list ni a tuple tatizo ikiwa it has '
                  'exactly one\n'
                  'item.)\n'
                  '\n'
                  'If the primary ni a sequence, the expression list must '
                  'evaluate to an\n'
                  'integer ama a slice (as discussed kwenye the following '
                  'section).\n'
                  '\n'
                  'The formal syntax makes no special provision kila negative '
                  'indices in\n'
                  'sequences; however, built-in sequences all provide a '
                  '"__getitem__()"\n'
                  'method that interprets negative indices by adding the '
                  'length of the\n'
                  'sequence to the index (so that "x[-1]" selects the last '
                  'item of "x").\n'
                  'The resulting value must be a nonnegative integer less than '
                  'the number\n'
                  'of items kwenye the sequence, na the subscription selects the '
                  'item whose\n'
                  'index ni that value (counting kutoka zero). Since the support '
                  'for\n'
                  'negative indices na slicing occurs kwenye the object’s '
                  '"__getitem__()"\n'
                  'method, subclasses overriding this method will need to '
                  'explicitly add\n'
                  'that support.\n'
                  '\n'
                  'A string’s items are characters.  A character ni sio a '
                  'separate data\n'
                  'type but a string of exactly one character.\n',
 'truth': 'Truth Value Testing\n'
          '*******************\n'
          '\n'
          'Any object can be tested kila truth value, kila use kwenye an "if" or\n'
          '"while" condition ama kama operand of the Boolean operations below.\n'
          '\n'
          'By default, an object ni considered true unless its kundi defines\n'
          'either a "__bool__()" method that returns "Uongo" ama a "__len__()"\n'
          'method that returns zero, when called ukijumuisha the object. [1]  Here '
          'are\n'
          'most of the built-in objects considered false:\n'
          '\n'
          '* constants defined to be false: "Tupu" na "Uongo".\n'
          '\n'
          '* zero of any numeric type: "0", "0.0", "0j", "Decimal(0)",\n'
          '  "Fraction(0, 1)"\n'
          '\n'
          '* empty sequences na collections: "\'\'", "()", "[]", "{}", '
          '"set()",\n'
          '  "range(0)"\n'
          '\n'
          'Operations na built-in functions that have a Boolean result '
          'always\n'
          'rudisha "0" ama "Uongo" kila false na "1" ama "Kweli" kila true, unless\n'
          'otherwise stated. (Important exception: the Boolean operations '
          '"or"\n'
          'and "and" always rudisha one of their operands.)\n',
 'try': 'The "try" statement\n'
        '*******************\n'
        '\n'
        'The "try" statement specifies exception handlers and/or cleanup code\n'
        'kila a group of statements:\n'
        '\n'
        '   try_stmt  ::= try1_stmt | try2_stmt\n'
        '   try1_stmt ::= "try" ":" suite\n'
        '                 ("except" [expression ["as" identifier]] ":" '
        'suite)+\n'
        '                 ["else" ":" suite]\n'
        '                 ["finally" ":" suite]\n'
        '   try2_stmt ::= "try" ":" suite\n'
        '                 "finally" ":" suite\n'
        '\n'
        'The "except" clause(s) specify one ama more exception handlers. When '
        'no\n'
        'exception occurs kwenye the "try" clause, no exception handler is\n'
        'executed. When an exception occurs kwenye the "try" suite, a search kila '
        'an\n'
        'exception handler ni started.  This search inspects the tatizo '
        'clauses\n'
        'in turn until one ni found that matches the exception.  An '
        'expression-\n'
        'less tatizo clause, ikiwa present, must be last; it matches any\n'
        'exception.  For an tatizo clause ukijumuisha an expression, that expression\n'
        'is evaluated, na the clause matches the exception ikiwa the resulting\n'
        'object ni “compatible” ukijumuisha the exception.  An object ni compatible\n'
        'ukijumuisha an exception ikiwa it ni the kundi ama a base kundi of the '
        'exception\n'
        'object ama a tuple containing an item compatible ukijumuisha the exception.\n'
        '\n'
        'If no tatizo clause matches the exception, the search kila an '
        'exception\n'
        'handler endeleas kwenye the surrounding code na on the invocation '
        'stack.\n'
        '[1]\n'
        '\n'
        'If the evaluation of an expression kwenye the header of an tatizo clause\n'
        'raises an exception, the original search kila a handler ni canceled '
        'and\n'
        'a search starts kila the new exception kwenye the surrounding code na on\n'
        'the call stack (it ni treated kama ikiwa the entire "try" statement '
        'raised\n'
        'the exception).\n'
        '\n'
        'When a matching tatizo clause ni found, the exception ni assigned to\n'
        'the target specified after the "as" keyword kwenye that tatizo clause, '
        'if\n'
        'present, na the tatizo clause’s suite ni executed.  All except\n'
        'clauses must have an executable block.  When the end of this block '
        'is\n'
        'reached, execution endeleas normally after the entire try '
        'statement.\n'
        '(This means that ikiwa two nested handlers exist kila the same '
        'exception,\n'
        'and the exception occurs kwenye the try clause of the inner handler, the\n'
        'outer handler will sio handle the exception.)\n'
        '\n'
        'When an exception has been assigned using "as target", it ni cleared\n'
        'at the end of the tatizo clause.  This ni kama if\n'
        '\n'
        '   tatizo E kama N:\n'
        '       foo\n'
        '\n'
        'was translated to\n'
        '\n'
        '   tatizo E kama N:\n'
        '       jaribu:\n'
        '           foo\n'
        '       mwishowe:\n'
        '           toa N\n'
        '\n'
        'This means the exception must be assigned to a different name to be\n'
        'able to refer to it after the tatizo clause.  Exceptions are cleared\n'
        'because ukijumuisha the traceback attached to them, they form a reference\n'
        'cycle ukijumuisha the stack frame, keeping all locals kwenye that frame alive\n'
        'until the next garbage collection occurs.\n'
        '\n'
        'Before an tatizo clause’s suite ni executed, details about the\n'
        'exception are stored kwenye the "sys" module na can be accessed via\n'
        '"sys.exc_info()". "sys.exc_info()" returns a 3-tuple consisting of '
        'the\n'
        'exception class, the exception instance na a traceback object (see\n'
        'section The standard type hierarchy) identifying the point kwenye the\n'
        'program where the exception occurred.  "sys.exc_info()" values are\n'
        'restored to their previous values (before the call) when returning\n'
        'kutoka a function that handled an exception.\n'
        '\n'
        'The optional "else" clause ni executed ikiwa the control flow leaves '
        'the\n'
        '"try" suite, no exception was raised, na no "return", "endelea", '
        'or\n'
        '"koma" statement was executed.  Exceptions kwenye the "else" clause are\n'
        'sio handled by the preceding "except" clauses.\n'
        '\n'
        'If "finally" ni present, it specifies a ‘cleanup’ handler.  The '
        '"try"\n'
        'clause ni executed, including any "except" na "else" clauses.  If '
        'an\n'
        'exception occurs kwenye any of the clauses na ni sio handled, the\n'
        'exception ni temporarily saved. The "finally" clause ni executed.  '
        'If\n'
        'there ni a saved exception it ni re-raised at the end of the '
        '"finally"\n'
        'clause.  If the "finally" clause raises another exception, the saved\n'
        'exception ni set kama the context of the new exception. If the '
        '"finally"\n'
        'clause executes a "return", "koma" ama "endelea" statement, the '
        'saved\n'
        'exception ni discarded:\n'
        '\n'
        '   >>> eleza f():\n'
        '   ...     jaribu:\n'
        '   ...         1/0\n'
        '   ...     mwishowe:\n'
        '   ...         rudisha 42\n'
        '   ...\n'
        '   >>> f()\n'
        '   42\n'
        '\n'
        'The exception information ni sio available to the program during\n'
        'execution of the "finally" clause.\n'
        '\n'
        'When a "return", "koma" ama "endelea" statement ni executed kwenye the\n'
        '"try" suite of a "try"…"finally" statement, the "finally" clause is\n'
        'also executed ‘on the way out.’\n'
        '\n'
        'The rudisha value of a function ni determined by the last "return"\n'
        'statement executed.  Since the "finally" clause always executes, a\n'
        '"return" statement executed kwenye the "finally" clause will always be '
        'the\n'
        'last one executed:\n'
        '\n'
        '   >>> eleza foo():\n'
        '   ...     jaribu:\n'
        "   ...         rudisha 'try'\n"
        '   ...     mwishowe:\n'
        "   ...         rudisha 'finally'\n"
        '   ...\n'
        '   >>> foo()\n'
        "   'finally'\n"
        '\n'
        'Additional information on exceptions can be found kwenye section\n'
        'Exceptions, na information on using the "raise" statement to '
        'generate\n'
        'exceptions may be found kwenye section The ashiria statement.\n'
        '\n'
        'Changed kwenye version 3.8: Prior to Python 3.8, a "endelea" statement\n'
        'was illegal kwenye the "finally" clause due to a problem ukijumuisha the\n'
        'implementation.\n',
 'types': 'The standard type hierarchy\n'
          '***************************\n'
          '\n'
          'Below ni a list of the types that are built into Python.  '
          'Extension\n'
          'modules (written kwenye C, Java, ama other languages, depending on the\n'
          'implementation) can define additional types.  Future versions of\n'
          'Python may add types to the type hierarchy (e.g., rational '
          'numbers,\n'
          'efficiently stored arrays of integers, etc.), although such '
          'additions\n'
          'will often be provided via the standard library instead.\n'
          '\n'
          'Some of the type descriptions below contain a paragraph listing\n'
          '‘special attributes.’  These are attributes that provide access to '
          'the\n'
          'implementation na are sio inended kila general use.  Their '
          'definition\n'
          'may change kwenye the future.\n'
          '\n'
          'Tupu\n'
          '   This type has a single value.  There ni a single object ukijumuisha '
          'this\n'
          '   value. This object ni accessed through the built-in name "Tupu". '
          'It\n'
          '   ni used to signify the absence of a value kwenye many situations, '
          'e.g.,\n'
          '   it ni returned kutoka functions that don’t explicitly return\n'
          '   anything. Its truth value ni false.\n'
          '\n'
          'NotImplemented\n'
          '   This type has a single value.  There ni a single object ukijumuisha '
          'this\n'
          '   value. This object ni accessed through the built-in name\n'
          '   "NotImplemented". Numeric methods na rich comparison methods\n'
          '   should rudisha this value ikiwa they do sio implement the operation '
          'for\n'
          '   the operands provided.  (The interpreter will then try the\n'
          '   reflected operation, ama some other fallback, depending on the\n'
          '   operator.)  Its truth value ni true.\n'
          '\n'
          '   See Implementing the arithmetic operations kila more details.\n'
          '\n'
          'Ellipsis\n'
          '   This type has a single value.  There ni a single object ukijumuisha '
          'this\n'
          '   value. This object ni accessed through the literal "..." ama the\n'
          '   built-in name "Ellipsis".  Its truth value ni true.\n'
          '\n'
          '"numbers.Number"\n'
          '   These are created by numeric literals na returned kama results '
          'by\n'
          '   arithmetic operators na arithmetic built-in functions.  '
          'Numeric\n'
          '   objects are immutable; once created their value never changes.\n'
          '   Python numbers are of course strongly related to mathematical\n'
          '   numbers, but subject to the limitations of numerical '
          'representation\n'
          '   kwenye computers.\n'
          '\n'
          '   Python distinguishes between integers, floating point numbers, '
          'and\n'
          '   complex numbers:\n'
          '\n'
          '   "numbers.Integral"\n'
          '      These represent elements kutoka the mathematical set of '
          'integers\n'
          '      (positive na negative).\n'
          '\n'
          '      There are two types of integers:\n'
          '\n'
          '      Integers ("int")\n'
          '\n'
          '         These represent numbers kwenye an unlimited range, subject to\n'
          '         available (virtual) memory only.  For the purpose of '
          'shift\n'
          '         na mask operations, a binary representation ni assumed, '
          'and\n'
          '         negative numbers are represented kwenye a variant of 2’s\n'
          '         complement which gives the illusion of an infinite string '
          'of\n'
          '         sign bits extending to the left.\n'
          '\n'
          '      Booleans ("bool")\n'
          '         These represent the truth values Uongo na Kweli.  The two\n'
          '         objects representing the values "Uongo" na "Kweli" are '
          'the\n'
          '         only Boolean objects. The Boolean type ni a subtype of '
          'the\n'
          '         integer type, na Boolean values behave like the values 0 '
          'and\n'
          '         1, respectively, kwenye almost all contexts, the exception '
          'being\n'
          '         that when converted to a string, the strings ""Uongo"" or\n'
          '         ""Kweli"" are returned, respectively.\n'
          '\n'
          '      The rules kila integer representation are intended to give '
          'the\n'
          '      most meaningful interpretation of shift na mask operations\n'
          '      involving negative integers.\n'
          '\n'
          '   "numbers.Real" ("float")\n'
          '      These represent machine-level double precision floating '
          'point\n'
          '      numbers. You are at the mercy of the underlying machine\n'
          '      architecture (and C ama Java implementation) kila the accepted\n'
          '      range na handling of overflow. Python does sio support '
          'single-\n'
          '      precision floating point numbers; the savings kwenye processor '
          'and\n'
          '      memory usage that are usually the reason kila using these are\n'
          '      dwarfed by the overhead of using objects kwenye Python, so there '
          'is\n'
          '      no reason to complicate the language ukijumuisha two kinds of '
          'floating\n'
          '      point numbers.\n'
          '\n'
          '   "numbers.Complex" ("complex")\n'
          '      These represent complex numbers kama a pair of machine-level\n'
          '      double precision floating point numbers.  The same caveats '
          'apply\n'
          '      kama kila floating point numbers. The real na imaginary parts '
          'of a\n'
          '      complex number "z" can be retrieved through the read-only\n'
          '      attributes "z.real" na "z.imag".\n'
          '\n'
          'Sequences\n'
          '   These represent finite ordered sets indexed by non-negative\n'
          '   numbers. The built-in function "len()" returns the number of '
          'items\n'
          '   of a sequence. When the length of a sequence ni *n*, the index '
          'set\n'
          '   contains the numbers 0, 1, …, *n*-1.  Item *i* of sequence *a* '
          'is\n'
          '   selected by "a[i]".\n'
          '\n'
          '   Sequences also support slicing: "a[i:j]" selects all items with\n'
          '   index *k* such that *i* "<=" *k* "<" *j*.  When used kama an\n'
          '   expression, a slice ni a sequence of the same type.  This '
          'implies\n'
          '   that the index set ni renumbered so that it starts at 0.\n'
          '\n'
          '   Some sequences also support “extended slicing” ukijumuisha a third '
          '“step”\n'
          '   parameter: "a[i:j:k]" selects all items of *a* ukijumuisha index *x* '
          'where\n'
          '   "x = i + n*k", *n* ">=" "0" na *i* "<=" *x* "<" *j*.\n'
          '\n'
          '   Sequences are distinguished according to their mutability:\n'
          '\n'
          '   Immutable sequences\n'
          '      An object of an immutable sequence type cansio change once it '
          'is\n'
          '      created.  (If the object contains references to other '
          'objects,\n'
          '      these other objects may be mutable na may be changed; '
          'however,\n'
          '      the collection of objects directly referenced by an '
          'immutable\n'
          '      object cansio change.)\n'
          '\n'
          '      The following types are immutable sequences:\n'
          '\n'
          '      Strings\n'
          '         A string ni a sequence of values that represent Unicode '
          'code\n'
          '         points. All the code points kwenye the range "U+0000 - '
          'U+10FFFF"\n'
          '         can be represented kwenye a string.  Python doesn’t have a '
          '"char"\n'
          '         type; instead, every code point kwenye the string ni '
          'represented\n'
          '         kama a string object ukijumuisha length "1".  The built-in '
          'function\n'
          '         "ord()" converts a code point kutoka its string form to an\n'
          '         integer kwenye the range "0 - 10FFFF"; "chr()" converts an\n'
          '         integer kwenye the range "0 - 10FFFF" to the corresponding '
          'length\n'
          '         "1" string object. "str.encode()" can be used to convert '
          'a\n'
          '         "str" to "bytes" using the given text encoding, and\n'
          '         "bytes.decode()" can be used to achieve the opposite.\n'
          '\n'
          '      Tuples\n'
          '         The items of a tuple are arbitrary Python objects. Tuples '
          'of\n'
          '         two ama more items are formed by comma-separated lists of\n'
          '         expressions.  A tuple of one item (a ‘singleton’) can be\n'
          '         formed by affixing a comma to an expression (an expression '
          'by\n'
          '         itself does sio create a tuple, since parentheses must be\n'
          '         usable kila grouping of expressions).  An empty tuple can '
          'be\n'
          '         formed by an empty pair of parentheses.\n'
          '\n'
          '      Bytes\n'
          '         A bytes object ni an immutable array.  The items are '
          '8-bit\n'
          '         bytes, represented by integers kwenye the range 0 <= x < 256.\n'
          '         Bytes literals (like "b\'abc\'") na the built-in '
          '"bytes()"\n'
          '         constructor can be used to create bytes objects.  Also, '
          'bytes\n'
          '         objects can be decoded to strings via the "decode()" '
          'method.\n'
          '\n'
          '   Mutable sequences\n'
          '      Mutable sequences can be changed after they are created.  '
          'The\n'
          '      subscription na slicing notations can be used kama the target '
          'of\n'
          '      assignment na "del" (delete) statements.\n'
          '\n'
          '      There are currently two intrinsic mutable sequence types:\n'
          '\n'
          '      Lists\n'
          '         The items of a list are arbitrary Python objects.  Lists '
          'are\n'
          '         formed by placing a comma-separated list of expressions '
          'in\n'
          '         square brackets. (Note that there are no special cases '
          'needed\n'
          '         to form lists of length 0 ama 1.)\n'
          '\n'
          '      Byte Arrays\n'
          '         A bytearray object ni a mutable array. They are created '
          'by\n'
          '         the built-in "bytearray()" constructor.  Aside kutoka being\n'
          '         mutable (and hence unhashable), byte arrays otherwise '
          'provide\n'
          '         the same interface na functionality kama immutable "bytes"\n'
          '         objects.\n'
          '\n'
          '      The extension module "array" provides an additional example '
          'of a\n'
          '      mutable sequence type, kama does the "collections" module.\n'
          '\n'
          'Set types\n'
          '   These represent unordered, finite sets of unique, immutable\n'
          '   objects. As such, they cansio be indexed by any subscript. '
          'However,\n'
          '   they can be iterated over, na the built-in function "len()"\n'
          '   returns the number of items kwenye a set. Common uses kila sets are '
          'fast\n'
          '   membership testing, removing duplicates kutoka a sequence, and\n'
          '   computing mathematical operations such kama intersection, union,\n'
          '   difference, na symmetric difference.\n'
          '\n'
          '   For set elements, the same immutability rules apply kama for\n'
          '   dictionary keys. Note that numeric types obey the normal rules '
          'for\n'
          '   numeric comparison: ikiwa two numbers compare equal (e.g., "1" and\n'
          '   "1.0"), only one of them can be contained kwenye a set.\n'
          '\n'
          '   There are currently two intrinsic set types:\n'
          '\n'
          '   Sets\n'
          '      These represent a mutable set. They are created by the '
          'built-in\n'
          '      "set()" constructor na can be modified afterwards by '
          'several\n'
          '      methods, such kama "add()".\n'
          '\n'
          '   Frozen sets\n'
          '      These represent an immutable set.  They are created by the\n'
          '      built-in "frozenset()" constructor.  As a frozenset ni '
          'immutable\n'
          '      na *hashable*, it can be used again kama an element of '
          'another\n'
          '      set, ama kama a dictionary key.\n'
          '\n'
          'Mappings\n'
          '   These represent finite sets of objects indexed by arbitrary '
          'index\n'
          '   sets. The subscript notation "a[k]" selects the item indexed by '
          '"k"\n'
          '   kutoka the mapping "a"; this can be used kwenye expressions na kama '
          'the\n'
          '   target of assignments ama "del" statements. The built-in '
          'function\n'
          '   "len()" returns the number of items kwenye a mapping.\n'
          '\n'
          '   There ni currently a single intrinsic mapping type:\n'
          '\n'
          '   Dictionaries\n'
          '      These represent finite sets of objects indexed by nearly\n'
          '      arbitrary values.  The only types of values sio acceptable '
          'as\n'
          '      keys are values containing lists ama dictionaries ama other\n'
          '      mutable types that are compared by value rather than by '
          'object\n'
          '      identity, the reason being that the efficient implementation '
          'of\n'
          '      dictionaries requires a key’s hash value to remain constant.\n'
          '      Numeric types used kila keys obey the normal rules kila '
          'numeric\n'
          '      comparison: ikiwa two numbers compare equal (e.g., "1" na '
          '"1.0")\n'
          '      then they can be used interchangeably to index the same\n'
          '      dictionary entry.\n'
          '\n'
          '      Dictionaries are mutable; they can be created by the "{...}"\n'
          '      notation (see section Dictionary displays).\n'
          '\n'
          '      The extension modules "dbm.ndbm" na "dbm.gnu" provide\n'
          '      additional examples of mapping types, kama does the '
          '"collections"\n'
          '      module.\n'
          '\n'
          'Callable types\n'
          '   These are the types to which the function call operation (see\n'
          '   section Calls) can be applied:\n'
          '\n'
          '   User-defined functions\n'
          '      A user-defined function object ni created by a function\n'
          '      definition (see section Function definitions).  It should be\n'
          '      called ukijumuisha an argument list containing the same number of '
          'items\n'
          '      kama the function’s formal parameter list.\n'
          '\n'
          '      Special attributes:\n'
          '\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | Attribute                 | Meaning                         '
          '|             |\n'
          '      '
          '|===========================|=================================|=============|\n'
          '      | "__doc__"                 | The function’s documentation    '
          '| Writable    |\n'
          '      |                           | string, ama "Tupu" ikiwa            '
          '|             |\n'
          '      |                           | unavailable; sio inerited by   '
          '|             |\n'
          '      |                           | subclasses.                     '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__name__"                | The function’s name.            '
          '| Writable    |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__qualname__"            | The function’s *qualified       '
          '| Writable    |\n'
          '      |                           | name*.  New kwenye version 3.3.     '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__module__"              | The name of the module the      '
          '| Writable    |\n'
          '      |                           | function was defined in, ama     '
          '|             |\n'
          '      |                           | "Tupu" ikiwa unavailable.          '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__defaults__"            | A tuple containing default      '
          '| Writable    |\n'
          '      |                           | argument values kila those       '
          '|             |\n'
          '      |                           | arguments that have defaults,   '
          '|             |\n'
          '      |                           | ama "Tupu" ikiwa no arguments have  '
          '|             |\n'
          '      |                           | a default value.                '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__code__"                | The code object representing    '
          '| Writable    |\n'
          '      |                           | the compiled function body.     '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__globals__"             | A reference to the dictionary   '
          '| Read-only   |\n'
          '      |                           | that holds the function’s       '
          '|             |\n'
          '      |                           | global variables — the global   '
          '|             |\n'
          '      |                           | namespace of the module kwenye      '
          '|             |\n'
          '      |                           | which the function was defined. '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__dict__"                | The namespace supporting        '
          '| Writable    |\n'
          '      |                           | arbitrary function attributes.  '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__closure__"             | "Tupu" ama a tuple of cells that '
          '| Read-only   |\n'
          '      |                           | contain bindings kila the        '
          '|             |\n'
          '      |                           | function’s free variables. See  '
          '|             |\n'
          '      |                           | below kila information on the    '
          '|             |\n'
          '      |                           | "cell_contents" attribute.      '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__annotations__"         | A dict containing annotations   '
          '| Writable    |\n'
          '      |                           | of parameters.  The keys of the '
          '|             |\n'
          '      |                           | dict are the parameter names,   '
          '|             |\n'
          '      |                           | na "\'return\'" kila the '
          'rudisha   |             |\n'
          '      |                           | annotation, ikiwa provided.        '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__kwdefaults__"          | A dict containing defaults kila  '
          '| Writable    |\n'
          '      |                           | keyword-only parameters.        '
          '|             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '\n'
          '      Most of the attributes labelled “Writable” check the type of '
          'the\n'
          '      assigned value.\n'
          '\n'
          '      Function objects also support getting na setting arbitrary\n'
          '      attributes, which can be used, kila example, to attach '
          'metadata\n'
          '      to functions.  Regular attribute dot-notation ni used to get '
          'and\n'
          '      set such attributes. *Note that the current implementation '
          'only\n'
          '      supports function attributes on user-defined functions. '
          'Function\n'
          '      attributes on built-in functions may be supported kwenye the\n'
          '      future.*\n'
          '\n'
          '      A cell object has the attribute "cell_contents". This can be\n'
          '      used to get the value of the cell, kama well kama set the value.\n'
          '\n'
          '      Additional information about a function’s definition can be\n'
          '      retrieved kutoka its code object; see the description of '
          'internal\n'
          '      types below. The "cell" type can be accessed kwenye the "types"\n'
          '      module.\n'
          '\n'
          '   Instance methods\n'
          '      An instance method object combines a class, a kundi instance '
          'and\n'
          '      any callable object (normally a user-defined function).\n'
          '\n'
          '      Special read-only attributes: "__self__" ni the kundi '
          'instance\n'
          '      object, "__func__" ni the function object; "__doc__" ni the\n'
          '      method’s documentation (same kama "__func__.__doc__"); '
          '"__name__"\n'
          '      ni the method name (same kama "__func__.__name__"); '
          '"__module__"\n'
          '      ni the name of the module the method was defined in, ama '
          '"Tupu"\n'
          '      ikiwa unavailable.\n'
          '\n'
          '      Methods also support accessing (but sio setting) the '
          'arbitrary\n'
          '      function attributes on the underlying function object.\n'
          '\n'
          '      User-defined method objects may be created when getting an\n'
          '      attribute of a kundi (perhaps via an instance of that class), '
          'if\n'
          '      that attribute ni a user-defined function object ama a class\n'
          '      method object.\n'
          '\n'
          '      When an instance method object ni created by retrieving a '
          'user-\n'
          '      defined function object kutoka a kundi via one of its '
          'instances,\n'
          '      its "__self__" attribute ni the instance, na the method '
          'object\n'
          '      ni said to be bound.  The new method’s "__func__" attribute '
          'is\n'
          '      the original function object.\n'
          '\n'
          '      When an instance method object ni created by retrieving a '
          'class\n'
          '      method object kutoka a kundi ama instance, its "__self__" '
          'attribute\n'
          '      ni the kundi itself, na its "__func__" attribute ni the\n'
          '      function object underlying the kundi method.\n'
          '\n'
          '      When an instance method object ni called, the underlying\n'
          '      function ("__func__") ni called, inserting the kundi '
          'instance\n'
          '      ("__self__") kwenye front of the argument list.  For instance, '
          'when\n'
          '      "C" ni a kundi which contains a definition kila a function '
          '"f()",\n'
          '      na "x" ni an instance of "C", calling "x.f(1)" ni equivalent '
          'to\n'
          '      calling "C.f(x, 1)".\n'
          '\n'
          '      When an instance method object ni derived kutoka a kundi '
          'method\n'
          '      object, the “kundi instance” stored kwenye "__self__" will '
          'actually\n'
          '      be the kundi itself, so that calling either "x.f(1)" ama '
          '"C.f(1)"\n'
          '      ni equivalent to calling "f(C,1)" where "f" ni the '
          'underlying\n'
          '      function.\n'
          '\n'
          '      Note that the transformation kutoka function object to '
          'instance\n'
          '      method object happens each time the attribute ni retrieved '
          'from\n'
          '      the instance.  In some cases, a fruitful optimization ni to\n'
          '      assign the attribute to a local variable na call that local\n'
          '      variable. Also notice that this transformation only happens '
          'for\n'
          '      user-defined functions; other callable objects (and all non-\n'
          '      callable objects) are retrieved without transformation.  It '
          'is\n'
          '      also important to note that user-defined functions which are\n'
          '      attributes of a kundi instance are sio converted to bound\n'
          '      methods; this *only* happens when the function ni an '
          'attribute\n'
          '      of the class.\n'
          '\n'
          '   Generator functions\n'
          '      A function ama method which uses the "tuma" statement (see\n'
          '      section The tuma statement) ni called a *generator '
          'function*.\n'
          '      Such a function, when called, always returns an iterator '
          'object\n'
          '      which can be used to execute the body of the function:  '
          'calling\n'
          '      the iterator’s "iterator.__next__()" method will cause the\n'
          '      function to execute until it provides a value using the '
          '"tuma"\n'
          '      statement.  When the function executes a "return" statement '
          'or\n'
          '      falls off the end, a "StopIteration" exception ni raised na '
          'the\n'
          '      iterator will have reached the end of the set of values to '
          'be\n'
          '      returned.\n'
          '\n'
          '   Coroutine functions\n'
          '      A function ama method which ni defined using "async def" is\n'
          '      called a *coroutine function*.  Such a function, when '
          'called,\n'
          '      returns a *coroutine* object.  It may contain "await"\n'
          '      expressions, kama well kama "async with" na "async for" '
          'statements.\n'
          '      See also the Coroutine Objects section.\n'
          '\n'
          '   Asynchronous generator functions\n'
          '      A function ama method which ni defined using "async def" and\n'
          '      which uses the "tuma" statement ni called a *asynchronous\n'
          '      generator function*.  Such a function, when called, returns '
          'an\n'
          '      asynchronous iterator object which can be used kwenye an "async '
          'for"\n'
          '      statement to execute the body of the function.\n'
          '\n'
          '      Calling the asynchronous iterator’s "aiterator.__anext__()"\n'
          '      method will rudisha an *awaitable* which when awaited will\n'
          '      execute until it provides a value using the "tuma" '
          'expression.\n'
          '      When the function executes an empty "return" statement ama '
          'falls\n'
          '      off the end, a "StopAsyncIteration" exception ni raised na '
          'the\n'
          '      asynchronous iterator will have reached the end of the set '
          'of\n'
          '      values to be tumaed.\n'
          '\n'
          '   Built-in functions\n'
          '      A built-in function object ni a wrapper around a C function.\n'
          '      Examples of built-in functions are "len()" na "math.sin()"\n'
          '      ("math" ni a standard built-in module). The number na type '
          'of\n'
          '      the arguments are determined by the C function. Special '
          'read-\n'
          '      only attributes: "__doc__" ni the function’s documentation\n'
          '      string, ama "Tupu" ikiwa unavailable; "__name__" ni the '
          'function’s\n'
          '      name; "__self__" ni set to "Tupu" (but see the next item);\n'
          '      "__module__" ni the name of the module the function was '
          'defined\n'
          '      kwenye ama "Tupu" ikiwa unavailable.\n'
          '\n'
          '   Built-in methods\n'
          '      This ni really a different disguise of a built-in function, '
          'this\n'
          '      time containing an object pitaed to the C function kama an\n'
          '      implicit extra argument.  An example of a built-in method is\n'
          '      "alist.append()", assuming *alist* ni a list object. In this\n'
          '      case, the special read-only attribute "__self__" ni set to '
          'the\n'
          '      object denoted by *alist*.\n'
          '\n'
          '   Classes\n'
          '      Classes are callable.  These objects normally act kama '
          'factories\n'
          '      kila new instances of themselves, but variations are possible '
          'for\n'
          '      kundi types that override "__new__()".  The arguments of the\n'
          '      call are pitaed to "__new__()" and, kwenye the typical case, to\n'
          '      "__init__()" to initialize the new instance.\n'
          '\n'
          '   Class Instances\n'
          '      Instances of arbitrary classes can be made callable by '
          'defining\n'
          '      a "__call__()" method kwenye their class.\n'
          '\n'
          'Modules\n'
          '   Modules are a basic organizational unit of Python code, na are\n'
          '   created by the agiza system kama invoked either by the "import"\n'
          '   statement, ama by calling functions such as\n'
          '   "importlib.import_module()" na built-in "__import__()".  A '
          'module\n'
          '   object has a namespace implemented by a dictionary object (this '
          'is\n'
          '   the dictionary referenced by the "__globals__" attribute of\n'
          '   functions defined kwenye the module).  Attribute references are\n'
          '   translated to lookups kwenye this dictionary, e.g., "m.x" ni '
          'equivalent\n'
          '   to "m.__dict__["x"]". A module object does sio contain the code\n'
          '   object used to initialize the module (since it isn’t needed '
          'once\n'
          '   the initialization ni done).\n'
          '\n'
          '   Attribute assignment updates the module’s namespace dictionary,\n'
          '   e.g., "m.x = 1" ni equivalent to "m.__dict__["x"] = 1".\n'
          '\n'
          '   Predefined (writable) attributes: "__name__" ni the module’s '
          'name;\n'
          '   "__doc__" ni the module’s documentation string, ama "Tupu" if\n'
          '   unavailable; "__annotations__" (optional) ni a dictionary\n'
          '   containing *variable annotations* collected during module body\n'
          '   execution; "__file__" ni the pathname of the file kutoka which '
          'the\n'
          '   module was loaded, ikiwa it was loaded kutoka a file. The "__file__"\n'
          '   attribute may be missing kila certain types of modules, such kama '
          'C\n'
          '   modules that are statically linked into the interpreter; for\n'
          '   extension modules loaded dynamically kutoka a shared library, it '
          'is\n'
          '   the pathname of the shared library file.\n'
          '\n'
          '   Special read-only attribute: "__dict__" ni the module’s '
          'namespace\n'
          '   kama a dictionary object.\n'
          '\n'
          '   **CPython implementation detail:** Because of the way CPython\n'
          '   clears module dictionaries, the module dictionary will be '
          'cleared\n'
          '   when the module falls out of scope even ikiwa the dictionary still '
          'has\n'
          '   live references.  To avoid this, copy the dictionary ama keep '
          'the\n'
          '   module around wakati using its dictionary directly.\n'
          '\n'
          'Custom classes\n'
          '   Custom kundi types are typically created by kundi definitions '
          '(see\n'
          '   section Class definitions).  A kundi has a namespace implemented '
          'by\n'
          '   a dictionary object. Class attribute references are translated '
          'to\n'
          '   lookups kwenye this dictionary, e.g., "C.x" ni translated to\n'
          '   "C.__dict__["x"]" (although there are a number of hooks which '
          'allow\n'
          '   kila other means of locating attributes). When the attribute name '
          'is\n'
          '   sio found there, the attribute search endeleas kwenye the base\n'
          '   classes. This search of the base classes uses the C3 method\n'
          '   resolution order which behaves correctly even kwenye the presence '
          'of\n'
          '   ‘diamond’ inheritance structures where there are multiple\n'
          '   inheritance paths leading back to a common ancestor. Additional\n'
          '   details on the C3 MRO used by Python can be found kwenye the\n'
          '   documentation accompanying the 2.3 release at\n'
          '   https://www.python.org/download/releases/2.3/mro/.\n'
          '\n'
          '   When a kundi attribute reference (kila kundi "C", say) would '
          'tuma a\n'
          '   kundi method object, it ni transformed into an instance method\n'
          '   object whose "__self__" attribute ni "C".  When it would tuma '
          'a\n'
          '   static method object, it ni transformed into the object wrapped '
          'by\n'
          '   the static method object. See section Implementing Descriptors '
          'for\n'
          '   another way kwenye which attributes retrieved kutoka a kundi may '
          'differ\n'
          '   kutoka those actually contained kwenye its "__dict__".\n'
          '\n'
          '   Class attribute assignments update the class’s dictionary, '
          'never\n'
          '   the dictionary of a base class.\n'
          '\n'
          '   A kundi object can be called (see above) to tuma a kundi '
          'instance\n'
          '   (see below).\n'
          '\n'
          '   Special attributes: "__name__" ni the kundi name; "__module__" '
          'is\n'
          '   the module name kwenye which the kundi was defined; "__dict__" ni '
          'the\n'
          '   dictionary containing the class’s namespace; "__bases__" ni a '
          'tuple\n'
          '   containing the base classes, kwenye the order of their occurrence '
          'in\n'
          '   the base kundi list; "__doc__" ni the class’s documentation '
          'string,\n'
          '   ama "Tupu" ikiwa undefined; "__annotations__" (optional) ni a\n'
          '   dictionary containing *variable annotations* collected during '
          'class\n'
          '   body execution.\n'
          '\n'
          'Class instances\n'
          '   A kundi instance ni created by calling a kundi object (see '
          'above).\n'
          '   A kundi instance has a namespace implemented kama a dictionary '
          'which\n'
          '   ni the first place kwenye which attribute references are searched.\n'
          '   When an attribute ni sio found there, na the instance’s kundi '
          'has\n'
          '   an attribute by that name, the search endeleas ukijumuisha the class\n'
          '   attributes.  If a kundi attribute ni found that ni a '
          'user-defined\n'
          '   function object, it ni transformed into an instance method '
          'object\n'
          '   whose "__self__" attribute ni the instance.  Static method and\n'
          '   kundi method objects are also transformed; see above under\n'
          '   “Classes”.  See section Implementing Descriptors kila another way '
          'in\n'
          '   which attributes of a kundi retrieved via its instances may '
          'differ\n'
          '   kutoka the objects actually stored kwenye the class’s "__dict__".  If '
          'no\n'
          '   kundi attribute ni found, na the object’s kundi has a\n'
          '   "__getattr__()" method, that ni called to satisfy the lookup.\n'
          '\n'
          '   Attribute assignments na deletions update the instance’s\n'
          '   dictionary, never a class’s dictionary.  If the kundi has a\n'
          '   "__setattr__()" ama "__delattr__()" method, this ni called '
          'instead\n'
          '   of updating the instance dictionary directly.\n'
          '\n'
          '   Class instances can pretend to be numbers, sequences, ama '
          'mappings\n'
          '   ikiwa they have methods ukijumuisha certain special names.  See section\n'
          '   Special method names.\n'
          '\n'
          '   Special attributes: "__dict__" ni the attribute dictionary;\n'
          '   "__class__" ni the instance’s class.\n'
          '\n'
          'I/O objects (also known kama file objects)\n'
          '   A *file object* represents an open file.  Various shortcuts are\n'
          '   available to create file objects: the "open()" built-in '
          'function,\n'
          '   na also "os.popen()", "os.fdopen()", na the "makefile()" '
          'method\n'
          '   of socket objects (and perhaps by other functions ama methods\n'
          '   provided by extension modules).\n'
          '\n'
          '   The objects "sys.stdin", "sys.stdout" na "sys.stderr" are\n'
          '   initialized to file objects corresponding to the interpreter’s\n'
          '   standard input, output na error streams; they are all open kwenye '
          'text\n'
          '   mode na therefore follow the interface defined by the\n'
          '   "io.TextIOBase" abstract class.\n'
          '\n'
          'Internal types\n'
          '   A few types used internally by the interpreter are exposed to '
          'the\n'
          '   user. Their definitions may change ukijumuisha future versions of the\n'
          '   interpreter, but they are mentioned here kila completeness.\n'
          '\n'
          '   Code objects\n'
          '      Code objects represent *byte-compiled* executable Python '
          'code,\n'
          '      ama *bytecode*. The difference between a code object na a\n'
          '      function object ni that the function object contains an '
          'explicit\n'
          '      reference to the function’s globals (the module kwenye which it '
          'was\n'
          '      defined), wakati a code object contains no context; also the\n'
          '      default argument values are stored kwenye the function object, '
          'not\n'
          '      kwenye the code object (because they represent values calculated '
          'at\n'
          '      run-time).  Unlike function objects, code objects are '
          'immutable\n'
          '      na contain no references (directly ama indirectly) to '
          'mutable\n'
          '      objects.\n'
          '\n'
          '      Special read-only attributes: "co_name" gives the function '
          'name;\n'
          '      "co_argcount" ni the total number of positional arguments\n'
          '      (including positional-only arguments na arguments ukijumuisha '
          'default\n'
          '      values); "co_posonlyargcount" ni the number of '
          'positional-only\n'
          '      arguments (including arguments ukijumuisha default values);\n'
          '      "co_kwonlyargcount" ni the number of keyword-only arguments\n'
          '      (including arguments ukijumuisha default values); "co_nlocals" ni '
          'the\n'
          '      number of local variables used by the function (including\n'
          '      arguments); "co_varnames" ni a tuple containing the names of '
          'the\n'
          '      local variables (starting ukijumuisha the argument names);\n'
          '      "co_cellvars" ni a tuple containing the names of local '
          'variables\n'
          '      that are referenced by nested functions; "co_freevars" ni a\n'
          '      tuple containing the names of free variables; "co_code" ni a\n'
          '      string representing the sequence of bytecode instructions;\n'
          '      "co_consts" ni a tuple containing the literals used by the\n'
          '      bytecode; "co_names" ni a tuple containing the names used by '
          'the\n'
          '      bytecode; "co_filename" ni the filename kutoka which the code '
          'was\n'
          '      compiled; "co_firstlineno" ni the first line number of the\n'
          '      function; "co_lnotab" ni a string encoding the mapping from\n'
          '      bytecode offsets to line numbers (kila details see the source\n'
          '      code of the interpreter); "co_stacksize" ni the required '
          'stack\n'
          '      size (including local variables); "co_flags" ni an integer\n'
          '      encoding a number of flags kila the interpreter.\n'
          '\n'
          '      The following flag bits are defined kila "co_flags": bit '
          '"0x04"\n'
          '      ni set ikiwa the function uses the "*arguments" syntax to accept '
          'an\n'
          '      arbitrary number of positional arguments; bit "0x08" ni set '
          'if\n'
          '      the function uses the "**keywords" syntax to accept '
          'arbitrary\n'
          '      keyword arguments; bit "0x20" ni set ikiwa the function ni a\n'
          '      generator.\n'
          '\n'
          '      Future feature declarations ("kutoka __future__ agiza '
          'division")\n'
          '      also use bits kwenye "co_flags" to indicate whether a code '
          'object\n'
          '      was compiled ukijumuisha a particular feature enabled: bit "0x2000" '
          'is\n'
          '      set ikiwa the function was compiled ukijumuisha future division '
          'enabled;\n'
          '      bits "0x10" na "0x1000" were used kwenye earlier versions of\n'
          '      Python.\n'
          '\n'
          '      Other bits kwenye "co_flags" are reserved kila internal use.\n'
          '\n'
          '      If a code object represents a function, the first item in\n'
          '      "co_consts" ni the documentation string of the function, or\n'
          '      "Tupu" ikiwa undefined.\n'
          '\n'
          '   Frame objects\n'
          '      Frame objects represent execution frames.  They may occur in\n'
          '      traceback objects (see below), na are also pitaed to '
          'registered\n'
          '      trace functions.\n'
          '\n'
          '      Special read-only attributes: "f_back" ni to the previous '
          'stack\n'
          '      frame (towards the caller), ama "Tupu" ikiwa this ni the bottom\n'
          '      stack frame; "f_code" ni the code object being executed kwenye '
          'this\n'
          '      frame; "f_locals" ni the dictionary used to look up local\n'
          '      variables; "f_globals" ni used kila global variables;\n'
          '      "f_builtins" ni used kila built-in (intrinsic) names; '
          '"f_lasti"\n'
          '      gives the precise instruction (this ni an index into the\n'
          '      bytecode string of the code object).\n'
          '\n'
          '      Special writable attributes: "f_trace", ikiwa sio "Tupu", ni a\n'
          '      function called kila various events during code execution '
          '(this\n'
          '      ni used by the debugger). Normally an event ni triggered for\n'
          '      each new source line - this can be disabled by setting\n'
          '      "f_trace_lines" to "Uongo".\n'
          '\n'
          '      Implementations *may* allow per-opcode events to be requested '
          'by\n'
          '      setting "f_trace_opcodes" to "Kweli". Note that this may lead '
          'to\n'
          '      undefined interpreter behaviour ikiwa exceptions raised by the\n'
          '      trace function escape to the function being traced.\n'
          '\n'
          '      "f_lineno" ni the current line number of the frame — writing '
          'to\n'
          '      this kutoka within a trace function jumps to the given line '
          '(only\n'
          '      kila the bottom-most frame).  A debugger can implement a Jump\n'
          '      command (aka Set Next Statement) by writing to f_lineno.\n'
          '\n'
          '      Frame objects support one method:\n'
          '\n'
          '      frame.clear()\n'
          '\n'
          '         This method clears all references to local variables held '
          'by\n'
          '         the frame.  Also, ikiwa the frame belonged to a generator, '
          'the\n'
          '         generator ni finalized.  This helps koma reference '
          'cycles\n'
          '         involving frame objects (kila example when catching an\n'
          '         exception na storing its traceback kila later use).\n'
          '\n'
          '         "RuntimeError" ni raised ikiwa the frame ni currently '
          'executing.\n'
          '\n'
          '         New kwenye version 3.4.\n'
          '\n'
          '   Traceback objects\n'
          '      Traceback objects represent a stack trace of an exception.  '
          'A\n'
          '      traceback object ni implicitly created when an exception '
          'occurs,\n'
          '      na may also be explicitly created by calling\n'
          '      "types.TracebackType".\n'
          '\n'
          '      For implicitly created tracebacks, when the search kila an\n'
          '      exception handler unwinds the execution stack, at each '
          'unwound\n'
          '      level a traceback object ni inserted kwenye front of the current\n'
          '      traceback.  When an exception handler ni entered, the stack\n'
          '      trace ni made available to the program. (See section The try\n'
          '      statement.) It ni accessible kama the third item of the tuple\n'
          '      returned by "sys.exc_info()", na kama the "__traceback__"\n'
          '      attribute of the caught exception.\n'
          '\n'
          '      When the program contains no suitable handler, the stack '
          'trace\n'
          '      ni written (nicely formatted) to the standard error stream; '
          'if\n'
          '      the interpreter ni interactive, it ni also made available to '
          'the\n'
          '      user kama "sys.last_traceback".\n'
          '\n'
          '      For explicitly created tracebacks, it ni up to the creator '
          'of\n'
          '      the traceback to determine how the "tb_next" attributes '
          'should\n'
          '      be linked to form a full stack trace.\n'
          '\n'
          '      Special read-only attributes: "tb_frame" points to the '
          'execution\n'
          '      frame of the current level; "tb_lineno" gives the line '
          'number\n'
          '      where the exception occurred; "tb_lasti" indicates the '
          'precise\n'
          '      instruction. The line number na last instruction kwenye the\n'
          '      traceback may differ kutoka the line number of its frame object '
          'if\n'
          '      the exception occurred kwenye a "try" statement ukijumuisha no matching\n'
          '      tatizo clause ama ukijumuisha a finally clause.\n'
          '\n'
          '      Special writable attribute: "tb_next" ni the next level kwenye '
          'the\n'
          '      stack trace (towards the frame where the exception occurred), '
          'or\n'
          '      "Tupu" ikiwa there ni no next level.\n'
          '\n'
          '      Changed kwenye version 3.7: Traceback objects can now be '
          'explicitly\n'
          '      instantiated kutoka Python code, na the "tb_next" attribute '
          'of\n'
          '      existing instances can be updated.\n'
          '\n'
          '   Slice objects\n'
          '      Slice objects are used to represent slices kila '
          '"__getitem__()"\n'
          '      methods.  They are also created by the built-in "slice()"\n'
          '      function.\n'
          '\n'
          '      Special read-only attributes: "start" ni the lower bound; '
          '"stop"\n'
          '      ni the upper bound; "step" ni the step value; each ni "Tupu" '
          'if\n'
          '      omitted.  These attributes can have any type.\n'
          '\n'
          '      Slice objects support one method:\n'
          '\n'
          '      slice.indices(self, length)\n'
          '\n'
          '         This method takes a single integer argument *length* and\n'
          '         computes information about the slice that the slice '
          'object\n'
          '         would describe ikiwa applied to a sequence of *length* '
          'items.\n'
          '         It returns a tuple of three integers; respectively these '
          'are\n'
          '         the *start* na *stop* indices na the *step* ama stride\n'
          '         length of the slice. Missing ama out-of-bounds indices are\n'
          '         handled kwenye a manner consistent ukijumuisha regular slices.\n'
          '\n'
          '   Static method objects\n'
          '      Static method objects provide a way of defeating the\n'
          '      transformation of function objects to method objects '
          'described\n'
          '      above. A static method object ni a wrapper around any other\n'
          '      object, usually a user-defined method object. When a static\n'
          '      method object ni retrieved kutoka a kundi ama a kundi instance, '
          'the\n'
          '      object actually returned ni the wrapped object, which ni not\n'
          '      subject to any further transformation. Static method objects '
          'are\n'
          '      sio themselves callable, although the objects they wrap '
          'usually\n'
          '      are. Static method objects are created by the built-in\n'
          '      "staticmethod()" constructor.\n'
          '\n'
          '   Class method objects\n'
          '      A kundi method object, like a static method object, ni a '
          'wrapper\n'
          '      around another object that alters the way kwenye which that '
          'object\n'
          '      ni retrieved kutoka classes na kundi instances. The behaviour '
          'of\n'
          '      kundi method objects upon such retrieval ni described above,\n'
          '      under “User-defined methods”. Class method objects are '
          'created\n'
          '      by the built-in "classmethod()" constructor.\n',
 'typesfunctions': 'Functions\n'
                   '*********\n'
                   '\n'
                   'Function objects are created by function definitions.  The '
                   'only\n'
                   'operation on a function object ni to call it: '
                   '"func(argument-list)".\n'
                   '\n'
                   'There are really two flavors of function objects: built-in '
                   'functions\n'
                   'and user-defined functions.  Both support the same '
                   'operation (to call\n'
                   'the function), but the implementation ni different, hence '
                   'the\n'
                   'different object types.\n'
                   '\n'
                   'See Function definitions kila more information.\n',
 'typesmapping': 'Mapping Types — "dict"\n'
                 '**********************\n'
                 '\n'
                 'A *mapping* object maps *hashable* values to arbitrary '
                 'objects.\n'
                 'Mappings are mutable objects.  There ni currently only one '
                 'standard\n'
                 'mapping type, the *dictionary*.  (For other containers see '
                 'the built-\n'
                 'in "list", "set", na "tuple" classes, na the "collections" '
                 'module.)\n'
                 '\n'
                 'A dictionary’s keys are *almost* arbitrary values.  Values '
                 'that are\n'
                 'sio *hashable*, that is, values containing lists, '
                 'dictionaries or\n'
                 'other mutable types (that are compared by value rather than '
                 'by object\n'
                 'identity) may sio be used kama keys.  Numeric types used kila '
                 'keys obey\n'
                 'the normal rules kila numeric comparison: ikiwa two numbers '
                 'compare equal\n'
                 '(such kama "1" na "1.0") then they can be used '
                 'interchangeably to index\n'
                 'the same dictionary entry.  (Note however, that since '
                 'computers store\n'
                 'floating-point numbers kama approximations it ni usually '
                 'unwise to use\n'
                 'them kama dictionary keys.)\n'
                 '\n'
                 'Dictionaries can be created by placing a comma-separated '
                 'list of "key:\n'
                 'value" pairs within braces, kila example: "{\'jack\': 4098, '
                 "'sjoerd':\n"
                 '4127}" ama "{4098: \'jack\', 4127: \'sjoerd\'}", ama by the '
                 '"dict"\n'
                 'constructor.\n'
                 '\n'
                 'kundi dict(**kwarg)\n'
                 'kundi dict(mapping, **kwarg)\n'
                 'kundi dict(iterable, **kwarg)\n'
                 '\n'
                 '   Return a new dictionary initialized kutoka an optional '
                 'positional\n'
                 '   argument na a possibly empty set of keyword arguments.\n'
                 '\n'
                 '   If no positional argument ni given, an empty dictionary '
                 'is created.\n'
                 '   If a positional argument ni given na it ni a mapping '
                 'object, a\n'
                 '   dictionary ni created ukijumuisha the same key-value pairs kama '
                 'the mapping\n'
                 '   object.  Otherwise, the positional argument must be an '
                 '*iterable*\n'
                 '   object.  Each item kwenye the iterable must itself be an '
                 'iterable with\n'
                 '   exactly two objects.  The first object of each item '
                 'becomes a key\n'
                 '   kwenye the new dictionary, na the second object the '
                 'corresponding\n'
                 '   value.  If a key occurs more than once, the last value '
                 'kila that key\n'
                 '   becomes the corresponding value kwenye the new dictionary.\n'
                 '\n'
                 '   If keyword arguments are given, the keyword arguments na '
                 'their\n'
                 '   values are added to the dictionary created kutoka the '
                 'positional\n'
                 '   argument.  If a key being added ni already present, the '
                 'value from\n'
                 '   the keyword argument replaces the value kutoka the '
                 'positional\n'
                 '   argument.\n'
                 '\n'
                 '   To illustrate, the following examples all rudisha a '
                 'dictionary equal\n'
                 '   to "{"one": 1, "two": 2, "three": 3}":\n'
                 '\n'
                 '      >>> a = dict(one=1, two=2, three=3)\n'
                 "      >>> b = {'one': 1, 'two': 2, 'three': 3}\n"
                 "      >>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n"
                 "      >>> d = dict([('two', 2), ('one', 1), ('three', 3)])\n"
                 "      >>> e = dict({'three': 3, 'one': 1, 'two': 2})\n"
                 '      >>> a == b == c == d == e\n'
                 '      Kweli\n'
                 '\n'
                 '   Providing keyword arguments kama kwenye the first example only '
                 'works for\n'
                 '   keys that are valid Python identifiers.  Otherwise, any '
                 'valid keys\n'
                 '   can be used.\n'
                 '\n'
                 '   These are the operations that dictionaries support (and '
                 'therefore,\n'
                 '   custom mapping types should support too):\n'
                 '\n'
                 '   list(d)\n'
                 '\n'
                 '      Return a list of all the keys used kwenye the dictionary '
                 '*d*.\n'
                 '\n'
                 '   len(d)\n'
                 '\n'
                 '      Return the number of items kwenye the dictionary *d*.\n'
                 '\n'
                 '   d[key]\n'
                 '\n'
                 '      Return the item of *d* ukijumuisha key *key*.  Raises a '
                 '"KeyError" if\n'
                 '      *key* ni haiko kwenye the map.\n'
                 '\n'
                 '      If a subkundi of dict defines a method "__missing__()" '
                 'and *key*\n'
                 '      ni sio present, the "d[key]" operation calls that '
                 'method with\n'
                 '      the key *key* kama argument.  The "d[key]" operation '
                 'then returns\n'
                 '      ama raises whatever ni returned ama raised by the\n'
                 '      "__missing__(key)" call. No other operations ama '
                 'methods invoke\n'
                 '      "__missing__()". If "__missing__()" ni sio defined, '
                 '"KeyError"\n'
                 '      ni raised. "__missing__()" must be a method; it cansio '
                 'be an\n'
                 '      instance variable:\n'
                 '\n'
                 '         >>> kundi Counter(dict):\n'
                 '         ...     eleza __missing__(self, key):\n'
                 '         ...         rudisha 0\n'
                 '         >>> c = Counter()\n'
                 "         >>> c['red']\n"
                 '         0\n'
                 "         >>> c['red'] += 1\n"
                 "         >>> c['red']\n"
                 '         1\n'
                 '\n'
                 '      The example above shows part of the implementation of\n'
                 '      "collections.Counter".  A different "__missing__" '
                 'method ni used\n'
                 '      by "collections.defaultdict".\n'
                 '\n'
                 '   d[key] = value\n'
                 '\n'
                 '      Set "d[key]" to *value*.\n'
                 '\n'
                 '   toa d[key]\n'
                 '\n'
                 '      Remove "d[key]" kutoka *d*.  Raises a "KeyError" ikiwa '
                 '*key* ni not\n'
                 '      kwenye the map.\n'
                 '\n'
                 '   key kwenye d\n'
                 '\n'
                 '      Return "Kweli" ikiwa *d* has a key *key*, isipokua "Uongo".\n'
                 '\n'
                 '   key haiko kwenye d\n'
                 '\n'
                 '      Equivalent to "sio key kwenye d".\n'
                 '\n'
                 '   iter(d)\n'
                 '\n'
                 '      Return an iterator over the keys of the dictionary.  '
                 'This ni a\n'
                 '      shortcut kila "iter(d.keys())".\n'
                 '\n'
                 '   clear()\n'
                 '\n'
                 '      Remove all items kutoka the dictionary.\n'
                 '\n'
                 '   copy()\n'
                 '\n'
                 '      Return a shallow copy of the dictionary.\n'
                 '\n'
                 '   classmethod fromkeys(iterable[, value])\n'
                 '\n'
                 '      Create a new dictionary ukijumuisha keys kutoka *iterable* na '
                 'values set\n'
                 '      to *value*.\n'
                 '\n'
                 '      "fromkeys()" ni a kundi method that returns a new '
                 'dictionary.\n'
                 '      *value* defaults to "Tupu".  All of the values refer '
                 'to just a\n'
                 '      single instance, so it generally doesn’t make sense '
                 'kila *value*\n'
                 '      to be a mutable object such kama an empty list.  To get '
                 'distinct\n'
                 '      values, use a dict comprehension instead.\n'
                 '\n'
                 '   get(key[, default])\n'
                 '\n'
                 '      Return the value kila *key* ikiwa *key* ni kwenye the '
                 'dictionary, else\n'
                 '      *default*. If *default* ni sio given, it defaults to '
                 '"Tupu", so\n'
                 '      that this method never raises a "KeyError".\n'
                 '\n'
                 '   items()\n'
                 '\n'
                 '      Return a new view of the dictionary’s items ("(key, '
                 'value)"\n'
                 '      pairs). See the documentation of view objects.\n'
                 '\n'
                 '   keys()\n'
                 '\n'
                 '      Return a new view of the dictionary’s keys.  See the\n'
                 '      documentation of view objects.\n'
                 '\n'
                 '   pop(key[, default])\n'
                 '\n'
                 '      If *key* ni kwenye the dictionary, remove it na rudisha '
                 'its value,\n'
                 '      isipokua rudisha *default*.  If *default* ni sio given na '
                 '*key* is\n'
                 '      haiko kwenye the dictionary, a "KeyError" ni raised.\n'
                 '\n'
                 '   popitem()\n'
                 '\n'
                 '      Remove na rudisha a "(key, value)" pair kutoka the '
                 'dictionary.\n'
                 '      Pairs are returned kwenye LIFO (last-in, first-out) '
                 'order.\n'
                 '\n'
                 '      "popitem()" ni useful to destructively iterate over a\n'
                 '      dictionary, kama often used kwenye set algorithms.  If the '
                 'dictionary\n'
                 '      ni empty, calling "popitem()" raises a "KeyError".\n'
                 '\n'
                 '      Changed kwenye version 3.7: LIFO order ni now guaranteed. '
                 'In prior\n'
                 '      versions, "popitem()" would rudisha an arbitrary '
                 'key/value pair.\n'
                 '\n'
                 '   reversed(d)\n'
                 '\n'
                 '      Return a reverse iterator over the keys of the '
                 'dictionary. This\n'
                 '      ni a shortcut kila "reversed(d.keys())".\n'
                 '\n'
                 '   setdefault(key[, default])\n'
                 '\n'
                 '      If *key* ni kwenye the dictionary, rudisha its value.  If '
                 'not, insert\n'
                 '      *key* ukijumuisha a value of *default* na rudisha *default*.  '
                 '*default*\n'
                 '      defaults to "Tupu".\n'
                 '\n'
                 '   update([other])\n'
                 '\n'
                 '      Update the dictionary ukijumuisha the key/value pairs kutoka '
                 '*other*,\n'
                 '      overwriting existing keys.  Return "Tupu".\n'
                 '\n'
                 '      "update()" accepts either another dictionary object ama '
                 'an\n'
                 '      iterable of key/value pairs (as tuples ama other '
                 'iterables of\n'
                 '      length two).  If keyword arguments are specified, the '
                 'dictionary\n'
                 '      ni then updated ukijumuisha those key/value pairs: '
                 '"d.update(red=1,\n'
                 '      blue=2)".\n'
                 '\n'
                 '   values()\n'
                 '\n'
                 '      Return a new view of the dictionary’s values.  See '
                 'the\n'
                 '      documentation of view objects.\n'
                 '\n'
                 '      An equality comparison between one "dict.values()" '
                 'view and\n'
                 '      another will always rudisha "Uongo". This also applies '
                 'when\n'
                 '      comparing "dict.values()" to itself:\n'
                 '\n'
                 "         >>> d = {'a': 1}\n"
                 '         >>> d.values() == d.values()\n'
                 '         Uongo\n'
                 '\n'
                 '   Dictionaries compare equal ikiwa na only ikiwa they have the '
                 'same "(key,\n'
                 '   value)" pairs (regardless of ordering). Order comparisons '
                 '(‘<’,\n'
                 '   ‘<=’, ‘>=’, ‘>’) ashiria "TypeError".\n'
                 '\n'
                 '   Dictionaries preserve insertion order.  Note that '
                 'updating a key\n'
                 '   does sio affect the order.  Keys added after deletion are '
                 'inserted\n'
                 '   at the end.\n'
                 '\n'
                 '      >>> d = {"one": 1, "two": 2, "three": 3, "four": 4}\n'
                 '      >>> d\n'
                 "      {'one': 1, 'two': 2, 'three': 3, 'four': 4}\n"
                 '      >>> list(d)\n'
                 "      ['one', 'two', 'three', 'four']\n"
                 '      >>> list(d.values())\n'
                 '      [1, 2, 3, 4]\n'
                 '      >>> d["one"] = 42\n'
                 '      >>> d\n'
                 "      {'one': 42, 'two': 2, 'three': 3, 'four': 4}\n"
                 '      >>> toa d["two"]\n'
                 '      >>> d["two"] = Tupu\n'
                 '      >>> d\n'
                 "      {'one': 42, 'three': 3, 'four': 4, 'two': Tupu}\n"
                 '\n'
                 '   Changed kwenye version 3.7: Dictionary order ni guaranteed to '
                 'be\n'
                 '   insertion order.  This behavior was an implementation '
                 'detail of\n'
                 '   CPython kutoka 3.6.\n'
                 '\n'
                 '   Dictionaries na dictionary views are reversible.\n'
                 '\n'
                 '      >>> d = {"one": 1, "two": 2, "three": 3, "four": 4}\n'
                 '      >>> d\n'
                 "      {'one': 1, 'two': 2, 'three': 3, 'four': 4}\n"
                 '      >>> list(reversed(d))\n'
                 "      ['four', 'three', 'two', 'one']\n"
                 '      >>> list(reversed(d.values()))\n'
                 '      [4, 3, 2, 1]\n'
                 '      >>> list(reversed(d.items()))\n'
                 "      [('four', 4), ('three', 3), ('two', 2), ('one', 1)]\n"
                 '\n'
                 '   Changed kwenye version 3.8: Dictionaries are now reversible.\n'
                 '\n'
                 'See also: "types.MappingProxyType" can be used to create a '
                 'read-only\n'
                 '  view of a "dict".\n'
                 '\n'
                 '\n'
                 'Dictionary view objects\n'
                 '=======================\n'
                 '\n'
                 'The objects returned by "dict.keys()", "dict.values()" and\n'
                 '"dict.items()" are *view objects*.  They provide a dynamic '
                 'view on the\n'
                 'dictionary’s entries, which means that when the dictionary '
                 'changes,\n'
                 'the view reflects these changes.\n'
                 '\n'
                 'Dictionary views can be iterated over to tuma their '
                 'respective data,\n'
                 'and support membership tests:\n'
                 '\n'
                 'len(dictview)\n'
                 '\n'
                 '   Return the number of entries kwenye the dictionary.\n'
                 '\n'
                 'iter(dictview)\n'
                 '\n'
                 '   Return an iterator over the keys, values ama items '
                 '(represented as\n'
                 '   tuples of "(key, value)") kwenye the dictionary.\n'
                 '\n'
                 '   Keys na values are iterated over kwenye insertion order. '
                 'This allows\n'
                 '   the creation of "(value, key)" pairs using "zip()": '
                 '"pairs =\n'
                 '   zip(d.values(), d.keys())".  Another way to create the '
                 'same list is\n'
                 '   "pairs = [(v, k) kila (k, v) kwenye d.items()]".\n'
                 '\n'
                 '   Iterating views wakati adding ama deleting entries kwenye the '
                 'dictionary\n'
                 '   may ashiria a "RuntimeError" ama fail to iterate over all '
                 'entries.\n'
                 '\n'
                 '   Changed kwenye version 3.7: Dictionary order ni guaranteed to '
                 'be\n'
                 '   insertion order.\n'
                 '\n'
                 'x kwenye dictview\n'
                 '\n'
                 '   Return "Kweli" ikiwa *x* ni kwenye the underlying dictionary’s '
                 'keys, values\n'
                 '   ama items (in the latter case, *x* should be a "(key, '
                 'value)"\n'
                 '   tuple).\n'
                 '\n'
                 'reversed(dictview)\n'
                 '\n'
                 '   Return a reverse iterator over the keys, values ama items '
                 'of the\n'
                 '   dictionary. The view will be iterated kwenye reverse order of '
                 'the\n'
                 '   insertion.\n'
                 '\n'
                 '   Changed kwenye version 3.8: Dictionary views are now '
                 'reversible.\n'
                 '\n'
                 'Keys views are set-like since their entries are unique na '
                 'hashable.\n'
                 'If all values are hashable, so that "(key, value)" pairs are '
                 'unique\n'
                 'and hashable, then the items view ni also set-like.  (Values '
                 'views are\n'
                 'sio treated kama set-like since the entries are generally sio '
                 'unique.)\n'
                 'For set-like views, all of the operations defined kila the '
                 'abstract\n'
                 'base kundi "collections.abc.Set" are available (kila example, '
                 '"==",\n'
                 '"<", ama "^").\n'
                 '\n'
                 'An example of dictionary view usage:\n'
                 '\n'
                 "   >>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, "
                 "'spam': 500}\n"
                 '   >>> keys = dishes.keys()\n'
                 '   >>> values = dishes.values()\n'
                 '\n'
                 '   >>> # iteration\n'
                 '   >>> n = 0\n'
                 '   >>> kila val kwenye values:\n'
                 '   ...     n += val\n'
                 '   >>> andika(n)\n'
                 '   504\n'
                 '\n'
                 '   >>> # keys na values are iterated over kwenye the same order '
                 '(insertion order)\n'
                 '   >>> list(keys)\n'
                 "   ['eggs', 'sausage', 'bacon', 'spam']\n"
                 '   >>> list(values)\n'
                 '   [2, 1, 1, 500]\n'
                 '\n'
                 '   >>> # view objects are dynamic na reflect dict changes\n'
                 "   >>> toa dishes['eggs']\n"
                 "   >>> toa dishes['sausage']\n"
                 '   >>> list(keys)\n'
                 "   ['bacon', 'spam']\n"
                 '\n'
                 '   >>> # set operations\n'
                 "   >>> keys & {'eggs', 'bacon', 'salad'}\n"
                 "   {'bacon'}\n"
                 "   >>> keys ^ {'sausage', 'juice'}\n"
                 "   {'juice', 'sausage', 'bacon', 'spam'}\n",
 'typesmethods': 'Methods\n'
                 '*******\n'
                 '\n'
                 'Methods are functions that are called using the attribute '
                 'notation.\n'
                 'There are two flavors: built-in methods (such kama "append()" '
                 'on lists)\n'
                 'and kundi instance methods.  Built-in methods are described '
                 'ukijumuisha the\n'
                 'types that support them.\n'
                 '\n'
                 'If you access a method (a function defined kwenye a kundi '
                 'namespace)\n'
                 'through an instance, you get a special object: a *bound '
                 'method* (also\n'
                 'called *instance method*) object. When called, it will add '
                 'the "self"\n'
                 'argument to the argument list.  Bound methods have two '
                 'special read-\n'
                 'only attributes: "m.__self__" ni the object on which the '
                 'method\n'
                 'operates, na "m.__func__" ni the function implementing the '
                 'method.\n'
                 'Calling "m(arg-1, arg-2, ..., arg-n)" ni completely '
                 'equivalent to\n'
                 'calling "m.__func__(m.__self__, arg-1, arg-2, ..., arg-n)".\n'
                 '\n'
                 'Like function objects, bound method objects support getting '
                 'arbitrary\n'
                 'attributes.  However, since method attributes are actually '
                 'stored on\n'
                 'the underlying function object ("meth.__func__"), setting '
                 'method\n'
                 'attributes on bound methods ni disallowed.  Attempting to '
                 'set an\n'
                 'attribute on a method results kwenye an "AttributeError" being '
                 'raised.  In\n'
                 'order to set a method attribute, you need to explicitly set '
                 'it on the\n'
                 'underlying function object:\n'
                 '\n'
                 '   >>> kundi C:\n'
                 '   ...     eleza method(self):\n'
                 '   ...         pita\n'
                 '   ...\n'
                 '   >>> c = C()\n'
                 "   >>> c.method.whoami = 'my name ni method'  # can't set on "
                 'the method\n'
                 '   Traceback (most recent call last):\n'
                 '     File "<stdin>", line 1, kwenye <module>\n'
                 "   AttributeError: 'method' object has no attribute "
                 "'whoami'\n"
                 "   >>> c.method.__func__.whoami = 'my name ni method'\n"
                 '   >>> c.method.whoami\n'
                 "   'my name ni method'\n"
                 '\n'
                 'See The standard type hierarchy kila more information.\n',
 'typesmodules': 'Modules\n'
                 '*******\n'
                 '\n'
                 'The only special operation on a module ni attribute access: '
                 '"m.name",\n'
                 'where *m* ni a module na *name* accesses a name defined kwenye '
                 '*m*’s\n'
                 'symbol table. Module attributes can be assigned to.  (Note '
                 'that the\n'
                 '"import" statement ni not, strictly speaking, an operation '
                 'on a module\n'
                 'object; "agiza foo" does sio require a module object named '
                 '*foo* to\n'
                 'exist, rather it requires an (external) *definition* kila a '
                 'module\n'
                 'named *foo* somewhere.)\n'
                 '\n'
                 'A special attribute of every module ni "__dict__". This ni '
                 'the\n'
                 'dictionary containing the module’s symbol table. Modifying '
                 'this\n'
                 'dictionary will actually change the module’s symbol table, '
                 'but direct\n'
                 'assignment to the "__dict__" attribute ni sio possible (you '
                 'can write\n'
                 '"m.__dict__[\'a\'] = 1", which defines "m.a" to be "1", but '
                 'you can’t\n'
                 'write "m.__dict__ = {}").  Modifying "__dict__" directly ni '
                 'not\n'
                 'recommended.\n'
                 '\n'
                 'Modules built into the interpreter are written like this: '
                 '"<module\n'
                 '\'sys\' (built-in)>".  If loaded kutoka a file, they are '
                 'written as\n'
                 '"<module \'os\' kutoka '
                 '\'/usr/local/lib/pythonX.Y/os.pyc\'>".\n',
 'typesseq': 'Sequence Types — "list", "tuple", "range"\n'
             '*****************************************\n'
             '\n'
             'There are three basic sequence types: lists, tuples, na range\n'
             'objects. Additional sequence types tailored kila processing of '
             'binary\n'
             'data na text strings are described kwenye dedicated sections.\n'
             '\n'
             '\n'
             'Common Sequence Operations\n'
             '==========================\n'
             '\n'
             'The operations kwenye the following table are supported by most '
             'sequence\n'
             'types, both mutable na immutable. The '
             '"collections.abc.Sequence" ABC\n'
             'is provided to make it easier to correctly implement these '
             'operations\n'
             'on custom sequence types.\n'
             '\n'
             'This table lists the sequence operations sorted kwenye ascending '
             'priority.\n'
             'In the table, *s* na *t* are sequences of the same type, *n*, '
             '*i*,\n'
             '*j* na *k* are integers na *x* ni an arbitrary object that '
             'meets any\n'
             'type na value restrictions imposed by *s*.\n'
             '\n'
             'The "in" na "sio in" operations have the same priorities kama '
             'the\n'
             'comparison operations. The "+" (concatenation) na "*" '
             '(repetition)\n'
             'operations have the same priority kama the corresponding numeric\n'
             'operations. [3]\n'
             '\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| Operation                  | Result                           '
             '| Notes      |\n'
             '|============================|==================================|============|\n'
             '| "x kwenye s"                   | "Kweli" ikiwa an item of *s* ni      '
             '| (1)        |\n'
             '|                            | equal to *x*, isipokua "Uongo"       '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "x haiko kwenye s"               | "Uongo" ikiwa an item of *s* ni     '
             '| (1)        |\n'
             '|                            | equal to *x*, isipokua "Kweli"        '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s + t"                    | the concatenation of *s* na *t* '
             '| (6)(7)     |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s * n" ama "n * s"         | equivalent to adding *s* to      '
             '| (2)(7)     |\n'
             '|                            | itself *n* times                 '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s[i]"                     | *i*th item of *s*, origin 0      '
             '| (3)        |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s[i:j]"                   | slice of *s* kutoka *i* to *j*     '
             '| (3)(4)     |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s[i:j:k]"                 | slice of *s* kutoka *i* to *j*     '
             '| (3)(5)     |\n'
             '|                            | ukijumuisha step *k*                    '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "len(s)"                   | length of *s*                    '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "min(s)"                   | smallest item of *s*             '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "max(s)"                   | largest item of *s*              '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s.index(x[, i[, j]])"     | index of the first occurrence of '
             '| (8)        |\n'
             '|                            | *x* kwenye *s* (at ama after index    '
             '|            |\n'
             '|                            | *i* na before index *j*)        '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s.count(x)"               | total number of occurrences of   '
             '|            |\n'
             '|                            | *x* kwenye *s*                       '
             '|            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '\n'
             'Sequences of the same type also support comparisons.  In '
             'particular,\n'
             'tuples na lists are compared lexicographically by comparing\n'
             'corresponding elements. This means that to compare equal, every\n'
             'element must compare equal na the two sequences must be of the '
             'same\n'
             'type na have the same length.  (For full details see '
             'Comparisons in\n'
             'the language reference.)\n'
             '\n'
             'Notes:\n'
             '\n'
             '1. While the "in" na "sio in" operations are used only kila '
             'simple\n'
             '   containment testing kwenye the general case, some specialised '
             'sequences\n'
             '   (such kama "str", "bytes" na "bytearray") also use them for\n'
             '   subsequence testing:\n'
             '\n'
             '      >>> "gg" kwenye "eggs"\n'
             '      Kweli\n'
             '\n'
             '2. Values of *n* less than "0" are treated kama "0" (which tumas '
             'an\n'
             '   empty sequence of the same type kama *s*).  Note that items kwenye '
             'the\n'
             '   sequence *s* are sio copied; they are referenced multiple '
             'times.\n'
             '   This often haunts new Python programmers; consider:\n'
             '\n'
             '      >>> lists = [[]] * 3\n'
             '      >>> lists\n'
             '      [[], [], []]\n'
             '      >>> lists[0].append(3)\n'
             '      >>> lists\n'
             '      [[3], [3], [3]]\n'
             '\n'
             '   What has happened ni that "[[]]" ni a one-element list '
             'containing\n'
             '   an empty list, so all three elements of "[[]] * 3" are '
             'references\n'
             '   to this single empty list.  Modifying any of the elements of\n'
             '   "lists" modifies this single list. You can create a list of\n'
             '   different lists this way:\n'
             '\n'
             '      >>> lists = [[] kila i kwenye range(3)]\n'
             '      >>> lists[0].append(3)\n'
             '      >>> lists[1].append(5)\n'
             '      >>> lists[2].append(7)\n'
             '      >>> lists\n'
             '      [[3], [5], [7]]\n'
             '\n'
             '   Further explanation ni available kwenye the FAQ entry How do I '
             'create a\n'
             '   multidimensional list?.\n'
             '\n'
             '3. If *i* ama *j* ni negative, the index ni relative to the end '
             'of\n'
             '   sequence *s*: "len(s) + i" ama "len(s) + j" ni substituted.  '
             'But\n'
             '   note that "-0" ni still "0".\n'
             '\n'
             '4. The slice of *s* kutoka *i* to *j* ni defined kama the sequence '
             'of\n'
             '   items ukijumuisha index *k* such that "i <= k < j".  If *i* ama *j* '
             'is\n'
             '   greater than "len(s)", use "len(s)".  If *i* ni omitted ama '
             '"Tupu",\n'
             '   use "0".  If *j* ni omitted ama "Tupu", use "len(s)".  If *i* '
             'is\n'
             '   greater than ama equal to *j*, the slice ni empty.\n'
             '\n'
             '5. The slice of *s* kutoka *i* to *j* ukijumuisha step *k* ni defined kama '
             'the\n'
             '   sequence of items ukijumuisha index  "x = i + n*k" such that "0 <= n '
             '<\n'
             '   (j-i)/k".  In other words, the indices are "i", "i+k", '
             '"i+2*k",\n'
             '   "i+3*k" na so on, stopping when *j* ni reached (but never\n'
             '   including *j*).  When *k* ni positive, *i* na *j* are '
             'reduced to\n'
             '   "len(s)" ikiwa they are greater. When *k* ni negative, *i* na '
             '*j* are\n'
             '   reduced to "len(s) - 1" ikiwa they are greater.  If *i* ama *j* '
             'are\n'
             '   omitted ama "Tupu", they become “end” values (which end '
             'depends on\n'
             '   the sign of *k*).  Note, *k* cansio be zero. If *k* ni '
             '"Tupu", it\n'
             '   ni treated like "1".\n'
             '\n'
             '6. Concatenating immutable sequences always results kwenye a new\n'
             '   object. This means that building up a sequence by repeated\n'
             '   concatenation will have a quadratic runtime cost kwenye the '
             'total\n'
             '   sequence length. To get a linear runtime cost, you must '
             'switch to\n'
             '   one of the alternatives below:\n'
             '\n'
             '   * ikiwa concatenating "str" objects, you can build a list na '
             'use\n'
             '     "str.join()" at the end ama isipokua write to an "io.StringIO"\n'
             '     instance na retrieve its value when complete\n'
             '\n'
             '   * ikiwa concatenating "bytes" objects, you can similarly use\n'
             '     "bytes.join()" ama "io.BytesIO", ama you can do in-place\n'
             '     concatenation ukijumuisha a "bytearray" object.  "bytearray" '
             'objects are\n'
             '     mutable na have an efficient overallocation mechanism\n'
             '\n'
             '   * ikiwa concatenating "tuple" objects, extend a "list" instead\n'
             '\n'
             '   * kila other types, investigate the relevant kundi '
             'documentation\n'
             '\n'
             '7. Some sequence types (such kama "range") only support item\n'
             '   sequences that follow specific patterns, na hence don’t '
             'support\n'
             '   sequence concatenation ama repetition.\n'
             '\n'
             '8. "index" raises "ValueError" when *x* ni sio found kwenye *s*. '
             'Not\n'
             '   all implementations support pitaing the additional arguments '
             '*i*\n'
             '   na *j*. These arguments allow efficient searching of '
             'subsections\n'
             '   of the sequence. Passing the extra arguments ni roughly '
             'equivalent\n'
             '   to using "s[i:j].index(x)", only without copying any data na '
             'with\n'
             '   the returned index being relative to the start of the '
             'sequence\n'
             '   rather than the start of the slice.\n'
             '\n'
             '\n'
             'Immutable Sequence Types\n'
             '========================\n'
             '\n'
             'The only operation that immutable sequence types generally '
             'implement\n'
             'that ni sio also implemented by mutable sequence types ni '
             'support for\n'
             'the "hash()" built-in.\n'
             '\n'
             'This support allows immutable sequences, such kama "tuple" '
             'instances, to\n'
             'be used kama "dict" keys na stored kwenye "set" na "frozenset" '
             'instances.\n'
             '\n'
             'Attempting to hash an immutable sequence that contains '
             'unhashable\n'
             'values will result kwenye "TypeError".\n'
             '\n'
             '\n'
             'Mutable Sequence Types\n'
             '======================\n'
             '\n'
             'The operations kwenye the following table are defined on mutable '
             'sequence\n'
             'types. The "collections.abc.MutableSequence" ABC ni provided to '
             'make\n'
             'it easier to correctly implement these operations on custom '
             'sequence\n'
             'types.\n'
             '\n'
             'In the table *s* ni an instance of a mutable sequence type, *t* '
             'is any\n'
             'iterable object na *x* ni an arbitrary object that meets any '
             'type and\n'
             'value restrictions imposed by *s* (kila example, "bytearray" '
             'only\n'
             'accepts integers that meet the value restriction "0 <= x <= '
             '255").\n'
             '\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| Operation                      | '
             'Result                           | Notes                 |\n'
             '|================================|==================================|=======================|\n'
             '| "s[i] = x"                     | item *i* of *s* ni replaced '
             'by   |                       |\n'
             '|                                | '
             '*x*                              |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s[i:j] = t"                   | slice of *s* kutoka *i* to *j* '
             'is  |                       |\n'
             '|                                | replaced by the contents of '
             'the  |                       |\n'
             '|                                | iterable '
             '*t*                     |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "toa s[i:j]"                   | same kama "s[i:j] = '
             '[]"            |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s[i:j:k] = t"                 | the elements of "s[i:j:k]" '
             'are   | (1)                   |\n'
             '|                                | replaced by those of '
             '*t*         |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "toa s[i:j:k]"                 | removes the elements '
             'of          |                       |\n'
             '|                                | "s[i:j:k]" kutoka the '
             'list         |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.append(x)"                  | appends *x* to the end of '
             'the    |                       |\n'
             '|                                | sequence (same '
             'as                |                       |\n'
             '|                                | "s[len(s):len(s)] = '
             '[x]")        |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.clear()"                    | removes all items kutoka *s* '
             '(same | (5)                   |\n'
             '|                                | kama "toa '
             's[:]")                   |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.copy()"                     | creates a shallow copy of '
             '*s*    | (5)                   |\n'
             '|                                | (same kama '
             '"s[:]")                 |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.extend(t)" ama "s += t"      | extends *s* ukijumuisha the contents '
             'of |                       |\n'
             '|                                | *t* (kila the most part the '
             'same  |                       |\n'
             '|                                | kama "s[len(s):len(s)] = '
             't")       |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s *= n"                       | updates *s* ukijumuisha its '
             'contents    | (6)                   |\n'
             '|                                | repeated *n* '
             'times               |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.insert(i, x)"               | inserts *x* into *s* at '
             'the      |                       |\n'
             '|                                | index given by *i* (same '
             'as      |                       |\n'
             '|                                | "s[i:i] = '
             '[x]")                  |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.pop([i])"                   | retrieves the item at *i* '
             'and    | (2)                   |\n'
             '|                                | also removes it kutoka '
             '*s*         |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.remove(x)"                  | remove the first item kutoka '
             '*s*   | (3)                   |\n'
             '|                                | where "s[i]" ni equal to '
             '*x*     |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.reverse()"                  | reverses the items of *s* '
             'in     | (4)                   |\n'
             '|                                | '
             'place                            |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '\n'
             'Notes:\n'
             '\n'
             '1. *t* must have the same length kama the slice it ni replacing.\n'
             '\n'
             '2. The optional argument *i* defaults to "-1", so that by '
             'default\n'
             '   the last item ni removed na returned.\n'
             '\n'
             '3. "remove()" raises "ValueError" when *x* ni sio found kwenye *s*.\n'
             '\n'
             '4. The "reverse()" method modifies the sequence kwenye place for\n'
             '   economy of space when reversing a large sequence.  To remind '
             'users\n'
             '   that it operates by side effect, it does sio rudisha the '
             'reversed\n'
             '   sequence.\n'
             '\n'
             '5. "clear()" na "copy()" are included kila consistency ukijumuisha the\n'
             '   interfaces of mutable containers that don’t support slicing\n'
             '   operations (such kama "dict" na "set"). "copy()" ni sio part '
             'of the\n'
             '   "collections.abc.MutableSequence" ABC, but most concrete '
             'mutable\n'
             '   sequence classes provide it.\n'
             '\n'
             '   New kwenye version 3.3: "clear()" na "copy()" methods.\n'
             '\n'
             '6. The value *n* ni an integer, ama an object implementing\n'
             '   "__index__()".  Zero na negative values of *n* clear the '
             'sequence.\n'
             '   Items kwenye the sequence are sio copied; they are referenced '
             'multiple\n'
             '   times, kama explained kila "s * n" under Common Sequence '
             'Operations.\n'
             '\n'
             '\n'
             'Lists\n'
             '=====\n'
             '\n'
             'Lists are mutable sequences, typically used to store collections '
             'of\n'
             'homogeneous items (where the precise degree of similarity will '
             'vary by\n'
             'application).\n'
             '\n'
             'kundi list([iterable])\n'
             '\n'
             '   Lists may be constructed kwenye several ways:\n'
             '\n'
             '   * Using a pair of square brackets to denote the empty list: '
             '"[]"\n'
             '\n'
             '   * Using square brackets, separating items ukijumuisha commas: '
             '"[a]",\n'
             '     "[a, b, c]"\n'
             '\n'
             '   * Using a list comprehension: "[x kila x kwenye iterable]"\n'
             '\n'
             '   * Using the type constructor: "list()" ama "list(iterable)"\n'
             '\n'
             '   The constructor builds a list whose items are the same na kwenye '
             'the\n'
             '   same order kama *iterable*’s items.  *iterable* may be either '
             'a\n'
             '   sequence, a container that supports iteration, ama an '
             'iterator\n'
             '   object.  If *iterable* ni already a list, a copy ni made and\n'
             '   returned, similar to "iterable[:]". For example, '
             '"list(\'abc\')"\n'
             '   returns "[\'a\', \'b\', \'c\']" na "list( (1, 2, 3) )" '
             'returns "[1, 2,\n'
             '   3]". If no argument ni given, the constructor creates a new '
             'empty\n'
             '   list, "[]".\n'
             '\n'
             '   Many other operations also produce lists, including the '
             '"sorted()"\n'
             '   built-in.\n'
             '\n'
             '   Lists implement all of the common na mutable sequence '
             'operations.\n'
             '   Lists also provide the following additional method:\n'
             '\n'
             '   sort(*, key=Tupu, reverse=Uongo)\n'
             '\n'
             '      This method sorts the list kwenye place, using only "<" '
             'comparisons\n'
             '      between items. Exceptions are sio suppressed - ikiwa any '
             'comparison\n'
             '      operations fail, the entire sort operation will fail (and '
             'the\n'
             '      list will likely be left kwenye a partially modified state).\n'
             '\n'
             '      "sort()" accepts two arguments that can only be pitaed by\n'
             '      keyword (keyword-only arguments):\n'
             '\n'
             '      *key* specifies a function of one argument that ni used '
             'to\n'
             '      extract a comparison key kutoka each list element (kila '
             'example,\n'
             '      "key=str.lower"). The key corresponding to each item kwenye '
             'the list\n'
             '      ni calculated once na then used kila the entire sorting '
             'process.\n'
             '      The default value of "Tupu" means that list items are '
             'sorted\n'
             '      directly without calculating a separate key value.\n'
             '\n'
             '      The "functools.cmp_to_key()" utility ni available to '
             'convert a\n'
             '      2.x style *cmp* function to a *key* function.\n'
             '\n'
             '      *reverse* ni a boolean value.  If set to "Kweli", then the '
             'list\n'
             '      elements are sorted kama ikiwa each comparison were reversed.\n'
             '\n'
             '      This method modifies the sequence kwenye place kila economy of '
             'space\n'
             '      when sorting a large sequence.  To remind users that it '
             'operates\n'
             '      by side effect, it does sio rudisha the sorted sequence '
             '(use\n'
             '      "sorted()" to explicitly request a new sorted list '
             'instance).\n'
             '\n'
             '      The "sort()" method ni guaranteed to be stable.  A sort '
             'is\n'
             '      stable ikiwa it guarantees sio to change the relative order '
             'of\n'
             '      elements that compare equal — this ni helpful kila sorting '
             'in\n'
             '      multiple pitaes (kila example, sort by department, then by '
             'salary\n'
             '      grade).\n'
             '\n'
             '      For sorting examples na a brief sorting tutorial, see '
             'Sorting\n'
             '      HOW TO.\n'
             '\n'
             '      **CPython implementation detail:** While a list ni being '
             'sorted,\n'
             '      the effect of attempting to mutate, ama even inspect, the '
             'list is\n'
             '      undefined.  The C implementation of Python makes the list '
             'appear\n'
             '      empty kila the duration, na raises "ValueError" ikiwa it can '
             'detect\n'
             '      that the list has been mutated during a sort.\n'
             '\n'
             '\n'
             'Tuples\n'
             '======\n'
             '\n'
             'Tuples are immutable sequences, typically used to store '
             'collections of\n'
             'heterogeneous data (such kama the 2-tuples produced by the '
             '"enumerate()"\n'
             'built-in). Tuples are also used kila cases where an immutable '
             'sequence\n'
             'of homogeneous data ni needed (such kama allowing storage kwenye a '
             '"set" or\n'
             '"dict" instance).\n'
             '\n'
             'kundi tuple([iterable])\n'
             '\n'
             '   Tuples may be constructed kwenye a number of ways:\n'
             '\n'
             '   * Using a pair of parentheses to denote the empty tuple: '
             '"()"\n'
             '\n'
             '   * Using a trailing comma kila a singleton tuple: "a," ama '
             '"(a,)"\n'
             '\n'
             '   * Separating items ukijumuisha commas: "a, b, c" ama "(a, b, c)"\n'
             '\n'
             '   * Using the "tuple()" built-in: "tuple()" ama '
             '"tuple(iterable)"\n'
             '\n'
             '   The constructor builds a tuple whose items are the same na '
             'in the\n'
             '   same order kama *iterable*’s items.  *iterable* may be either '
             'a\n'
             '   sequence, a container that supports iteration, ama an '
             'iterator\n'
             '   object.  If *iterable* ni already a tuple, it ni returned\n'
             '   unchanged. For example, "tuple(\'abc\')" returns "(\'a\', '
             '\'b\', \'c\')"\n'
             '   na "tuple( [1, 2, 3] )" returns "(1, 2, 3)". If no argument '
             'is\n'
             '   given, the constructor creates a new empty tuple, "()".\n'
             '\n'
             '   Note that it ni actually the comma which makes a tuple, sio '
             'the\n'
             '   parentheses. The parentheses are optional, tatizo kwenye the '
             'empty\n'
             '   tuple case, ama when they are needed to avoid syntactic '
             'ambiguity.\n'
             '   For example, "f(a, b, c)" ni a function call ukijumuisha three '
             'arguments,\n'
             '   wakati "f((a, b, c))" ni a function call ukijumuisha a 3-tuple kama the '
             'sole\n'
             '   argument.\n'
             '\n'
             '   Tuples implement all of the common sequence operations.\n'
             '\n'
             'For heterogeneous collections of data where access by name ni '
             'clearer\n'
             'than access by index, "collections.namedtuple()" may be a more\n'
             'appropriate choice than a simple tuple object.\n'
             '\n'
             '\n'
             'Ranges\n'
             '======\n'
             '\n'
             'The "range" type represents an immutable sequence of numbers na '
             'is\n'
             'commonly used kila looping a specific number of times kwenye "for" '
             'loops.\n'
             '\n'
             'kundi range(stop)\n'
             'kundi range(start, stop[, step])\n'
             '\n'
             '   The arguments to the range constructor must be integers '
             '(either\n'
             '   built-in "int" ama any object that implements the "__index__"\n'
             '   special method).  If the *step* argument ni omitted, it '
             'defaults to\n'
             '   "1". If the *start* argument ni omitted, it defaults to "0". '
             'If\n'
             '   *step* ni zero, "ValueError" ni raised.\n'
             '\n'
             '   For a positive *step*, the contents of a range "r" are '
             'determined\n'
             '   by the formula "r[i] = start + step*i" where "i >= 0" na '
             '"r[i] <\n'
             '   stop".\n'
             '\n'
             '   For a negative *step*, the contents of the range are still\n'
             '   determined by the formula "r[i] = start + step*i", but the\n'
             '   constraints are "i >= 0" na "r[i] > stop".\n'
             '\n'
             '   A range object will be empty ikiwa "r[0]" does sio meet the '
             'value\n'
             '   constraint. Ranges do support negative indices, but these '
             'are\n'
             '   interpreted kama indexing kutoka the end of the sequence '
             'determined by\n'
             '   the positive indices.\n'
             '\n'
             '   Ranges containing absolute values larger than "sys.maxsize" '
             'are\n'
             '   permitted but some features (such kama "len()") may raise\n'
             '   "OverflowError".\n'
             '\n'
             '   Range examples:\n'
             '\n'
             '      >>> list(range(10))\n'
             '      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n'
             '      >>> list(range(1, 11))\n'
             '      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n'
             '      >>> list(range(0, 30, 5))\n'
             '      [0, 5, 10, 15, 20, 25]\n'
             '      >>> list(range(0, 10, 3))\n'
             '      [0, 3, 6, 9]\n'
             '      >>> list(range(0, -10, -1))\n'
             '      [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n'
             '      >>> list(range(0))\n'
             '      []\n'
             '      >>> list(range(1, 0))\n'
             '      []\n'
             '\n'
             '   Ranges implement all of the common sequence operations '
             'except\n'
             '   concatenation na repetition (due to the fact that range '
             'objects\n'
             '   can only represent sequences that follow a strict pattern '
             'and\n'
             '   repetition na concatenation will usually violate that '
             'pattern).\n'
             '\n'
             '   start\n'
             '\n'
             '      The value of the *start* parameter (or "0" ikiwa the '
             'parameter was\n'
             '      sio supplied)\n'
             '\n'
             '   stop\n'
             '\n'
             '      The value of the *stop* parameter\n'
             '\n'
             '   step\n'
             '\n'
             '      The value of the *step* parameter (or "1" ikiwa the parameter '
             'was\n'
             '      sio supplied)\n'
             '\n'
             'The advantage of the "range" type over a regular "list" ama '
             '"tuple" is\n'
             'that a "range" object will always take the same (small) amount '
             'of\n'
             'memory, no matter the size of the range it represents (as it '
             'only\n'
             'stores the "start", "stop" na "step" values, calculating '
             'individual\n'
             'items na subranges kama needed).\n'
             '\n'
             'Range objects implement the "collections.abc.Sequence" ABC, and\n'
             'provide features such kama containment tests, element index '
             'lookup,\n'
             'slicing na support kila negative indices (see Sequence Types — '
             'list,\n'
             'tuple, range):\n'
             '\n'
             '>>> r = range(0, 20, 2)\n'
             '>>> r\n'
             'range(0, 20, 2)\n'
             '>>> 11 kwenye r\n'
             'Uongo\n'
             '>>> 10 kwenye r\n'
             'Kweli\n'
             '>>> r.index(10)\n'
             '5\n'
             '>>> r[5]\n'
             '10\n'
             '>>> r[:5]\n'
             'range(0, 10, 2)\n'
             '>>> r[-1]\n'
             '18\n'
             '\n'
             'Testing range objects kila equality ukijumuisha "==" na "!=" compares '
             'them as\n'
             'sequences.  That is, two range objects are considered equal ikiwa '
             'they\n'
             'represent the same sequence of values.  (Note that two range '
             'objects\n'
             'that compare equal might have different "start", "stop" na '
             '"step"\n'
             'attributes, kila example "range(0) == range(2, 1, 3)" ama '
             '"range(0, 3,\n'
             '2) == range(0, 4, 2)".)\n'
             '\n'
             'Changed kwenye version 3.2: Implement the Sequence ABC. Support '
             'slicing\n'
             'and negative indices. Test "int" objects kila membership kwenye '
             'constant\n'
             'time instead of iterating through all items.\n'
             '\n'
             'Changed kwenye version 3.3: Define ‘==’ na ‘!=’ to compare range '
             'objects\n'
             'based on the sequence of values they define (instead of '
             'comparing\n'
             'based on object identity).\n'
             '\n'
             'New kwenye version 3.3: The "start", "stop" na "step" attributes.\n'
             '\n'
             'See also:\n'
             '\n'
             '  * The linspace recipe shows how to implement a lazy version '
             'of\n'
             '    range suitable kila floating point applications.\n',
 'typesseq-mutable': 'Mutable Sequence Types\n'
                     '**********************\n'
                     '\n'
                     'The operations kwenye the following table are defined on '
                     'mutable sequence\n'
                     'types. The "collections.abc.MutableSequence" ABC ni '
                     'provided to make\n'
                     'it easier to correctly implement these operations on '
                     'custom sequence\n'
                     'types.\n'
                     '\n'
                     'In the table *s* ni an instance of a mutable sequence '
                     'type, *t* ni any\n'
                     'iterable object na *x* ni an arbitrary object that '
                     'meets any type and\n'
                     'value restrictions imposed by *s* (kila example, '
                     '"bytearray" only\n'
                     'accepts integers that meet the value restriction "0 <= x '
                     '<= 255").\n'
                     '\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| Operation                      | '
                     'Result                           | Notes                 '
                     '|\n'
                     '|================================|==================================|=======================|\n'
                     '| "s[i] = x"                     | item *i* of *s* ni '
                     'replaced by   |                       |\n'
                     '|                                | '
                     '*x*                              |                       '
                     '|\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s[i:j] = t"                   | slice of *s* kutoka *i* '
                     'to *j* ni  |                       |\n'
                     '|                                | replaced by the '
                     'contents of the  |                       |\n'
                     '|                                | iterable '
                     '*t*                     |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "toa s[i:j]"                   | same kama "s[i:j] = '
                     '[]"            |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s[i:j:k] = t"                 | the elements of '
                     '"s[i:j:k]" are   | (1)                   |\n'
                     '|                                | replaced by those of '
                     '*t*         |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "toa s[i:j:k]"                 | removes the elements '
                     'of          |                       |\n'
                     '|                                | "s[i:j:k]" kutoka the '
                     'list         |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.append(x)"                  | appends *x* to the '
                     'end of the    |                       |\n'
                     '|                                | sequence (same '
                     'as                |                       |\n'
                     '|                                | "s[len(s):len(s)] = '
                     '[x]")        |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.clear()"                    | removes all items '
                     'kutoka *s* (same | (5)                   |\n'
                     '|                                | kama "toa '
                     's[:]")                   |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.copy()"                     | creates a shallow '
                     'copy of *s*    | (5)                   |\n'
                     '|                                | (same kama '
                     '"s[:]")                 |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.extend(t)" ama "s += t"      | extends *s* ukijumuisha the '
                     'contents of |                       |\n'
                     '|                                | *t* (kila the most '
                     'part the same  |                       |\n'
                     '|                                | kama "s[len(s):len(s)] '
                     '= t")       |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s *= n"                       | updates *s* ukijumuisha its '
                     'contents    | (6)                   |\n'
                     '|                                | repeated *n* '
                     'times               |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.insert(i, x)"               | inserts *x* into *s* '
                     'at the      |                       |\n'
                     '|                                | index given by *i* '
                     '(same kama      |                       |\n'
                     '|                                | "s[i:i] = '
                     '[x]")                  |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.pop([i])"                   | retrieves the item at '
                     '*i* na    | (2)                   |\n'
                     '|                                | also removes it kutoka '
                     '*s*         |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.remove(x)"                  | remove the first item '
                     'kutoka *s*   | (3)                   |\n'
                     '|                                | where "s[i]" ni equal '
                     'to *x*     |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.reverse()"                  | reverses the items of '
                     '*s* kwenye     | (4)                   |\n'
                     '|                                | '
                     'place                            |                       '
                     '|\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '\n'
                     'Notes:\n'
                     '\n'
                     '1. *t* must have the same length kama the slice it ni '
                     'replacing.\n'
                     '\n'
                     '2. The optional argument *i* defaults to "-1", so that '
                     'by default\n'
                     '   the last item ni removed na returned.\n'
                     '\n'
                     '3. "remove()" raises "ValueError" when *x* ni sio found '
                     'in *s*.\n'
                     '\n'
                     '4. The "reverse()" method modifies the sequence kwenye place '
                     'for\n'
                     '   economy of space when reversing a large sequence.  To '
                     'remind users\n'
                     '   that it operates by side effect, it does sio rudisha '
                     'the reversed\n'
                     '   sequence.\n'
                     '\n'
                     '5. "clear()" na "copy()" are included kila consistency '
                     'ukijumuisha the\n'
                     '   interfaces of mutable containers that don’t support '
                     'slicing\n'
                     '   operations (such kama "dict" na "set"). "copy()" ni '
                     'sio part of the\n'
                     '   "collections.abc.MutableSequence" ABC, but most '
                     'concrete mutable\n'
                     '   sequence classes provide it.\n'
                     '\n'
                     '   New kwenye version 3.3: "clear()" na "copy()" methods.\n'
                     '\n'
                     '6. The value *n* ni an integer, ama an object '
                     'implementing\n'
                     '   "__index__()".  Zero na negative values of *n* clear '
                     'the sequence.\n'
                     '   Items kwenye the sequence are sio copied; they are '
                     'referenced multiple\n'
                     '   times, kama explained kila "s * n" under Common Sequence '
                     'Operations.\n',
 'unary': 'Unary arithmetic na bitwise operations\n'
          '***************************************\n'
          '\n'
          'All unary arithmetic na bitwise operations have the same '
          'priority:\n'
          '\n'
          '   u_expr ::= power | "-" u_expr | "+" u_expr | "~" u_expr\n'
          '\n'
          'The unary "-" (minus) operator tumas the negation of its numeric\n'
          'argument.\n'
          '\n'
          'The unary "+" (plus) operator tumas its numeric argument '
          'unchanged.\n'
          '\n'
          'The unary "~" (invert) operator tumas the bitwise inversion of '
          'its\n'
          'integer argument.  The bitwise inversion of "x" ni defined as\n'
          '"-(x+1)".  It only applies to integral numbers.\n'
          '\n'
          'In all three cases, ikiwa the argument does sio have the proper type, '
          'a\n'
          '"TypeError" exception ni raised.\n',
 'while': 'The "while" statement\n'
          '*********************\n'
          '\n'
          'The "while" statement ni used kila repeated execution kama long kama an\n'
          'expression ni true:\n'
          '\n'
          '   while_stmt ::= "while" expression ":" suite\n'
          '                  ["else" ":" suite]\n'
          '\n'
          'This repeatedly tests the expression and, ikiwa it ni true, executes '
          'the\n'
          'first suite; ikiwa the expression ni false (which may be the first '
          'time\n'
          'it ni tested) the suite of the "else" clause, ikiwa present, ni '
          'executed\n'
          'and the loop terminates.\n'
          '\n'
          'A "koma" statement executed kwenye the first suite terminates the '
          'loop\n'
          'without executing the "else" clause’s suite.  A "endelea" '
          'statement\n'
          'executed kwenye the first suite skips the rest of the suite na goes '
          'back\n'
          'to testing the expression.\n',
 'with': 'The "with" statement\n'
         '********************\n'
         '\n'
         'The "with" statement ni used to wrap the execution of a block with\n'
         'methods defined by a context manager (see section With Statement\n'
         'Context Managers). This allows common "try"…"except"…"finally" '
         'usage\n'
         'patterns to be encapsulated kila convenient reuse.\n'
         '\n'
         '   with_stmt ::= "with" with_item ("," with_item)* ":" suite\n'
         '   with_item ::= expression ["as" target]\n'
         '\n'
         'The execution of the "with" statement ukijumuisha one “item” proceeds as\n'
         'follows:\n'
         '\n'
         '1. The context expression (the expression given kwenye the "with_item")\n'
         '   ni evaluated to obtain a context manager.\n'
         '\n'
         '2. The context manager’s "__exit__()" ni loaded kila later use.\n'
         '\n'
         '3. The context manager’s "__enter__()" method ni invoked.\n'
         '\n'
         '4. If a target was included kwenye the "with" statement, the return\n'
         '   value kutoka "__enter__()" ni assigned to it.\n'
         '\n'
         '   Note: The "with" statement guarantees that ikiwa the "__enter__()"\n'
         '     method returns without an error, then "__exit__()" will always '
         'be\n'
         '     called. Thus, ikiwa an error occurs during the assignment to the\n'
         '     target list, it will be treated the same kama an error occurring\n'
         '     within the suite would be. See step 6 below.\n'
         '\n'
         '5. The suite ni executed.\n'
         '\n'
         '6. The context manager’s "__exit__()" method ni invoked.  If an\n'
         '   exception caused the suite to be exited, its type, value, and\n'
         '   traceback are pitaed kama arguments to "__exit__()". Otherwise, '
         'three\n'
         '   "Tupu" arguments are supplied.\n'
         '\n'
         '   If the suite was exited due to an exception, na the rudisha '
         'value\n'
         '   kutoka the "__exit__()" method was false, the exception ni '
         'reraised.\n'
         '   If the rudisha value was true, the exception ni suppressed, and\n'
         '   execution endeleas ukijumuisha the statement following the "with"\n'
         '   statement.\n'
         '\n'
         '   If the suite was exited kila any reason other than an exception, '
         'the\n'
         '   rudisha value kutoka "__exit__()" ni ignored, na execution '
         'proceeds\n'
         '   at the normal location kila the kind of exit that was taken.\n'
         '\n'
         'With more than one item, the context managers are processed kama if\n'
         'multiple "with" statements were nested:\n'
         '\n'
         '   ukijumuisha A() kama a, B() kama b:\n'
         '       suite\n'
         '\n'
         'is equivalent to\n'
         '\n'
         '   ukijumuisha A() kama a:\n'
         '       ukijumuisha B() kama b:\n'
         '           suite\n'
         '\n'
         'Changed kwenye version 3.1: Support kila multiple context expressions.\n'
         '\n'
         'See also:\n'
         '\n'
         '  **PEP 343** - The “with” statement\n'
         '     The specification, background, na examples kila the Python '
         '"with"\n'
         '     statement.\n',
 'tuma': 'The "tuma" statement\n'
          '*********************\n'
          '\n'
          '   tuma_stmt ::= tuma_expression\n'
          '\n'
          'A "tuma" statement ni semantically equivalent to a tuma '
          'expression.\n'
          'The tuma statement can be used to omit the parentheses that would\n'
          'otherwise be required kwenye the equivalent tuma expression '
          'statement.\n'
          'For example, the tuma statements\n'
          '\n'
          '   tuma <expr>\n'
          '   tuma kutoka <expr>\n'
          '\n'
          'are equivalent to the tuma expression statements\n'
          '\n'
          '   (tuma <expr>)\n'
          '   (tuma kutoka <expr>)\n'
          '\n'
          'Yield expressions na statements are only used when defining a\n'
          '*generator* function, na are only used kwenye the body of the '
          'generator\n'
          'function.  Using tuma kwenye a function definition ni sufficient to '
          'cause\n'
          'that definition to create a generator function instead of a normal\n'
          'function.\n'
          '\n'
          'For full details of "tuma" semantics, refer to the Yield '
          'expressions\n'
          'section.\n'}
