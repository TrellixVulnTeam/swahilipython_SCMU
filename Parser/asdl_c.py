#! /usr/bin/env python
"""Generate C code kutoka an ASDL description."""

agiza os, sys

agiza asdl

TABSIZE = 4
MAX_COL = 80

eleza get_c_type(name):
    """Return a string kila the C name of the type.

    This function special cases the default types provided by asdl.
    """
    ikiwa name kwenye asdl.builtin_types:
        rudisha name
    isipokua:
        rudisha "%s_ty" % name

eleza reflow_lines(s, depth):
    """Reflow the line s indented depth tabs.

    Return a sequence of lines where no line extends beyond MAX_COL
    when properly indented.  The first line ni properly indented based
    exclusively on depth * TABSIZE.  All following lines -- these are
    the reflowed lines generated by this function -- start at the same
    column kama the first character beyond the opening { kwenye the first
    line.
    """
    size = MAX_COL - depth * TABSIZE
    ikiwa len(s) < size:
        rudisha [s]

    lines = []
    cur = s
    padding = ""
    wakati len(cur) > size:
        i = cur.rfind(' ', 0, size)
        # XXX this should be fixed kila real
        ikiwa i == -1 na 'GeneratorExp' kwenye cur:
            i = size + 3
        assert i != -1, "Impossible line %d to reflow: %r" % (size, s)
        lines.append(padding + cur[:i])
        ikiwa len(lines) == 1:
            # find new size based on brace
            j = cur.find('{', 0, i)
            ikiwa j >= 0:
                j += 2 # account kila the brace na the space after it
                size -= j
                padding = " " * j
            isipokua:
                j = cur.find('(', 0, i)
                ikiwa j >= 0:
                    j += 1 # account kila the paren (no space after it)
                    size -= j
                    padding = " " * j
        cur = cur[i+1:]
    isipokua:
        lines.append(padding + cur)
    rudisha lines

eleza is_simple(sum):
    """Return Kweli ikiwa a sum ni a simple.

    A sum ni simple ikiwa its types have no fields, e.g.
    unaryop = Invert | Not | UAdd | USub
    """
    kila t kwenye sum.types:
        ikiwa t.fields:
            rudisha Uongo
    rudisha Kweli


kundi EmitVisitor(asdl.VisitorBase):
    """Visit that emits lines"""

    eleza __init__(self, file):
        self.file = file
        self.identifiers = set()
        super(EmitVisitor, self).__init__()

    eleza emit_identifier(self, name):
        name = str(name)
        ikiwa name kwenye self.identifiers:
            rudisha
        self.emit("_Py_IDENTIFIER(%s);" % name, 0)
        self.identifiers.add(name)

    eleza emit(self, s, depth, reflow=Kweli):
        # XXX reflow long lines?
        ikiwa reflow:
            lines = reflow_lines(s, depth)
        isipokua:
            lines = [s]
        kila line kwenye lines:
            ikiwa line:
                line = (" " * TABSIZE * depth) + line
            self.file.write(line + "\n")


kundi TypeDefVisitor(EmitVisitor):
    eleza visitModule(self, mod):
        kila dfn kwenye mod.dfns:
            self.visit(dfn)

    eleza visitType(self, type, depth=0):
        self.visit(type.value, type.name, depth)

    eleza visitSum(self, sum, name, depth):
        ikiwa is_simple(sum):
            self.simple_sum(sum, name, depth)
        isipokua:
            self.sum_with_constructors(sum, name, depth)

    eleza simple_sum(self, sum, name, depth):
        enum = []
        kila i kwenye range(len(sum.types)):
            type = sum.types[i]
            enum.append("%s=%d" % (type.name, i + 1))
        enums = ", ".join(enum)
        ctype = get_c_type(name)
        s = "typeeleza enum _%s { %s } %s;" % (name, enums, ctype)
        self.emit(s, depth)
        self.emit("", depth)

    eleza sum_with_constructors(self, sum, name, depth):
        ctype = get_c_type(name)
        s = "typeeleza struct _%(name)s *%(ctype)s;" % locals()
        self.emit(s, depth)
        self.emit("", depth)

    eleza visitProduct(self, product, name, depth):
        ctype = get_c_type(name)
        s = "typeeleza struct _%(name)s *%(ctype)s;" % locals()
        self.emit(s, depth)
        self.emit("", depth)


kundi StructVisitor(EmitVisitor):
    """Visitor to generate typedefs kila AST."""

    eleza visitModule(self, mod):
        kila dfn kwenye mod.dfns:
            self.visit(dfn)

    eleza visitType(self, type, depth=0):
        self.visit(type.value, type.name, depth)

    eleza visitSum(self, sum, name, depth):
        ikiwa sio is_simple(sum):
            self.sum_with_constructors(sum, name, depth)

    eleza sum_with_constructors(self, sum, name, depth):
        eleza emit(s, depth=depth):
            self.emit(s % sys._getframe(1).f_locals, depth)
        enum = []
        kila i kwenye range(len(sum.types)):
            type = sum.types[i]
            enum.append("%s_kind=%d" % (type.name, i + 1))

        emit("enum _%(name)s_kind {" + ", ".join(enum) + "};")

        emit("struct _%(name)s {")
        emit("enum _%(name)s_kind kind;", depth + 1)
        emit("union {", depth + 1)
        kila t kwenye sum.types:
            self.visit(t, depth + 2)
        emit("} v;", depth + 1)
        kila field kwenye sum.attributes:
            # rudimentary attribute handling
            type = str(field.type)
            assert type kwenye asdl.builtin_types, type
            emit("%s %s;" % (type, field.name), depth + 1);
        emit("};")
        emit("")

    eleza visitConstructor(self, cons, depth):
        ikiwa cons.fields:
            self.emit("struct {", depth)
            kila f kwenye cons.fields:
                self.visit(f, depth + 1)
            self.emit("} %s;" % cons.name, depth)
            self.emit("", depth)

    eleza visitField(self, field, depth):
        # XXX need to lookup field.type, because it might be something
        # like a builtin...
        ctype = get_c_type(field.type)
        name = field.name
        ikiwa field.seq:
            ikiwa field.type == 'cmpop':
                self.emit("asdl_int_seq *%(name)s;" % locals(), depth)
            isipokua:
                self.emit("asdl_seq *%(name)s;" % locals(), depth)
        isipokua:
            self.emit("%(ctype)s %(name)s;" % locals(), depth)

    eleza visitProduct(self, product, name, depth):
        self.emit("struct _%(name)s {" % locals(), depth)
        kila f kwenye product.fields:
            self.visit(f, depth + 1)
        kila field kwenye product.attributes:
            # rudimentary attribute handling
            type = str(field.type)
            assert type kwenye asdl.builtin_types, type
            self.emit("%s %s;" % (type, field.name), depth + 1);
        self.emit("};", depth)
        self.emit("", depth)


kundi PrototypeVisitor(EmitVisitor):
    """Generate function prototypes kila the .h file"""

    eleza visitModule(self, mod):
        kila dfn kwenye mod.dfns:
            self.visit(dfn)

    eleza visitType(self, type):
        self.visit(type.value, type.name)

    eleza visitSum(self, sum, name):
        ikiwa is_simple(sum):
            pita # XXX
        isipokua:
            kila t kwenye sum.types:
                self.visit(t, name, sum.attributes)

    eleza get_args(self, fields):
        """Return list of C argument into, one kila each field.

        Argument info ni 3-tuple of a C type, variable name, na flag
        that ni true ikiwa type can be NULL.
        """
        args = []
        unnamed = {}
        kila f kwenye fields:
            ikiwa f.name ni Tupu:
                name = f.type
                c = unnamed[name] = unnamed.get(name, 0) + 1
                ikiwa c > 1:
                    name = "name%d" % (c - 1)
            isipokua:
                name = f.name
            # XXX should extend get_c_type() to handle this
            ikiwa f.seq:
                ikiwa f.type == 'cmpop':
                    ctype = "asdl_int_seq *"
                isipokua:
                    ctype = "asdl_seq *"
            isipokua:
                ctype = get_c_type(f.type)
            args.append((ctype, name, f.opt ama f.seq))
        rudisha args

    eleza visitConstructor(self, cons, type, attrs):
        args = self.get_args(cons.fields)
        attrs = self.get_args(attrs)
        ctype = get_c_type(type)
        self.emit_function(cons.name, ctype, args, attrs)

    eleza emit_function(self, name, ctype, args, attrs, union=Kweli):
        args = args + attrs
        ikiwa args:
            argstr = ", ".join(["%s %s" % (atype, aname)
                                kila atype, aname, opt kwenye args])
            argstr += ", PyArena *arena"
        isipokua:
            argstr = "PyArena *arena"
        margs = "a0"
        kila i kwenye range(1, len(args)+1):
            margs += ", a%d" % i
        self.emit("#define %s(%s) _Py_%s(%s)" % (name, margs, name, margs), 0,
                reflow=Uongo)
        self.emit("%s _Py_%s(%s);" % (ctype, name, argstr), Uongo)

    eleza visitProduct(self, prod, name):
        self.emit_function(name, get_c_type(name),
                           self.get_args(prod.fields),
                           self.get_args(prod.attributes),
                           union=Uongo)


kundi FunctionVisitor(PrototypeVisitor):
    """Visitor to generate constructor functions kila AST."""

    eleza emit_function(self, name, ctype, args, attrs, union=Kweli):
        eleza emit(s, depth=0, reflow=Kweli):
            self.emit(s, depth, reflow)
        argstr = ", ".join(["%s %s" % (atype, aname)
                            kila atype, aname, opt kwenye args + attrs])
        ikiwa argstr:
            argstr += ", PyArena *arena"
        isipokua:
            argstr = "PyArena *arena"
        self.emit("%s" % ctype, 0)
        emit("%s(%s)" % (name, argstr))
        emit("{")
        emit("%s p;" % ctype, 1)
        kila argtype, argname, opt kwenye args:
            ikiwa sio opt na argtype != "int":
                emit("ikiwa (!%s) {" % argname, 1)
                emit("PyErr_SetString(PyExc_ValueError,", 2)
                msg = "field %s ni required kila %s" % (argname, name)
                emit('                "%s");' % msg,
                     2, reflow=Uongo)
                emit('rudisha NULL;', 2)
                emit('}', 1)

        emit("p = (%s)PyArena_Malloc(arena, sizeof(*p));" % ctype, 1);
        emit("ikiwa (!p)", 1)
        emit("rudisha NULL;", 2)
        ikiwa union:
            self.emit_body_union(name, args, attrs)
        isipokua:
            self.emit_body_struct(name, args, attrs)
        emit("rudisha p;", 1)
        emit("}")
        emit("")

    eleza emit_body_union(self, name, args, attrs):
        eleza emit(s, depth=0, reflow=Kweli):
            self.emit(s, depth, reflow)
        emit("p->kind = %s_kind;" % name, 1)
        kila argtype, argname, opt kwenye args:
            emit("p->v.%s.%s = %s;" % (name, argname, argname), 1)
        kila argtype, argname, opt kwenye attrs:
            emit("p->%s = %s;" % (argname, argname), 1)

    eleza emit_body_struct(self, name, args, attrs):
        eleza emit(s, depth=0, reflow=Kweli):
            self.emit(s, depth, reflow)
        kila argtype, argname, opt kwenye args:
            emit("p->%s = %s;" % (argname, argname), 1)
        kila argtype, argname, opt kwenye attrs:
            emit("p->%s = %s;" % (argname, argname), 1)


kundi PickleVisitor(EmitVisitor):

    eleza visitModule(self, mod):
        kila dfn kwenye mod.dfns:
            self.visit(dfn)

    eleza visitType(self, type):
        self.visit(type.value, type.name)

    eleza visitSum(self, sum, name):
        pita

    eleza visitProduct(self, sum, name):
        pita

    eleza visitConstructor(self, cons, name):
        pita

    eleza visitField(self, sum):
        pita


kundi Obj2ModPrototypeVisitor(PickleVisitor):
    eleza visitProduct(self, prod, name):
        code = "static int obj2ast_%s(PyObject* obj, %s* out, PyArena* arena);"
        self.emit(code % (name, get_c_type(name)), 0)

    visitSum = visitProduct


kundi Obj2ModVisitor(PickleVisitor):
    eleza funcHeader(self, name):
        ctype = get_c_type(name)
        self.emit("int", 0)
        self.emit("obj2ast_%s(PyObject* obj, %s* out, PyArena* arena)" % (name, ctype), 0)
        self.emit("{", 0)
        self.emit("int isinstance;", 1)
        self.emit("", 0)

    eleza sumTrailer(self, name, add_label=Uongo):
        self.emit("", 0)
        # there's really nothing more we can do ikiwa this fails ...
        error = "expected some sort of %s, but got %%R" % name
        format = "PyErr_Format(PyExc_TypeError, \"%s\", obj);"
        self.emit(format % error, 1, reflow=Uongo)
        ikiwa add_label:
            self.emit("failed:", 1)
            self.emit("Py_XDECREF(tmp);", 1)
        self.emit("rudisha 1;", 1)
        self.emit("}", 0)
        self.emit("", 0)

    eleza simpleSum(self, sum, name):
        self.funcHeader(name)
        kila t kwenye sum.types:
            line = ("isinstance = PyObject_IsInstance(obj, "
                    "(PyObject *)%s_type);")
            self.emit(line % (t.name,), 1)
            self.emit("ikiwa (isinstance == -1) {", 1)
            self.emit("rudisha 1;", 2)
            self.emit("}", 1)
            self.emit("ikiwa (isinstance) {", 1)
            self.emit("*out = %s;" % t.name, 2)
            self.emit("rudisha 0;", 2)
            self.emit("}", 1)
        self.sumTrailer(name)

    eleza buildArgs(self, fields):
        rudisha ", ".join(fields + ["arena"])

    eleza complexSum(self, sum, name):
        self.funcHeader(name)
        self.emit("PyObject *tmp = NULL;", 1)
        kila a kwenye sum.attributes:
            self.visitAttributeDeclaration(a, name, sum=sum)
        self.emit("", 0)
        # XXX: should we only do this kila 'expr'?
        self.emit("ikiwa (obj == Py_Tupu) {", 1)
        self.emit("*out = NULL;", 2)
        self.emit("rudisha 0;", 2)
        self.emit("}", 1)
        kila a kwenye sum.attributes:
            self.visitField(a, name, sum=sum, depth=1)
        kila t kwenye sum.types:
            line = "isinstance = PyObject_IsInstance(obj, (PyObject*)%s_type);"
            self.emit(line % (t.name,), 1)
            self.emit("ikiwa (isinstance == -1) {", 1)
            self.emit("rudisha 1;", 2)
            self.emit("}", 1)
            self.emit("ikiwa (isinstance) {", 1)
            kila f kwenye t.fields:
                self.visitFieldDeclaration(f, t.name, sum=sum, depth=2)
            self.emit("", 0)
            kila f kwenye t.fields:
                self.visitField(f, t.name, sum=sum, depth=2)
            args = [f.name kila f kwenye t.fields] + [a.name kila a kwenye sum.attributes]
            self.emit("*out = %s(%s);" % (t.name, self.buildArgs(args)), 2)
            self.emit("ikiwa (*out == NULL) goto failed;", 2)
            self.emit("rudisha 0;", 2)
            self.emit("}", 1)
        self.sumTrailer(name, Kweli)

    eleza visitAttributeDeclaration(self, a, name, sum=sum):
        ctype = get_c_type(a.type)
        self.emit("%s %s;" % (ctype, a.name), 1)

    eleza visitSum(self, sum, name):
        ikiwa is_simple(sum):
            self.simpleSum(sum, name)
        isipokua:
            self.complexSum(sum, name)

    eleza visitProduct(self, prod, name):
        ctype = get_c_type(name)
        self.emit("int", 0)
        self.emit("obj2ast_%s(PyObject* obj, %s* out, PyArena* arena)" % (name, ctype), 0)
        self.emit("{", 0)
        self.emit("PyObject* tmp = NULL;", 1)
        kila f kwenye prod.fields:
            self.visitFieldDeclaration(f, name, prod=prod, depth=1)
        kila a kwenye prod.attributes:
            self.visitFieldDeclaration(a, name, prod=prod, depth=1)
        self.emit("", 0)
        kila f kwenye prod.fields:
            self.visitField(f, name, prod=prod, depth=1)
        kila a kwenye prod.attributes:
            self.visitField(a, name, prod=prod, depth=1)
        args = [f.name kila f kwenye prod.fields]
        args.extend([a.name kila a kwenye prod.attributes])
        self.emit("*out = %s(%s);" % (name, self.buildArgs(args)), 1)
        self.emit("rudisha 0;", 1)
        self.emit("failed:", 0)
        self.emit("Py_XDECREF(tmp);", 1)
        self.emit("rudisha 1;", 1)
        self.emit("}", 0)
        self.emit("", 0)

    eleza visitFieldDeclaration(self, field, name, sum=Tupu, prod=Tupu, depth=0):
        ctype = get_c_type(field.type)
        ikiwa field.seq:
            ikiwa self.isSimpleType(field):
                self.emit("asdl_int_seq* %s;" % field.name, depth)
            isipokua:
                self.emit("asdl_seq* %s;" % field.name, depth)
        isipokua:
            ctype = get_c_type(field.type)
            self.emit("%s %s;" % (ctype, field.name), depth)

    eleza isSimpleSum(self, field):
        # XXX can the members of this list be determined automatically?
        rudisha field.type kwenye ('expr_context', 'boolop', 'operator',
                              'unaryop', 'cmpop')

    eleza isNumeric(self, field):
        rudisha get_c_type(field.type) kwenye ("int", "bool")

    eleza isSimpleType(self, field):
        rudisha self.isSimpleSum(field) ama self.isNumeric(field)

    eleza visitField(self, field, name, sum=Tupu, prod=Tupu, depth=0):
        ctype = get_c_type(field.type)
        self.emit("ikiwa (_PyObject_LookupAttrId(obj, &PyId_%s, &tmp) < 0) {" % field.name, depth)
        self.emit("rudisha 1;", depth+1)
        self.emit("}", depth)
        ikiwa sio field.opt:
            self.emit("ikiwa (tmp == NULL) {", depth)
            message = "required field \\\"%s\\\" missing kutoka %s" % (field.name, name)
            format = "PyErr_SetString(PyExc_TypeError, \"%s\");"
            self.emit(format % message, depth+1, reflow=Uongo)
            self.emit("rudisha 1;", depth+1)
        isipokua:
            self.emit("ikiwa (tmp == NULL || tmp == Py_Tupu) {", depth)
            self.emit("Py_CLEAR(tmp);", depth+1)
            ikiwa self.isNumeric(field):
                self.emit("%s = 0;" % field.name, depth+1)
            lasivyo sio self.isSimpleType(field):
                self.emit("%s = NULL;" % field.name, depth+1)
            isipokua:
                ashiria TypeError("could sio determine the default value kila %s" % field.name)
        self.emit("}", depth)
        self.emit("else {", depth)

        self.emit("int res;", depth+1)
        ikiwa field.seq:
            self.emit("Py_ssize_t len;", depth+1)
            self.emit("Py_ssize_t i;", depth+1)
            self.emit("ikiwa (!PyList_Check(tmp)) {", depth+1)
            self.emit("PyErr_Format(PyExc_TypeError, \"%s field \\\"%s\\\" must "
                      "be a list, sio a %%.200s\", tmp->ob_type->tp_name);" %
                      (name, field.name),
                      depth+2, reflow=Uongo)
            self.emit("goto failed;", depth+2)
            self.emit("}", depth+1)
            self.emit("len = PyList_GET_SIZE(tmp);", depth+1)
            ikiwa self.isSimpleType(field):
                self.emit("%s = _Py_asdl_int_seq_new(len, arena);" % field.name, depth+1)
            isipokua:
                self.emit("%s = _Py_asdl_seq_new(len, arena);" % field.name, depth+1)
            self.emit("ikiwa (%s == NULL) goto failed;" % field.name, depth+1)
            self.emit("kila (i = 0; i < len; i++) {", depth+1)
            self.emit("%s val;" % ctype, depth+2)
            self.emit("res = obj2ast_%s(PyList_GET_ITEM(tmp, i), &val, arena);" %
                      field.type, depth+2, reflow=Uongo)
            self.emit("ikiwa (res != 0) goto failed;", depth+2)
            self.emit("ikiwa (len != PyList_GET_SIZE(tmp)) {", depth+2)
            self.emit("PyErr_SetString(PyExc_RuntimeError, \"%s field \\\"%s\\\" "
                      "changed size during iteration\");" %
                      (name, field.name),
                      depth+3, reflow=Uongo)
            self.emit("goto failed;", depth+3)
            self.emit("}", depth+2)
            self.emit("asdl_seq_SET(%s, i, val);" % field.name, depth+2)
            self.emit("}", depth+1)
        isipokua:
            self.emit("res = obj2ast_%s(tmp, &%s, arena);" %
                      (field.type, field.name), depth+1)
            self.emit("ikiwa (res != 0) goto failed;", depth+1)

        self.emit("Py_CLEAR(tmp);", depth+1)
        self.emit("}", depth)


kundi MarshalPrototypeVisitor(PickleVisitor):

    eleza prototype(self, sum, name):
        ctype = get_c_type(name)
        self.emit("static int marshal_write_%s(PyObject **, int *, %s);"
                  % (name, ctype), 0)

    visitProduct = visitSum = prototype


kundi PyTypesDeclareVisitor(PickleVisitor):

    eleza visitProduct(self, prod, name):
        self.emit("static PyTypeObject *%s_type;" % name, 0)
        self.emit("static PyObject* ast2obj_%s(void*);" % name, 0)
        ikiwa prod.attributes:
            kila a kwenye prod.attributes:
                self.emit_identifier(a.name)
            self.emit("static char *%s_attributes[] = {" % name, 0)
            kila a kwenye prod.attributes:
                self.emit('"%s",' % a.name, 1)
            self.emit("};", 0)
        ikiwa prod.fields:
            kila f kwenye prod.fields:
                self.emit_identifier(f.name)
            self.emit("static char *%s_fields[]={" % name,0)
            kila f kwenye prod.fields:
                self.emit('"%s",' % f.name, 1)
            self.emit("};", 0)

    eleza visitSum(self, sum, name):
        self.emit("static PyTypeObject *%s_type;" % name, 0)
        ikiwa sum.attributes:
            kila a kwenye sum.attributes:
                self.emit_identifier(a.name)
            self.emit("static char *%s_attributes[] = {" % name, 0)
            kila a kwenye sum.attributes:
                self.emit('"%s",' % a.name, 1)
            self.emit("};", 0)
        ptype = "void*"
        ikiwa is_simple(sum):
            ptype = get_c_type(name)
            tnames = []
            kila t kwenye sum.types:
                tnames.append(str(t.name)+"_singleton")
            tnames = ", *".join(tnames)
            self.emit("static PyObject *%s;" % tnames, 0)
        self.emit("static PyObject* ast2obj_%s(%s);" % (name, ptype), 0)
        kila t kwenye sum.types:
            self.visitConstructor(t, name)

    eleza visitConstructor(self, cons, name):
        self.emit("static PyTypeObject *%s_type;" % cons.name, 0)
        ikiwa cons.fields:
            kila t kwenye cons.fields:
                self.emit_identifier(t.name)
            self.emit("static char *%s_fields[]={" % cons.name, 0)
            kila t kwenye cons.fields:
                self.emit('"%s",' % t.name, 1)
            self.emit("};",0)

kundi PyTypesVisitor(PickleVisitor):

    eleza visitModule(self, mod):
        self.emit("""
_Py_IDENTIFIER(_fields);
_Py_IDENTIFIER(_attributes);

typeeleza struct {
    PyObject_HEAD
    PyObject *dict;
} AST_object;

static void
ast_dealloc(AST_object *self)
{
    /* bpo-31095: UnTrack ni needed before calling any callbacks */
    PyObject_GC_UnTrack(self);
    Py_CLEAR(self->dict);
    Py_TYPE(self)->tp_free(self);
}

static int
ast_traverse(AST_object *self, visitproc visit, void *arg)
{
    Py_VISIT(self->dict);
    rudisha 0;
}

static int
ast_clear(AST_object *self)
{
    Py_CLEAR(self->dict);
    rudisha 0;
}

static int
ast_type_init(PyObject *self, PyObject *args, PyObject *kw)
{
    Py_ssize_t i, numfields = 0;
    int res = -1;
    PyObject *key, *value, *fields;
    ikiwa (_PyObject_LookupAttrId((PyObject*)Py_TYPE(self), &PyId__fields, &fields) < 0) {
        goto cleanup;
    }
    ikiwa (fields) {
        numfields = PySequence_Size(fields);
        ikiwa (numfields == -1)
            goto cleanup;
    }

    res = 0; /* ikiwa no error occurs, this stays 0 to the end */
    ikiwa (numfields < PyTuple_GET_SIZE(args)) {
        PyErr_Format(PyExc_TypeError, "%.400s constructor takes at most "
                     "%zd positional argument%s",
                     Py_TYPE(self)->tp_name,
                     numfields, numfields == 1 ? "" : "s");
        res = -1;
        goto cleanup;
    }
    kila (i = 0; i < PyTuple_GET_SIZE(args); i++) {
        /* cansio be reached when fields ni NULL */
        PyObject *name = PySequence_GetItem(fields, i);
        ikiwa (!name) {
            res = -1;
            goto cleanup;
        }
        res = PyObject_SetAttr(self, name, PyTuple_GET_ITEM(args, i));
        Py_DECREF(name);
        ikiwa (res < 0)
            goto cleanup;
    }
    ikiwa (kw) {
        i = 0;  /* needed by PyDict_Next */
        wakati (PyDict_Next(kw, &i, &key, &value)) {
            res = PyObject_SetAttr(self, key, value);
            ikiwa (res < 0)
                goto cleanup;
        }
    }
  cleanup:
    Py_XDECREF(fields);
    rudisha res;
}

/* Pickling support */
static PyObject *
ast_type_reduce(PyObject *self, PyObject *unused)
{
    _Py_IDENTIFIER(__dict__);
    PyObject *dict;
    ikiwa (_PyObject_LookupAttrId(self, &PyId___dict__, &dict) < 0) {
        rudisha NULL;
    }
    ikiwa (dict) {
        rudisha Py_BuildValue("O()N", Py_TYPE(self), dict);
    }
    rudisha Py_BuildValue("O()", Py_TYPE(self));
}

static PyMethodDef ast_type_methods[] = {
    {"__reduce__", ast_type_reduce, METH_NOARGS, NULL},
    {NULL}
};

static PyGetSetDef ast_type_getsets[] = {
    {"__dict__", PyObject_GenericGetDict, PyObject_GenericSetDict},
    {NULL}
};

static PyTypeObject AST_type = {
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
    "_ast.AST",
    sizeof(AST_object),
    0,
    (destructor)ast_dealloc, /* tp_dealloc */
    0,                       /* tp_vectorcall_offset */
    0,                       /* tp_getattr */
    0,                       /* tp_setattr */
    0,                       /* tp_as_async */
    0,                       /* tp_repr */
    0,                       /* tp_as_number */
    0,                       /* tp_as_sequence */
    0,                       /* tp_as_mapping */
    0,                       /* tp_hash */
    0,                       /* tp_call */
    0,                       /* tp_str */
    PyObject_GenericGetAttr, /* tp_getattro */
    PyObject_GenericSetAttr, /* tp_setattro */
    0,                       /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_GC, /* tp_flags */
    0,                       /* tp_doc */
    (traverseproc)ast_traverse, /* tp_traverse */
    (inquiry)ast_clear,      /* tp_clear */
    0,                       /* tp_richcompare */
    0,                       /* tp_weaklistoffset */
    0,                       /* tp_iter */
    0,                       /* tp_iternext */
    ast_type_methods,        /* tp_methods */
    0,                       /* tp_members */
    ast_type_getsets,        /* tp_getset */
    0,                       /* tp_base */
    0,                       /* tp_dict */
    0,                       /* tp_descr_get */
    0,                       /* tp_descr_set */
    offsetof(AST_object, dict),/* tp_dictoffset */
    (initproc)ast_type_init, /* tp_init */
    PyType_GenericAlloc,     /* tp_alloc */
    PyType_GenericNew,       /* tp_new */
    PyObject_GC_Del,         /* tp_free */
};


static PyTypeObject* make_type(char *type, PyTypeObject* base, char**fields, int num_fields)
{
    _Py_IDENTIFIER(__module__);
    _Py_IDENTIFIER(_ast);
    PyObject *fnames, *result;
    int i;
    fnames = PyTuple_New(num_fields);
    ikiwa (!fnames) rudisha NULL;
    kila (i = 0; i < num_fields; i++) {
        PyObject *field = PyUnicode_FromString(fields[i]);
        ikiwa (!field) {
            Py_DECREF(fnames);
            rudisha NULL;
        }
        PyTuple_SET_ITEM(fnames, i, field);
    }
    result = PyObject_CallFunction((PyObject*)&PyType_Type, "s(O){OOOO}",
                    type, base,
                    _PyUnicode_FromId(&PyId__fields), fnames,
                    _PyUnicode_FromId(&PyId___module__),
                    _PyUnicode_FromId(&PyId__ast));
    Py_DECREF(fnames);
    rudisha (PyTypeObject*)result;
}

static int add_attributes(PyTypeObject* type, char**attrs, int num_fields)
{
    int i, result;
    PyObject *s, *l = PyTuple_New(num_fields);
    ikiwa (!l)
        rudisha 0;
    kila (i = 0; i < num_fields; i++) {
        s = PyUnicode_FromString(attrs[i]);
        ikiwa (!s) {
            Py_DECREF(l);
            rudisha 0;
        }
        PyTuple_SET_ITEM(l, i, s);
    }
    result = _PyObject_SetAttrId((PyObject*)type, &PyId__attributes, l) >= 0;
    Py_DECREF(l);
    rudisha result;
}

/* Conversion AST -> Python */

static PyObject* ast2obj_list(asdl_seq *seq, PyObject* (*func)(void*))
{
    Py_ssize_t i, n = asdl_seq_LEN(seq);
    PyObject *result = PyList_New(n);
    PyObject *value;
    ikiwa (!result)
        rudisha NULL;
    kila (i = 0; i < n; i++) {
        value = func(asdl_seq_GET(seq, i));
        ikiwa (!value) {
            Py_DECREF(result);
            rudisha NULL;
        }
        PyList_SET_ITEM(result, i, value);
    }
    rudisha result;
}

static PyObject* ast2obj_object(void *o)
{
    ikiwa (!o)
        o = Py_Tupu;
    Py_INCREF((PyObject*)o);
    rudisha (PyObject*)o;
}
#define ast2obj_singleton ast2obj_object
#define ast2obj_constant ast2obj_object
#define ast2obj_identifier ast2obj_object
#define ast2obj_string ast2obj_object
#define ast2obj_bytes ast2obj_object

static PyObject* ast2obj_int(long b)
{
    rudisha PyLong_FromLong(b);
}

/* Conversion Python -> AST */

static int obj2ast_object(PyObject* obj, PyObject** out, PyArena* arena)
{
    ikiwa (obj == Py_Tupu)
        obj = NULL;
    ikiwa (obj) {
        ikiwa (PyArena_AddPyObject(arena, obj) < 0) {
            *out = NULL;
            rudisha -1;
        }
        Py_INCREF(obj);
    }
    *out = obj;
    rudisha 0;
}

static int obj2ast_constant(PyObject* obj, PyObject** out, PyArena* arena)
{
    ikiwa (PyArena_AddPyObject(arena, obj) < 0) {
        *out = NULL;
        rudisha -1;
    }
    Py_INCREF(obj);
    *out = obj;
    rudisha 0;
}

static int obj2ast_identifier(PyObject* obj, PyObject** out, PyArena* arena)
{
    ikiwa (!PyUnicode_CheckExact(obj) && obj != Py_Tupu) {
        PyErr_SetString(PyExc_TypeError, "AST identifier must be of type str");
        rudisha 1;
    }
    rudisha obj2ast_object(obj, out, arena);
}

static int obj2ast_string(PyObject* obj, PyObject** out, PyArena* arena)
{
    ikiwa (!PyUnicode_CheckExact(obj) && !PyBytes_CheckExact(obj)) {
        PyErr_SetString(PyExc_TypeError, "AST string must be of type str");
        rudisha 1;
    }
    rudisha obj2ast_object(obj, out, arena);
}

static int obj2ast_int(PyObject* obj, int* out, PyArena* arena)
{
    int i;
    ikiwa (!PyLong_Check(obj)) {
        PyErr_Format(PyExc_ValueError, "invalid integer value: %R", obj);
        rudisha 1;
    }

    i = _PyLong_AsInt(obj);
    ikiwa (i == -1 && PyErr_Occurred())
        rudisha 1;
    *out = i;
    rudisha 0;
}

static int add_ast_fields(void)
{
    PyObject *empty_tuple, *d;
    ikiwa (PyType_Ready(&AST_type) < 0)
        rudisha -1;
    d = AST_type.tp_dict;
    empty_tuple = PyTuple_New(0);
    ikiwa (!empty_tuple ||
        _PyDict_SetItemId(d, &PyId__fields, empty_tuple) < 0 ||
        _PyDict_SetItemId(d, &PyId__attributes, empty_tuple) < 0) {
        Py_XDECREF(empty_tuple);
        rudisha -1;
    }
    Py_DECREF(empty_tuple);
    rudisha 0;
}

""", 0, reflow=Uongo)

        self.emit("static int init_types(void)",0)
        self.emit("{", 0)
        self.emit("static int initialized;", 1)
        self.emit("ikiwa (initialized) rudisha 1;", 1)
        self.emit("ikiwa (add_ast_fields() < 0) rudisha 0;", 1)
        kila dfn kwenye mod.dfns:
            self.visit(dfn)
        self.emit("initialized = 1;", 1)
        self.emit("rudisha 1;", 1);
        self.emit("}", 0)

    eleza visitProduct(self, prod, name):
        ikiwa prod.fields:
            fields = name+"_fields"
        isipokua:
            fields = "NULL"
        self.emit('%s_type = make_type("%s", &AST_type, %s, %d);' %
                        (name, name, fields, len(prod.fields)), 1)
        self.emit("ikiwa (!%s_type) rudisha 0;" % name, 1)
        ikiwa prod.attributes:
            self.emit("ikiwa (!add_attributes(%s_type, %s_attributes, %d)) rudisha 0;" %
                            (name, name, len(prod.attributes)), 1)
        isipokua:
            self.emit("ikiwa (!add_attributes(%s_type, NULL, 0)) rudisha 0;" % name, 1)

    eleza visitSum(self, sum, name):
        self.emit('%s_type = make_type("%s", &AST_type, NULL, 0);' %
                  (name, name), 1)
        self.emit("ikiwa (!%s_type) rudisha 0;" % name, 1)
        ikiwa sum.attributes:
            self.emit("ikiwa (!add_attributes(%s_type, %s_attributes, %d)) rudisha 0;" %
                            (name, name, len(sum.attributes)), 1)
        isipokua:
            self.emit("ikiwa (!add_attributes(%s_type, NULL, 0)) rudisha 0;" % name, 1)
        simple = is_simple(sum)
        kila t kwenye sum.types:
            self.visitConstructor(t, name, simple)

    eleza visitConstructor(self, cons, name, simple):
        ikiwa cons.fields:
            fields = cons.name+"_fields"
        isipokua:
            fields = "NULL"
        self.emit('%s_type = make_type("%s", %s_type, %s, %d);' %
                            (cons.name, cons.name, name, fields, len(cons.fields)), 1)
        self.emit("ikiwa (!%s_type) rudisha 0;" % cons.name, 1)
        ikiwa simple:
            self.emit("%s_singleton = PyType_GenericNew(%s_type, NULL, NULL);" %
                             (cons.name, cons.name), 1)
            self.emit("ikiwa (!%s_singleton) rudisha 0;" % cons.name, 1)


kundi ASTModuleVisitor(PickleVisitor):

    eleza visitModule(self, mod):
        self.emit("static struct PyModuleDef _astmodule = {", 0)
        self.emit('  PyModuleDef_HEAD_INIT, "_ast"', 0)
        self.emit("};", 0)
        self.emit("PyMODINIT_FUNC", 0)
        self.emit("PyInit__ast(void)", 0)
        self.emit("{", 0)
        self.emit("PyObject *m, *d;", 1)
        self.emit("ikiwa (!init_types()) rudisha NULL;", 1)
        self.emit('m = PyModule_Create(&_astmodule);', 1)
        self.emit("ikiwa (!m) rudisha NULL;", 1)
        self.emit("d = PyModule_GetDict(m);", 1)
        self.emit('ikiwa (PyDict_SetItemString(d, "AST", (PyObject*)&AST_type) < 0) rudisha NULL;', 1)
        self.emit('ikiwa (PyModule_AddIntMacro(m, PyCF_ALLOW_TOP_LEVEL_AWAIT) < 0)', 1)
        self.emit("rudisha NULL;", 2)
        self.emit('ikiwa (PyModule_AddIntMacro(m, PyCF_ONLY_AST) < 0)', 1)
        self.emit("rudisha NULL;", 2)
        self.emit('ikiwa (PyModule_AddIntMacro(m, PyCF_TYPE_COMMENTS) < 0)', 1)
        self.emit("rudisha NULL;", 2)
        kila dfn kwenye mod.dfns:
            self.visit(dfn)
        self.emit("rudisha m;", 1)
        self.emit("}", 0)

    eleza visitProduct(self, prod, name):
        self.addObj(name)

    eleza visitSum(self, sum, name):
        self.addObj(name)
        kila t kwenye sum.types:
            self.visitConstructor(t, name)

    eleza visitConstructor(self, cons, name):
        self.addObj(cons.name)

    eleza addObj(self, name):
        self.emit('ikiwa (PyDict_SetItemString(d, "%s", (PyObject*)%s_type) < 0) rudisha NULL;' % (name, name), 1)


_SPECIALIZED_SEQUENCES = ('stmt', 'expr')

eleza find_sequence(fields, doing_specialization):
    """Return Kweli ikiwa any field uses a sequence."""
    kila f kwenye fields:
        ikiwa f.seq:
            ikiwa sio doing_specialization:
                rudisha Kweli
            ikiwa str(f.type) haiko kwenye _SPECIALIZED_SEQUENCES:
                rudisha Kweli
    rudisha Uongo

eleza has_sequence(types, doing_specialization):
    kila t kwenye types:
        ikiwa find_sequence(t.fields, doing_specialization):
            rudisha Kweli
    rudisha Uongo


kundi StaticVisitor(PickleVisitor):
    CODE = '''Very simple, always emit this static code.  Override CODE'''

    eleza visit(self, object):
        self.emit(self.CODE, 0, reflow=Uongo)


kundi ObjVisitor(PickleVisitor):

    eleza func_begin(self, name):
        ctype = get_c_type(name)
        self.emit("PyObject*", 0)
        self.emit("ast2obj_%s(void* _o)" % (name), 0)
        self.emit("{", 0)
        self.emit("%s o = (%s)_o;" % (ctype, ctype), 1)
        self.emit("PyObject *result = NULL, *value = NULL;", 1)
        self.emit('ikiwa (!o) {', 1)
        self.emit("Py_RETURN_NONE;", 2)
        self.emit("}", 1)
        self.emit('', 0)

    eleza func_end(self):
        self.emit("rudisha result;", 1)
        self.emit("failed:", 0)
        self.emit("Py_XDECREF(value);", 1)
        self.emit("Py_XDECREF(result);", 1)
        self.emit("rudisha NULL;", 1)
        self.emit("}", 0)
        self.emit("", 0)

    eleza visitSum(self, sum, name):
        ikiwa is_simple(sum):
            self.simpleSum(sum, name)
            rudisha
        self.func_begin(name)
        self.emit("switch (o->kind) {", 1)
        kila i kwenye range(len(sum.types)):
            t = sum.types[i]
            self.visitConstructor(t, i + 1, name)
        self.emit("}", 1)
        kila a kwenye sum.attributes:
            self.emit("value = ast2obj_%s(o->%s);" % (a.type, a.name), 1)
            self.emit("ikiwa (!value) goto failed;", 1)
            self.emit('ikiwa (_PyObject_SetAttrId(result, &PyId_%s, value) < 0)' % a.name, 1)
            self.emit('goto failed;', 2)
            self.emit('Py_DECREF(value);', 1)
        self.func_end()

    eleza simpleSum(self, sum, name):
        self.emit("PyObject* ast2obj_%s(%s_ty o)" % (name, name), 0)
        self.emit("{", 0)
        self.emit("switch(o) {", 1)
        kila t kwenye sum.types:
            self.emit("case %s:" % t.name, 2)
            self.emit("Py_INCREF(%s_singleton);" % t.name, 3)
            self.emit("rudisha %s_singleton;" % t.name, 3)
        self.emit("default:", 2)
        self.emit('/* should never happen, but just kwenye case ... */', 3)
        code = "PyErr_Format(PyExc_SystemError, \"unknown %s found\");" % name
        self.emit(code, 3, reflow=Uongo)
        self.emit("rudisha NULL;", 3)
        self.emit("}", 1)
        self.emit("}", 0)

    eleza visitProduct(self, prod, name):
        self.func_begin(name)
        self.emit("result = PyType_GenericNew(%s_type, NULL, NULL);" % name, 1);
        self.emit("ikiwa (!result) rudisha NULL;", 1)
        kila field kwenye prod.fields:
            self.visitField(field, name, 1, Kweli)
        kila a kwenye prod.attributes:
            self.emit("value = ast2obj_%s(o->%s);" % (a.type, a.name), 1)
            self.emit("ikiwa (!value) goto failed;", 1)
            self.emit('ikiwa (_PyObject_SetAttrId(result, &PyId_%s, value) < 0)' % a.name, 1)
            self.emit('goto failed;', 2)
            self.emit('Py_DECREF(value);', 1)
        self.func_end()

    eleza visitConstructor(self, cons, enum, name):
        self.emit("case %s_kind:" % cons.name, 1)
        self.emit("result = PyType_GenericNew(%s_type, NULL, NULL);" % cons.name, 2);
        self.emit("ikiwa (!result) goto failed;", 2)
        kila f kwenye cons.fields:
            self.visitField(f, cons.name, 2, Uongo)
        self.emit("koma;", 2)

    eleza visitField(self, field, name, depth, product):
        eleza emit(s, d):
            self.emit(s, depth + d)
        ikiwa product:
            value = "o->%s" % field.name
        isipokua:
            value = "o->v.%s.%s" % (name, field.name)
        self.set(field, value, depth)
        emit("ikiwa (!value) goto failed;", 0)
        emit('ikiwa (_PyObject_SetAttrId(result, &PyId_%s, value) == -1)' % field.name, 0)
        emit("goto failed;", 1)
        emit("Py_DECREF(value);", 0)

    eleza emitSeq(self, field, value, depth, emit):
        emit("seq = %s;" % value, 0)
        emit("n = asdl_seq_LEN(seq);", 0)
        emit("value = PyList_New(n);", 0)
        emit("ikiwa (!value) goto failed;", 0)
        emit("kila (i = 0; i < n; i++) {", 0)
        self.set("value", field, "asdl_seq_GET(seq, i)", depth + 1)
        emit("ikiwa (!value1) goto failed;", 1)
        emit("PyList_SET_ITEM(value, i, value1);", 1)
        emit("value1 = NULL;", 1)
        emit("}", 0)

    eleza set(self, field, value, depth):
        ikiwa field.seq:
            # XXX should really check kila is_simple, but that requires a symbol table
            ikiwa field.type == "cmpop":
                # While the sequence elements are stored kama void*,
                # ast2obj_cmpop expects an enum
                self.emit("{", depth)
                self.emit("Py_ssize_t i, n = asdl_seq_LEN(%s);" % value, depth+1)
                self.emit("value = PyList_New(n);", depth+1)
                self.emit("ikiwa (!value) goto failed;", depth+1)
                self.emit("for(i = 0; i < n; i++)", depth+1)
                # This cansio fail, so no need kila error handling
                self.emit("PyList_SET_ITEM(value, i, ast2obj_cmpop((cmpop_ty)asdl_seq_GET(%s, i)));" % value,
                          depth+2, reflow=Uongo)
                self.emit("}", depth)
            isipokua:
                self.emit("value = ast2obj_list(%s, ast2obj_%s);" % (value, field.type), depth)
        isipokua:
            ctype = get_c_type(field.type)
            self.emit("value = ast2obj_%s(%s);" % (field.type, value), depth, reflow=Uongo)


kundi PartingShots(StaticVisitor):

    CODE = """
PyObject* PyAST_mod2obj(mod_ty t)
{
    ikiwa (!init_types())
        rudisha NULL;
    rudisha ast2obj_mod(t);
}

/* mode ni 0 kila "exec", 1 kila "eval" na 2 kila "single" input */
mod_ty PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode)
{
    PyObject *req_type[3];
    char *req_name[] = {"Module", "Expression", "Interactive"};
    int isinstance;

    ikiwa (PySys_Audit("compile", "OO", ast, Py_Tupu) < 0) {
        rudisha NULL;
    }

    req_type[0] = (PyObject*)Module_type;
    req_type[1] = (PyObject*)Expression_type;
    req_type[2] = (PyObject*)Interactive_type;

    assert(0 <= mode && mode <= 2);

    ikiwa (!init_types())
        rudisha NULL;

    isinstance = PyObject_IsInstance(ast, req_type[mode]);
    ikiwa (isinstance == -1)
        rudisha NULL;
    ikiwa (!isinstance) {
        PyErr_Format(PyExc_TypeError, "expected %s node, got %.400s",
                     req_name[mode], Py_TYPE(ast)->tp_name);
        rudisha NULL;
    }

    mod_ty res = NULL;
    ikiwa (obj2ast_mod(ast, &res, arena) != 0)
        rudisha NULL;
    isipokua
        rudisha res;
}

int PyAST_Check(PyObject* obj)
{
    ikiwa (!init_types())
        rudisha -1;
    rudisha PyObject_IsInstance(obj, (PyObject*)&AST_type);
}
"""

kundi ChainOfVisitors:
    eleza __init__(self, *visitors):
        self.visitors = visitors

    eleza visit(self, object):
        kila v kwenye self.visitors:
            v.visit(object)
            v.emit("", 0)

common_msg = "/* File automatically generated by %s. */\n\n"

eleza main(srcfile, dump_module=Uongo):
    argv0 = sys.argv[0]
    components = argv0.split(os.sep)
    argv0 = os.sep.join(components[-2:])
    auto_gen_msg = common_msg % argv0
    mod = asdl.parse(srcfile)
    ikiwa dump_module:
        andika('Parsed Module:')
        andika(mod)
    ikiwa sio asdl.check(mod):
        sys.exit(1)
    ikiwa H_FILE:
        ukijumuisha open(H_FILE, "w") kama f:
            f.write(auto_gen_msg)
            f.write('#ifndef Py_PYTHON_AST_H\n')
            f.write('#define Py_PYTHON_AST_H\n')
            f.write('#ifdef __cplusplus\n')
            f.write('extern "C" {\n')
            f.write('#endif\n')
            f.write('\n')
            f.write('#include "asdl.h"\n')
            f.write('\n')
            f.write('#undef Yield   /* undefine macro conflicting ukijumuisha <winbase.h> */\n')
            f.write('\n')
            c = ChainOfVisitors(TypeDefVisitor(f),
                                StructVisitor(f))

            c.visit(mod)
            f.write("// Note: these macros affect function definitions, sio only call sites.\n")
            PrototypeVisitor(f).visit(mod)
            f.write("\n")
            f.write("PyObject* PyAST_mod2obj(mod_ty t);\n")
            f.write("mod_ty PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode);\n")
            f.write("int PyAST_Check(PyObject* obj);\n")
            f.write('\n')
            f.write('#ifdef __cplusplus\n')
            f.write('}\n')
            f.write('#endif\n')
            f.write('#endif /* !Py_PYTHON_AST_H */\n')

    ikiwa C_FILE:
        ukijumuisha open(C_FILE, "w") kama f:
            f.write(auto_gen_msg)
            f.write('#include <stddef.h>\n')
            f.write('\n')
            f.write('#include "Python.h"\n')
            f.write('#include "%s-ast.h"\n' % mod.name)
            f.write('\n')
            f.write("static PyTypeObject AST_type;\n")
            v = ChainOfVisitors(
                PyTypesDeclareVisitor(f),
                PyTypesVisitor(f),
                Obj2ModPrototypeVisitor(f),
                FunctionVisitor(f),
                ObjVisitor(f),
                Obj2ModVisitor(f),
                ASTModuleVisitor(f),
                PartingShots(f),
                )
            v.visit(mod)

ikiwa __name__ == "__main__":
    agiza getopt

    H_FILE = ''
    C_FILE = ''
    dump_module = Uongo
    opts, args = getopt.getopt(sys.argv[1:], "dh:c:")
    kila o, v kwenye opts:
        ikiwa o == '-h':
            H_FILE = v
        lasivyo o == '-c':
            C_FILE = v
        lasivyo o == '-d':
            dump_module = Kweli
    ikiwa H_FILE na C_FILE:
        andika('Must specify exactly one output file')
        sys.exit(1)
    lasivyo len(args) != 1:
        andika('Must specify single input file')
        sys.exit(1)
    main(args[0], dump_module)
