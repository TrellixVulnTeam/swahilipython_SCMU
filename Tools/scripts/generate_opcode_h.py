# This script generates the opcode.h header file.

agiza sys
agiza tokenize

header = """
/* Auto-generated by Tools/scripts/generate_opcode_h.py kutoka Lib/opcode.py */
#ifneleza Py_OPCODE_H
#define Py_OPCODE_H
#ifeleza __cplusplus
extern "C" {
#endif


    /* Instruction opcodes kila compiled code */
""".lstrip()

footer = """
/* EXCEPT_HANDLER ni a special, implicit block type which ni created when
   entering an tatizo handler. It ni sio an opcode but we define it here
   kama we want it to be available to both frameobject.c na ceval.c, while
   remaining private.*/
#define EXCEPT_HANDLER 257


enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE,
                PyCmp_GT=Py_GT, PyCmp_GE=Py_GE, PyCmp_IN, PyCmp_NOT_IN,
                PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};

#define HAS_ARG(op) ((op) >= HAVE_ARGUMENT)

#ifeleza __cplusplus
}
#endif
#endikiwa /* !Py_OPCODE_H */
"""


eleza main(opcode_py, outfile='Include/opcode.h'):
    opcode = {}
    ikiwa hasattr(tokenize, 'open'):
        fp = tokenize.open(opcode_py)   # Python 3.2+
    isipokua:
        fp = open(opcode_py)            # Python 2.7
    ukijumuisha fp:
        code = fp.read()
    exec(code, opcode)
    opmap = opcode['opmap']
    ukijumuisha open(outfile, 'w') kama fobj:
        fobj.write(header)
        kila name kwenye opcode['opname']:
            ikiwa name kwenye opmap:
                fobj.write("#define %-23s %3s\n" % (name, opmap[name]))
            ikiwa name == 'POP_EXCEPT': # Special entry kila HAVE_ARGUMENT
                fobj.write("#define %-23s %3d\n" %
                            ('HAVE_ARGUMENT', opcode['HAVE_ARGUMENT']))
        fobj.write(footer)

    andika("%s regenerated kutoka %s" % (outfile, opcode_py))


ikiwa __name__ == '__main__':
    main(sys.argv[1], sys.argv[2])
