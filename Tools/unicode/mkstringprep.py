agiza re, sys
kutoka unicodedata agiza ucd_3_2_0 kama unicodedata

ikiwa sys.maxunicode == 65535:
    ashiria RuntimeError("need UCS-4 Python")

eleza gen_category(cats):
    kila i kwenye range(0, 0x110000):
        ikiwa unicodedata.category(chr(i)) kwenye cats:
            yield(i)

eleza gen_bidirectional(cats):
    kila i kwenye range(0, 0x110000):
        ikiwa unicodedata.bidirectional(chr(i)) kwenye cats:
            yield(i)

eleza compact_set(l):
    single = []
    tuple = []
    prev = Tupu
    span = 0
    kila e kwenye l:
        ikiwa prev ni Tupu:
            prev = e
            span = 0
            endelea
        ikiwa prev+span+1 != e:
            ikiwa span > 2:
                tuple.append((prev,prev+span+1))
            isipokua:
                kila i kwenye range(prev, prev+span+1):
                    single.append(i)
            prev = e
            span = 0
        isipokua:
            span += 1
    ikiwa span:
        tuple.append((prev,prev+span+1))
    isipokua:
        single.append(prev)
    ikiwa sio single na len(tuple) == 1:
        tuple = "range(%d,%d)" % tuple[0]
    isipokua:
        tuple = " + ".join("list(range(%d,%d))" % t kila t kwenye tuple)
    ikiwa sio single:
        rudisha "set(%s)" % tuple
    ikiwa sio tuple:
        rudisha "set(%r)" % (single,)
    rudisha "set(%r + %s)" % (single, tuple)

############## Read the tables kwenye the RFC #######################

ukijumuisha open("rfc3454.txt") kama f:
    data = f.readlines()

tables = []
curname = Tupu
kila l kwenye data:
    l = l.strip()
    ikiwa sio l:
        endelea
    # Skip RFC page komas
    ikiwa l.startswith(("Hoffman & Blanchet", "RFC 3454")):
        endelea
    # Find start/end lines
    m = re.match("----- (Start|End) Table ([A-Z](.[0-9])+) -----", l)
    ikiwa m:
        ikiwa m.group(1) == "Start":
            ikiwa curname:
                ashiria RuntimeError("Double Start", (curname, l))
            curname = m.group(2)
            table = {}
            tables.append((curname, table))
            endelea
        isipokua:
            ikiwa sio curname:
                ashiria RuntimeError("End without start", l)
            ikiwa curname != m.group(2):
                ashiria RuntimeError("Unexpected end", l)
            curname = Tupu
            endelea
    ikiwa sio curname:
        endelea
    # Now we are kwenye a table
    fields = l.split(";")
    ikiwa len(fields) > 1:
        # Drop comment field
        fields = fields[:-1]
    ikiwa len(fields) == 1:
        fields = fields[0].split("-")
        ikiwa len(fields) > 1:
            # range
            jaribu:
                start, end = fields
            tatizo ValueError:
                ashiria RuntimeError("Unpacking problem", l)
        isipokua:
            start = end = fields[0]
        start = int(start, 16)
        end = int(end, 16)
        kila i kwenye range(start, end+1):
            table[i] = i
    isipokua:
        code, value = fields
        value = value.strip()
        ikiwa value:
            value = [int(v, 16) kila v kwenye value.split(" ")]
        isipokua:
            # table B.1
            value = Tupu
        table[int(code, 16)] = value

########### Generate compact Python versions of the tables #############

andika("""# This file ni generated by mkstringprep.py. DO NOT EDIT.
\"\"\"Library that exposes various tables found kwenye the StringPrep RFC 3454.

There are two kinds of tables: sets, kila which a member test ni provided,
and mappings, kila which a mapping function ni provided.
\"\"\"

kutoka unicodedata agiza ucd_3_2_0 kama unicodedata
""")

andika("assert unicodedata.unidata_version == %r" % (unicodedata.unidata_version,))

# A.1 ni the table of unassigned characters
# XXX Plane 15 PUA ni listed kama unassigned kwenye Python.
name, table = tables[0]
toa tables[0]
assert name == "A.1"
table = set(table.keys())
Cn = set(gen_category(["Cn"]))

# FDD0..FDEF are process internal codes
Cn -= set(range(0xFDD0, 0xFDF0))
# sio a character
Cn -= set(range(0xFFFE, 0x110000, 0x10000))
Cn -= set(range(0xFFFF, 0x110000, 0x10000))

# assert table == Cn

andika("""
eleza in_table_a1(code):
    ikiwa unicodedata.category(code) != 'Cn': rudisha Uongo
    c = ord(code)
    ikiwa 0xFDD0 <= c < 0xFDF0: rudisha Uongo
    rudisha (c & 0xFFFF) haiko kwenye (0xFFFE, 0xFFFF)
""")

# B.1 cannot easily be derived
name, table = tables[0]
toa tables[0]
assert name == "B.1"
table = sorted(table.keys())
andika("""
b1_set = """ + compact_set(table) + """
eleza in_table_b1(code):
    rudisha ord(code) kwenye b1_set
""")

# B.2 na B.3 ni case folding.
# It takes CaseFolding.txt into account, which is
# sio available kwenye the Python database. Since
# B.2 ni derived kutoka B.3, we process B.3 first.
# B.3 supposedly *is* CaseFolding-3.2.0.txt.

name, table_b2 = tables[0]
toa tables[0]
assert name == "B.2"

name, table_b3 = tables[0]
toa tables[0]
assert name == "B.3"

# B.3 ni mostly Python's .lower, tatizo kila a number
# of special cases, e.g. considering canonical forms.

b3_exceptions = {}

kila k,v kwenye table_b2.items():
    ikiwa list(map(ord, chr(k).lower())) != v:
        b3_exceptions[k] = "".join(map(chr,v))

b3 = sorted(b3_exceptions.items())

andika("""
b3_exceptions = {""")
kila i, kv kwenye enumerate(b3):
    andika("0x%x:%a," % kv, end=' ')
    ikiwa i % 4 == 3:
        andika()
andika("}")

andika("""
eleza map_table_b3(code):
    r = b3_exceptions.get(ord(code))
    ikiwa r ni sio Tupu: rudisha r
    rudisha code.lower()
""")

eleza map_table_b3(code):
    r = b3_exceptions.get(ord(code))
    ikiwa r ni sio Tupu: rudisha r
    rudisha code.lower()

# B.2 ni case folding kila NFKC. This ni the same kama B.3,
# tatizo where NormalizeWithKC(Fold(a)) !=
# NormalizeWithKC(Fold(NormalizeWithKC(Fold(a))))

eleza map_table_b2(a):
    al = map_table_b3(a)
    b = unicodedata.normalize("NFKC", al)
    bl = "".join([map_table_b3(ch) kila ch kwenye b])
    c = unicodedata.normalize("NFKC", bl)
    ikiwa b != c:
        rudisha c
    isipokua:
        rudisha al

specials = {}
kila k,v kwenye table_b2.items():
    ikiwa list(map(ord, map_table_b2(chr(k)))) != v:
        specials[k] = v

# B.3 should sio add any additional special cases
assert specials == {}

andika("""
eleza map_table_b2(a):
    al = map_table_b3(a)
    b = unicodedata.normalize("NFKC", al)
    bl = "".join([map_table_b3(ch) kila ch kwenye b])
    c = unicodedata.normalize("NFKC", bl)
    ikiwa b != c:
        rudisha c
    isipokua:
        rudisha al
""")

# C.1.1 ni a table ukijumuisha a single character
name, table = tables[0]
toa tables[0]
assert name == "C.1.1"
assert table == {0x20:0x20}

andika("""
eleza in_table_c11(code):
    rudisha code == " "
""")

# C.1.2 ni the rest of all space characters
name, table = tables[0]
toa tables[0]
assert name == "C.1.2"

# table = set(table.keys())
# Zs = set(gen_category(["Zs"])) - {0x20}
# assert Zs == table

andika("""
eleza in_table_c12(code):
    rudisha unicodedata.category(code) == "Zs" na code != " "

eleza in_table_c11_c12(code):
    rudisha unicodedata.category(code) == "Zs"
""")

# C.2.1 ASCII control characters
name, table_c21 = tables[0]
toa tables[0]
assert name == "C.2.1"

Cc = set(gen_category(["Cc"]))
Cc_ascii = Cc & set(range(128))
table_c21 = set(table_c21.keys())
assert Cc_ascii == table_c21

andika("""
eleza in_table_c21(code):
    rudisha ord(code) < 128 na unicodedata.category(code) == "Cc"
""")

# C.2.2 Non-ASCII control characters. It also includes
# a number of characters kwenye category Cf.
name, table_c22 = tables[0]
toa tables[0]
assert name == "C.2.2"

Cc_nonascii = Cc - Cc_ascii
table_c22 = set(table_c22.keys())
assert len(Cc_nonascii - table_c22) == 0

specials = list(table_c22 - Cc_nonascii)
specials.sort()

andika("""c22_specials = """ + compact_set(specials) + """
eleza in_table_c22(code):
    c = ord(code)
    ikiwa c < 128: rudisha Uongo
    ikiwa unicodedata.category(code) == "Cc": rudisha Kweli
    rudisha c kwenye c22_specials

eleza in_table_c21_c22(code):
    rudisha unicodedata.category(code) == "Cc" ama \\
           ord(code) kwenye c22_specials
""")

# C.3 Private use
name, table = tables[0]
toa tables[0]
assert name == "C.3"

Co = set(gen_category(["Co"]))
assert set(table.keys()) == Co

andika("""
eleza in_table_c3(code):
    rudisha unicodedata.category(code) == "Co"
""")

# C.4 Non-character code points, xFFFE, xFFFF
# plus process internal codes
name, table = tables[0]
toa tables[0]
assert name == "C.4"

nonchar = set(range(0xFDD0,0xFDF0))
nonchar.update(range(0xFFFE,0x110000,0x10000))
nonchar.update(range(0xFFFF,0x110000,0x10000))
table = set(table.keys())
assert table == nonchar

andika("""
eleza in_table_c4(code):
    c = ord(code)
    ikiwa c < 0xFDD0: rudisha Uongo
    ikiwa c < 0xFDF0: rudisha Kweli
    rudisha (ord(code) & 0xFFFF) kwenye (0xFFFE, 0xFFFF)
""")

# C.5 Surrogate codes
name, table = tables[0]
toa tables[0]
assert name == "C.5"

Cs = set(gen_category(["Cs"]))
assert set(table.keys()) == Cs

andika("""
eleza in_table_c5(code):
    rudisha unicodedata.category(code) == "Cs"
""")

# C.6 Inappropriate kila plain text
name, table = tables[0]
toa tables[0]
assert name == "C.6"

table = sorted(table.keys())

andika("""
c6_set = """ + compact_set(table) + """
eleza in_table_c6(code):
    rudisha ord(code) kwenye c6_set
""")

# C.7 Inappropriate kila canonical representation
name, table = tables[0]
toa tables[0]
assert name == "C.7"

table = sorted(table.keys())

andika("""
c7_set = """ + compact_set(table) + """
eleza in_table_c7(code):
    rudisha ord(code) kwenye c7_set
""")

# C.8 Change display properties ama are deprecated
name, table = tables[0]
toa tables[0]
assert name == "C.8"

table = sorted(table.keys())

andika("""
c8_set = """ + compact_set(table) + """
eleza in_table_c8(code):
    rudisha ord(code) kwenye c8_set
""")

# C.9 Tagging characters
name, table = tables[0]
toa tables[0]
assert name == "C.9"

table = sorted(table.keys())

andika("""
c9_set = """ + compact_set(table) + """
eleza in_table_c9(code):
    rudisha ord(code) kwenye c9_set
""")

# D.1 Characters ukijumuisha bidirectional property "R" ama "AL"
name, table = tables[0]
toa tables[0]
assert name == "D.1"

RandAL = set(gen_bidirectional(["R","AL"]))
assert set(table.keys()) == RandAL

andika("""
eleza in_table_d1(code):
    rudisha unicodedata.bidirectional(code) kwenye ("R","AL")
""")

# D.2 Characters ukijumuisha bidirectional property "L"
name, table = tables[0]
toa tables[0]
assert name == "D.2"

L = set(gen_bidirectional(["L"]))
assert set(table.keys()) == L

andika("""
eleza in_table_d2(code):
    rudisha unicodedata.bidirectional(code) == "L"
""")
